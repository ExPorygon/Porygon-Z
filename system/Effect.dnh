//Graphical Effect Script

let CSD = GetCurrentScriptDirectory;
let MD = GetModuleDirectory;

#include"System/LIB/Event_Const.dnh"
#include"Script/LIB/Function_Misc.dnh"
#include"Script/LIB/Function_Audio.dnh"
#include"Script/SpellInfo.dnh"
#include"Script/LIB/Function_Rand.dnh"
#include"Script/LIB/Function_Desync.dnh"

let END_FAILED = 1;
let END_SUCCESS = 2;
let typeEnd = END_FAILED;
let SpellID = 0;
let BossID = 0;
let IsBonusText = false;
let hitFixCount = 0;
let isDiscordReady = false;
let discordReadyCount = 45;
let initSpellBonus = 0;
let spellBonus = 0;
let spellBonusCountFrame = 0;
let delayFurther = true;

//Shader global objects
let sh_hueShift = ID_INVALID;
let magicCircle = ID_INVALID;
let magicCircle_copy = ID_INVALID;
let circleCount = 0;

let delayedSpellIDs = [9, 10, 11, 12, 29, 30, 31, 32, 49, 50, 51, 52, 77, 78, 79, 80, 105, 106, 107, 108, 133, 134, 135, 136];

task preload {
	loop(1) { yield; }
	magicCircle = ObjShader_Create();
	let magicCircle_path = "Script/LIB/PS_mask_spellcircle.hlsl";
	ObjShader_SetShaderF(magicCircle,magicCircle_path);
	magicCircle_copy = ObjShader_Create();
	ObjShader_SetShaderF(magicCircle_copy,magicCircle_path);
	sh_hueShift = ObjShader_Create();
	let pathToThing = "Script/LIB/PS_HueShiftHLSL.dnh";
	ObjShader_SetShaderF(sh_hueShift,pathToThing);
	LoadTexture(magicCircle);
	LoadTexture(magicCircle_copy);

}

function isInIdsArray(id){
	ascent(i in 0..length(delayedSpellIDs)){
		if(delayedSpellIDs[i]==id){
			return true;
		}
	}
	return false;
}

@Initialize {
	SetCommonData("BossExploding", false);
	preload;
}

@MainLoop {
	if(GetCommonData("BossExploding", false)==true){
		if(spellBonusCountFrame==0){
			initSpellBonus = Obj_GetValueD(GetEnemyBossSceneObjectID,"Spell Bonus",0);
			//WriteLog("Spell Bonus Set on Frame 1 of Explosion");
		}
		if(delayFurther){
			spellBonus = Obj_GetValueD(GetEnemyBossSceneObjectID,"Spell Bonus",0);
			if(spellBonus<initSpellBonus){
				//WriteLog("Spell Bonus Fell");
				delayFurther = false;
			}
		}
		//WriteLog(IntToString(Obj_GetValueD(GetEnemyBossSceneObjectID,"Spell Bonus",0)));
		//WriteLog("Init Spell Bonus" ~ IntToString(initSpellBonus));
		//WriteLog("Spell Bonus" ~ IntToString(spellBonus));
		spellBonusCountFrame++;
	}
	else{
		initSpellBonus = 0;
		spellBonus = 0;
		delayFurther = true;
	}
	discordReadyCount++;
	if(GetCommonData("Discord",false) || GetCommonData("Simple Discord",false)) { discordReadyCount = 0; }
	if(GetCommonData("Balance",0)>=4000 && !isDiscordReady && !GetAreaCommonData("PlayState","Infinite Discord",false) && GetAreaCommonData("Options","DiscordReady",true) && discordReadyCount>45) { DiscordReady; isDiscordReady = true; }
	if(GetPlayerState==STATE_HIT) { hitFixCount++; } else { hitFixCount = 0; }
	if(GetCommonData("Debug",true)) {
		if(GetKeyState(KEY_S)==KEY_PUSH) {
			//PlaySoundEffect("crash",100);
			//DiscordBreak;
			//DiscordEffect(true);
			PlaySoundEffect("effect4",100);
			SetAreaCommonData("PlayState","Infinite Discord",!GetAreaCommonData("PlayState","Infinite Discord",false));
		}
		if(GetKeyState(KEY_D)==KEY_PUSH) {
			PlaySoundEffect("crash",80);
			DiscordBreak;
			let simple = !GetAreaCommonData("Options","DiscordInversion",true);
			if(!simple) { DiscordBreak; }
			DiscordEffect(simple,true);
		}
	}
	if(!GetAreaCommonData("PlayState","Infinite Discord",false)) {
		if(GetVirtualKeyState(VK_USER1)==KEY_PUSH && !GetCommonData("Discord",false) && !GetCommonData("Simple Discord",false) && !GetCommonData("OnEvent",false) && !ObjEnemyBossScene_GetInfo(GetEnemyBossSceneObjectID,INFO_IS_LAST_SPELL) && GetPlayerState!=STATE_DOWN && hitFixCount<16 && !GetCommonData("END",false)) {
			if(GetCommonData("Balance",0)>=4000 && !IsPlayerSpellActive) {
				PlaySoundEffect("crash",80);
				let simple = !GetAreaCommonData("Options","DiscordInversion",true);
				if(!simple) { DiscordBreak; }
				DiscordEffect(simple,false);
			}
			else if(GetCommonData("Balance",0)>=4000 && !IsPlayerSpellActive && Obj_GetValueD(GetEnemyBossSceneObjectID,"Discord Start",false)) {
				PlaySoundEffect("crash",80);
				DiscordBreak;
				let simple = !GetAreaCommonData("Options","DiscordInversion",true);
				if(!simple) { DiscordBreak; }
				DiscordEffect(simple,false);
			}
		}
	}
	else {
		if(GetVirtualKeyState(VK_USER1)==KEY_PUSH && !GetCommonData("OnEvent",false) && !ObjEnemyBossScene_GetInfo(GetEnemyBossSceneObjectID,INFO_IS_LAST_SPELL) && GetPlayerState!=STATE_DOWN && GetPlayerState!=STATE_HIT && !GetCommonData("END",false)) {
			if(GetCommonData("Balance",0)>=3000) {
				PlaySoundEffect("effect",100);
				SetCommonData("Balance",GetCommonData("Balance",0)-3000);
				FlashBomb(GetPlayerX,GetPlayerY);
			}
		}
	}
	yield;
}

@Event {
	alternative(GetEventType)
	case(EV_EFFECT) {
		let eventParam = GetEventArgument(0);
		let type = eventParam[0][0];
		alternative(type)
		case(1.01) { SpellBurstA1(eventParam[1][0],eventParam[2][0],"Star",eventParam[3]); }
		case(1.02) { SpellBurstA1(eventParam[1][0],eventParam[2][0],"Magic",eventParam[3]); }
		case(1.03) { SpellBurstA1(eventParam[1][0],eventParam[2][0],"Maple",eventParam[3]); }
		case(1.04) { SpellBurstA1(eventParam[1][0],eventParam[2][0],"Snow",eventParam[3]); }
		case(1.05) { SpellBurstA1(eventParam[1][0],eventParam[2][0],"Cherry",eventParam[3]); }
		case(1.06) { SpellBurstA1(eventParam[1][0],eventParam[2][0],"Music",eventParam[3]); }
		case(1.07) { SpellBurstA1(eventParam[1][0],eventParam[2][0],"Flower",eventParam[3]); }
		case(1.08) { SpellBurstA1(eventParam[1][0],eventParam[2][0],"Heart",eventParam[3]); }
		case(1.09) { SpellBurstA1(eventParam[1][0],eventParam[2][0],"Cloud",eventParam[3]); }
		case(1.10) { SpellBurstA1(eventParam[1][0],eventParam[2][0],"Earth",eventParam[3]); }
		case(1.11) { SpellBurstA1(eventParam[1][0],eventParam[2][0],"Lightning",eventParam[3]); }
		case(1.12) { SpellBurstA1(eventParam[1][0],eventParam[2][0],"Moon",eventParam[3]); }
		case(1.13) { SpellBurstA1(eventParam[1][0],eventParam[2][0],"Nuclear",eventParam[3]); }
		case(1.14) { SpellBurstA1(eventParam[1][0],eventParam[2][0],"Atom",eventParam[3]); }
		case(1.15) { SpellBurstA1(eventParam[1][0],eventParam[2][0],"Leaf",eventParam[3]); }
		case(1.16) { SpellBurstA1(eventParam[1][0],eventParam[2][0],"Metal",eventParam[3]); }
		case(1.17) { SpellBurstA1(eventParam[1][0],eventParam[2][0],"Fire",eventParam[3]); }
		case(1.18) { SpellBurstA1(eventParam[1][0],eventParam[2][0],"Water",eventParam[3]); }
		case(1.19) { SpellBurstA1(eventParam[1][0],eventParam[2][0],"Sun",eventParam[3]); }
		case(1.20) { SpellBurstA1(eventParam[1][0],eventParam[2][0],"Feather",eventParam[3]); }
		case(1.21) { SpellBurstA1(eventParam[1][0],eventParam[2][0],"Glass",eventParam[3]); }

		case(2) { SpellBurstB1(eventParam[1][0],eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }

		case(3) { ConcCircle01(eventParam[1][0],eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }

		case(4) { ScreenShake(eventParam[1][0],eventParam[2][0]); }

		case(5) { Shield(eventParam[1][0]); }
		case(5.1) { Shield_DS(eventParam[1][0]); }

		case(6) { ShieldShatter(eventParam[1][0],eventParam[2][0],eventParam[3][0],eventParam[4][0]); }

		case(7) { Sephirot(eventParam[1][0],eventParam[2][0],eventParam[3]); }

		case(8.1) { SummonEffectA1(eventParam[1][0],eventParam[2][0],eventParam[3][0],eventParam[4]); }
		case(8.2) { SummonEffectA2(eventParam[1][0],eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }

		case(9.1) { AlertZone01(eventParam[1][0],eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5][0]); }
		case(9.2) { AlertZone02(eventParam[1][0],eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(9.3) { AlertZone03(eventParam[1][0],eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5][0],eventParam[6][0]); }

		case(10) { Wings(eventParam[1][0],eventParam[2][0]); }

		case(11) { Slowdown(eventParam[1][0],eventParam[2][0]); }

		case(12) { Darkness(eventParam[1][0],eventParam[2][0],eventParam[3][0],eventParam[4]); }

		case(13) { LaserBase(eventParam[1][0],eventParam[2][0]); }

		case(14) { SetHueSaturation(eventParam[1][0],eventParam[2][0],eventParam[3][0]); }
	}
	case(EV_EXPLODE) {
		let eventParam = GetEventArgument(0);
		let objEnemy = eventParam[1][0];
		let type = eventParam[0][0];
		alternative(type)
		case(1.01) { ExplosionA1(objEnemy,"Star",eventParam[2],eventParam[3]); }
		case(1.02) { ExplosionA1(objEnemy,"Magic",eventParam[2],eventParam[3]); }
		case(1.03) { ExplosionA1(objEnemy,"Maple",eventParam[2],eventParam[3]); }
		case(1.04) { ExplosionA1(objEnemy,"Snow",eventParam[2],eventParam[3]); }
		case(1.05) { ExplosionA1(objEnemy,"Cherry",eventParam[2],eventParam[3]); }
		case(1.06) { ExplosionA1(objEnemy,"Music",eventParam[2],eventParam[3]); }
		case(1.07) { ExplosionA1(objEnemy,"Flower",eventParam[2],eventParam[3]); }
		case(1.08) { ExplosionA1(objEnemy,"Heart",eventParam[2],eventParam[3]); }
		case(1.09) { ExplosionA1(objEnemy,"Cloud",eventParam[2],eventParam[3]); }
		case(1.10) { ExplosionA1(objEnemy,"Earth",eventParam[2],eventParam[3]); }
		case(1.11) { ExplosionA1(objEnemy,"Lightning",eventParam[2],eventParam[3]); }
		case(1.12) { ExplosionA1(objEnemy,"Moon",eventParam[2],eventParam[3]); }
		case(1.13) { ExplosionA1(objEnemy,"Nuclear",eventParam[2],eventParam[3]); }
		case(1.14) { ExplosionA1(objEnemy,"Atom",eventParam[2],eventParam[3]); }
		case(1.15) { ExplosionA1(objEnemy,"Leaf",eventParam[2],eventParam[3]); }
		case(1.16) { ExplosionA1(objEnemy,"Metal",eventParam[2],eventParam[3]); }
		case(1.17) { ExplosionA1(objEnemy,"Fire",eventParam[2],eventParam[3]); }
		case(1.18) { ExplosionA1(objEnemy,"Water",eventParam[2],eventParam[3]); }
		case(1.19) { ExplosionA1(objEnemy,"Sun",eventParam[2],eventParam[3]); }
		case(1.20) { ExplosionA1(objEnemy,"Feather",eventParam[2],eventParam[3]); }
		case(1.21) { ExplosionA1(objEnemy,"Glass",eventParam[2],eventParam[3]); }

		case(2.01) { ExplosionA2(objEnemy,"Star",eventParam[2],eventParam[3]); }
		case(2.02) { ExplosionA2(objEnemy,"Magic",eventParam[2],eventParam[3]); }
		case(2.03) { ExplosionA2(objEnemy,"Maple",eventParam[2],eventParam[3]); }
		case(2.04) { ExplosionA2(objEnemy,"Snow",eventParam[2],eventParam[3]); }
		case(2.05) { ExplosionA2(objEnemy,"Cherry",eventParam[2],eventParam[3]); }
		case(2.06) { ExplosionA2(objEnemy,"Music",eventParam[2],eventParam[3]); }
		case(2.07) { ExplosionA2(objEnemy,"Flower",eventParam[2],eventParam[3]); }
		case(2.08) { ExplosionA2(objEnemy,"Heart",eventParam[2],eventParam[3]); }
		case(2.09) { ExplosionA2(objEnemy,"Cloud",eventParam[2],eventParam[3]); }
		case(2.10) { ExplosionA2(objEnemy,"Earth",eventParam[2],eventParam[3]); }
		case(2.11) { ExplosionA2(objEnemy,"Lightning",eventParam[2],eventParam[3]); }
		case(2.12) { ExplosionA2(objEnemy,"Moon",eventParam[2],eventParam[3]); }
		case(2.13) { ExplosionA2(objEnemy,"Nuclear",eventParam[2],eventParam[3]); }
		case(2.14) { ExplosionA2(objEnemy,"Atom",eventParam[2],eventParam[3]); }
		case(2.15) { ExplosionA2(objEnemy,"Leaf",eventParam[2],eventParam[3]); }
		case(2.16) { ExplosionA2(objEnemy,"Metal",eventParam[2],eventParam[3]); }
		case(2.17) { ExplosionA2(objEnemy,"Fire",eventParam[2],eventParam[3]); }
		case(2.18) { ExplosionA2(objEnemy,"Water",eventParam[2],eventParam[3]); }
		case(2.19) { ExplosionA2(objEnemy,"Sun",eventParam[2],eventParam[3]); }
		case(2.20) { ExplosionA2(objEnemy,"Feather",eventParam[2],eventParam[3]); }
		case(2.21) { ExplosionA2(objEnemy,"Glass",eventParam[2],eventParam[3]); }

		case(2.51) { ExplosionA3(objEnemy,"Star",eventParam[2],eventParam[3]); }
		case(2.52) { ExplosionA3(objEnemy,"Magic",eventParam[2],eventParam[3]); }
		case(2.53) { ExplosionA3(objEnemy,"Maple",eventParam[2],eventParam[3]); }
		case(2.54) { ExplosionA3(objEnemy,"Snow",eventParam[2],eventParam[3]); }
		case(2.55) { ExplosionA3(objEnemy,"Cherry",eventParam[2],eventParam[3]); }
		case(2.56) { ExplosionA3(objEnemy,"Music",eventParam[2],eventParam[3]); }
		case(2.57) { ExplosionA3(objEnemy,"Flower",eventParam[2],eventParam[3]); }
		case(2.58) { ExplosionA3(objEnemy,"Heart",eventParam[2],eventParam[3]); }
		case(2.59) { ExplosionA3(objEnemy,"Cloud",eventParam[2],eventParam[3]); }
		case(2.60) { ExplosionA3(objEnemy,"Earth",eventParam[2],eventParam[3]); }
		case(2.61) { ExplosionA3(objEnemy,"Lightning",eventParam[2],eventParam[3]); }
		case(2.62) { ExplosionA3(objEnemy,"Moon",eventParam[2],eventParam[3]); }
		case(2.63) { ExplosionA3(objEnemy,"Nuclear",eventParam[2],eventParam[3]); }
		case(2.64) { ExplosionA3(objEnemy,"Atom",eventParam[2],eventParam[3]); }
		case(2.65) { ExplosionA3(objEnemy,"Leaf",eventParam[2],eventParam[3]); }
		case(2.66) { ExplosionA3(objEnemy,"Metal",eventParam[2],eventParam[3]); }
		case(2.67) { ExplosionA3(objEnemy,"Fire",eventParam[2],eventParam[3]); }
		case(2.68) { ExplosionA3(objEnemy,"Water",eventParam[2],eventParam[3]); }
		case(2.69) { ExplosionA3(objEnemy,"Sun",eventParam[2],eventParam[3]); }
		case(2.70) { ExplosionA3(objEnemy,"Feather",eventParam[2],eventParam[3]); }
		case(2.71) { ExplosionA3(objEnemy,"Glass",eventParam[2],eventParam[3]); }

		case(3.01) { ExplosionB1(objEnemy,"Star",eventParam[2],eventParam[3]); }
		case(3.02) { ExplosionB1(objEnemy,"Magic",eventParam[2],eventParam[3]); }
		case(3.03) { ExplosionB1(objEnemy,"Maple",eventParam[2],eventParam[3]); }
		case(3.04) { ExplosionB1(objEnemy,"Snow",eventParam[2],eventParam[3]); }
		case(3.05) { ExplosionB1(objEnemy,"Cherry",eventParam[2],eventParam[3]); }
		case(3.06) { ExplosionB1(objEnemy,"Music",eventParam[2],eventParam[3]); }
		case(3.07) { ExplosionB1(objEnemy,"Flower",eventParam[2],eventParam[3]); }
		case(3.08) { ExplosionB1(objEnemy,"Heart",eventParam[2],eventParam[3]); }
		case(3.09) { ExplosionB1(objEnemy,"Cloud",eventParam[2],eventParam[3]); }
		case(3.10) { ExplosionB1(objEnemy,"Earth",eventParam[2],eventParam[3]); }
		case(3.11) { ExplosionB1(objEnemy,"Lightning",eventParam[2],eventParam[3]); }
		case(3.12) { ExplosionB1(objEnemy,"Moon",eventParam[2],eventParam[3]); }
		case(3.13) { ExplosionB1(objEnemy,"Nuclear",eventParam[2],eventParam[3]); }
		case(3.14) { ExplosionB1(objEnemy,"Atom",eventParam[2],eventParam[3]); }
		case(3.15) { ExplosionB1(objEnemy,"Leaf",eventParam[2],eventParam[3]); }
		case(3.16) { ExplosionB1(objEnemy,"Metal",eventParam[2],eventParam[3]); }
		case(3.17) { ExplosionB1(objEnemy,"Fire",eventParam[2],eventParam[3]); }
		case(3.18) { ExplosionB1(objEnemy,"Water",eventParam[2],eventParam[3]); }
		case(3.19) { ExplosionB1(objEnemy,"Sun",eventParam[2],eventParam[3]); }
		case(3.20) { ExplosionB1(objEnemy,"Feather",eventParam[2],eventParam[3]); }
		case(3.21) { ExplosionB1(objEnemy,"Glass",eventParam[2],eventParam[3]); }

		case(4.01) { ExplosionB2(objEnemy,"Star",eventParam[2],eventParam[3]); }
		case(4.02) { ExplosionB2(objEnemy,"Magic",eventParam[2],eventParam[3]); }
		case(4.03) { ExplosionB2(objEnemy,"Maple",eventParam[2],eventParam[3]); }
		case(4.04) { ExplosionB2(objEnemy,"Snow",eventParam[2],eventParam[3]); }
		case(4.05) { ExplosionB2(objEnemy,"Cherry",eventParam[2],eventParam[3]); }
		case(4.06) { ExplosionB2(objEnemy,"Music",eventParam[2],eventParam[3]); }
		case(4.07) { ExplosionB2(objEnemy,"Flower",eventParam[2],eventParam[3]); }
		case(4.08) { ExplosionB2(objEnemy,"Heart",eventParam[2],eventParam[3]); }
		case(4.09) { ExplosionB2(objEnemy,"Cloud",eventParam[2],eventParam[3]); }
		case(4.10) { ExplosionB2(objEnemy,"Earth",eventParam[2],eventParam[3]); }
		case(4.11) { ExplosionB2(objEnemy,"Lightning",eventParam[2],eventParam[3]); }
		case(4.12) { ExplosionB2(objEnemy,"Moon",eventParam[2],eventParam[3]); }
		case(4.13) { ExplosionB2(objEnemy,"Nuclear",eventParam[2],eventParam[3]); }
		case(4.14) { ExplosionB2(objEnemy,"Atom",eventParam[2],eventParam[3]); }
		case(4.15) { ExplosionB2(objEnemy,"Leaf",eventParam[2],eventParam[3]); }
		case(4.16) { ExplosionB2(objEnemy,"Metal",eventParam[2],eventParam[3]); }
		case(4.17) { ExplosionB2(objEnemy,"Fire",eventParam[2],eventParam[3]); }
		case(4.18) { ExplosionB2(objEnemy,"Water",eventParam[2],eventParam[3]); }
		case(4.19) { ExplosionB2(objEnemy,"Sun",eventParam[2],eventParam[3]); }
		case(4.20) { ExplosionB2(objEnemy,"Feather",eventParam[2],eventParam[3]); }
		case(4.21) { ExplosionB2(objEnemy,"Glass",eventParam[2],eventParam[3]); }

		case(5.01) { ExplosionB3(objEnemy,"Star",eventParam[2],eventParam[3]); }
		case(5.02) { ExplosionB3(objEnemy,"Magic",eventParam[2],eventParam[3]); }
		case(5.03) { ExplosionB3(objEnemy,"Maple",eventParam[2],eventParam[3]); }
		case(5.04) { ExplosionB3(objEnemy,"Snow",eventParam[2],eventParam[3]); }
		case(5.05) { ExplosionB3(objEnemy,"Cherry",eventParam[2],eventParam[3]); }
		case(5.06) { ExplosionB3(objEnemy,"Music",eventParam[2],eventParam[3]); }
		case(5.07) { ExplosionB3(objEnemy,"Flower",eventParam[2],eventParam[3]); }
		case(5.08) { ExplosionB3(objEnemy,"Heart",eventParam[2],eventParam[3]); }
		case(5.09) { ExplosionB3(objEnemy,"Cloud",eventParam[2],eventParam[3]); }
		case(5.10) { ExplosionB3(objEnemy,"Earth",eventParam[2],eventParam[3]); }
		case(5.11) { ExplosionB3(objEnemy,"Lightning",eventParam[2],eventParam[3]); }
		case(5.12) { ExplosionB3(objEnemy,"Moon",eventParam[2],eventParam[3]); }
		case(5.13) { ExplosionB3(objEnemy,"Nuclear",eventParam[2],eventParam[3]); }
		case(5.14) { ExplosionB3(objEnemy,"Atom",eventParam[2],eventParam[3]); }
		case(5.15) { ExplosionB3(objEnemy,"Leaf",eventParam[2],eventParam[3]); }
		case(5.16) { ExplosionB3(objEnemy,"Metal",eventParam[2],eventParam[3]); }
		case(5.17) { ExplosionB3(objEnemy,"Fire",eventParam[2],eventParam[3]); }
		case(5.18) { ExplosionB3(objEnemy,"Water",eventParam[2],eventParam[3]); }
		case(5.19) { ExplosionB3(objEnemy,"Sun",eventParam[2],eventParam[3]); }
		case(5.20) { ExplosionB3(objEnemy,"Feather",eventParam[2],eventParam[3]); }
		case(5.21) { ExplosionB3(objEnemy,"Glass",eventParam[2],eventParam[3]); }

		case(6.01) { ExplosionB4(objEnemy,"Star",eventParam[2],eventParam[3]); }
		case(6.02) { ExplosionB4(objEnemy,"Magic",eventParam[2],eventParam[3]); }
		case(6.03) { ExplosionB4(objEnemy,"Maple",eventParam[2],eventParam[3]); }
		case(6.04) { ExplosionB4(objEnemy,"Snow",eventParam[2],eventParam[3]); }
		case(6.05) { ExplosionB4(objEnemy,"Cherry",eventParam[2],eventParam[3]); }
		case(6.06) { ExplosionB4(objEnemy,"Music",eventParam[2],eventParam[3]); }
		case(6.07) { ExplosionB4(objEnemy,"Flower",eventParam[2],eventParam[3]); }
		case(6.08) { ExplosionB4(objEnemy,"Heart",eventParam[2],eventParam[3]); }
		case(6.09) { ExplosionB4(objEnemy,"Cloud",eventParam[2],eventParam[3]); }
		case(6.10) { ExplosionB4(objEnemy,"Earth",eventParam[2],eventParam[3]); }
		case(6.11) { ExplosionB4(objEnemy,"Lightning",eventParam[2],eventParam[3]); }
		case(6.12) { ExplosionB4(objEnemy,"Moon",eventParam[2],eventParam[3]); }
		case(6.13) { ExplosionB4(objEnemy,"Nuclear",eventParam[2],eventParam[3]); }
		case(6.14) { ExplosionB4(objEnemy,"Atom",eventParam[2],eventParam[3]); }
		case(6.15) { ExplosionB4(objEnemy,"Leaf",eventParam[2],eventParam[3]); }
		case(6.16) { ExplosionB4(objEnemy,"Metal",eventParam[2],eventParam[3]); }
		case(6.17) { ExplosionB4(objEnemy,"Fire",eventParam[2],eventParam[3]); }
		case(6.18) { ExplosionB4(objEnemy,"Water",eventParam[2],eventParam[3]); }
		case(6.19) { ExplosionB4(objEnemy,"Sun",eventParam[2],eventParam[3]); }
		case(6.20) { ExplosionB4(objEnemy,"Feather",eventParam[2],eventParam[3]); }
		case(6.21) { ExplosionB4(objEnemy,"Glass",eventParam[2],eventParam[3]); }

		case(7.01) { ExplosionRainbowB1(objEnemy,"Star"); }
		case(7.02) { ExplosionRainbowB1(objEnemy,"Magic"); }
		case(7.03) { ExplosionRainbowB1(objEnemy,"Maple"); }
		case(7.04) { ExplosionRainbowB1(objEnemy,"Snow"); }
		case(7.05) { ExplosionRainbowB1(objEnemy,"Cherry"); }
		case(7.06) { ExplosionRainbowB1(objEnemy,"Music"); }
		case(7.07) { ExplosionRainbowB1(objEnemy,"Flower"); }
		case(7.08) { ExplosionRainbowB1(objEnemy,"Heart"); }
		case(7.09) { ExplosionRainbowB1(objEnemy,"Cloud"); }
		case(7.10) { ExplosionRainbowB1(objEnemy,"Earth"); }
		case(7.11) { ExplosionRainbowB1(objEnemy,"Lightning"); }
		case(7.12) { ExplosionRainbowB1(objEnemy,"Moon"); }
		case(7.13) { ExplosionRainbowB1(objEnemy,"Nuclear"); }
		case(7.14) { ExplosionRainbowB1(objEnemy,"Atom"); }
		case(7.15) { ExplosionRainbowB1(objEnemy,"Leaf"); }
		case(7.16) { ExplosionRainbowB1(objEnemy,"Metal"); }
		case(7.17) { ExplosionRainbowB1(objEnemy,"Fire"); }
		case(7.18) { ExplosionRainbowB1(objEnemy,"Water"); }
		case(7.19) { ExplosionRainbowB1(objEnemy,"Sun"); }
		case(7.20) { ExplosionRainbowB1(objEnemy,"Feather"); }
		case(7.21) { ExplosionRainbowB1(objEnemy,"Glass"); }

		case(8.01) { ExplosionRainbowB2(objEnemy,"Star"); }
		case(8.02) { ExplosionRainbowB2(objEnemy,"Magic"); }
		case(8.03) { ExplosionRainbowB2(objEnemy,"Maple"); }
		case(8.04) { ExplosionRainbowB2(objEnemy,"Snow"); }
		case(8.05) { ExplosionRainbowB2(objEnemy,"Cherry"); }
		case(8.06) { ExplosionRainbowB2(objEnemy,"Music"); }
		case(8.07) { ExplosionRainbowB2(objEnemy,"Flower"); }
		case(8.08) { ExplosionRainbowB2(objEnemy,"Heart"); }
		case(8.09) { ExplosionRainbowB2(objEnemy,"Cloud"); }
		case(8.10) { ExplosionRainbowB2(objEnemy,"Earth"); }
		case(8.11) { ExplosionRainbowB2(objEnemy,"Lightning"); }
		case(8.12) { ExplosionRainbowB2(objEnemy,"Moon"); }
		case(8.13) { ExplosionRainbowB2(objEnemy,"Nuclear"); }
		case(8.14) { ExplosionRainbowB2(objEnemy,"Atom"); }
		case(8.15) { ExplosionRainbowB2(objEnemy,"Leaf"); }
		case(8.16) { ExplosionRainbowB2(objEnemy,"Metal"); }
		case(8.17) { ExplosionRainbowB2(objEnemy,"Fire"); }
		case(8.18) { ExplosionRainbowB2(objEnemy,"Water"); }
		case(8.19) { ExplosionRainbowB2(objEnemy,"Sun"); }
		case(8.20) { ExplosionRainbowB2(objEnemy,"Feather"); }
		case(8.21) { ExplosionRainbowB2(objEnemy,"Glass"); }

		case(9.01) { ExplosionRainbowB3(objEnemy,"Star"); }
		case(9.02) { ExplosionRainbowB3(objEnemy,"Magic"); }
		case(9.03) { ExplosionRainbowB3(objEnemy,"Maple"); }
		case(9.04) { ExplosionRainbowB3(objEnemy,"Snow"); }
		case(9.05) { ExplosionRainbowB3(objEnemy,"Cherry"); }
		case(9.06) { ExplosionRainbowB3(objEnemy,"Music"); }
		case(9.07) { ExplosionRainbowB3(objEnemy,"Flower"); }
		case(9.08) { ExplosionRainbowB3(objEnemy,"Heart"); }
		case(9.09) { ExplosionRainbowB3(objEnemy,"Cloud"); }
		case(9.10) { ExplosionRainbowB3(objEnemy,"Earth"); }
		case(9.11) { ExplosionRainbowB3(objEnemy,"Lightning"); }
		case(9.12) { ExplosionRainbowB3(objEnemy,"Moon"); }
		case(9.13) { ExplosionRainbowB3(objEnemy,"Nuclear"); }
		case(9.14) { ExplosionRainbowB3(objEnemy,"Atom"); }
		case(9.15) { ExplosionRainbowB3(objEnemy,"Leaf"); }
		case(9.16) { ExplosionRainbowB3(objEnemy,"Metal"); }
		case(9.17) { ExplosionRainbowB3(objEnemy,"Fire"); }
		case(9.18) { ExplosionRainbowB3(objEnemy,"Water"); }
		case(9.19) { ExplosionRainbowB3(objEnemy,"Sun"); }
		case(9.20) { ExplosionRainbowB3(objEnemy,"Feather"); }
		case(9.21) { ExplosionRainbowB3(objEnemy,"Glass"); }

		case(10) { PPCExplode(objEnemy,eventParam[2]); }
		case(11) { PPCExplodeRainbow(objEnemy); }
	}
	case(EV_CONCENTRATION) {
		let eventParam = GetEventArgument(0);
		let objEnemy = eventParam[1][0];
		let type = eventParam[0][0];
		alternative(type)
		case(1.01) { ConcentrationA1(objEnemy,"Star",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(1.02) { ConcentrationA1(objEnemy,"Magic",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(1.03) { ConcentrationA1(objEnemy,"Maple",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(1.04) { ConcentrationA1(objEnemy,"Snow",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(1.05) { ConcentrationA1(objEnemy,"Cherry",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(1.06) { ConcentrationA1(objEnemy,"Music",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(1.07) { ConcentrationA1(objEnemy,"Flower",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(1.08) { ConcentrationA1(objEnemy,"Heart",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(1.09) { ConcentrationA1(objEnemy,"Cloud",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(1.10) { ConcentrationA1(objEnemy,"Earth",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(1.11) { ConcentrationA1(objEnemy,"Lightning",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(1.12) { ConcentrationA1(objEnemy,"Moon",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(1.13) { ConcentrationA1(objEnemy,"Nuclear",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(1.14) { ConcentrationA1(objEnemy,"Atom",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(1.15) { ConcentrationA1(objEnemy,"Leaf",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(1.16) { ConcentrationA1(objEnemy,"Metal",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(1.17) { ConcentrationA1(objEnemy,"Fire",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(1.18) { ConcentrationA1(objEnemy,"Water",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(1.19) { ConcentrationA1(objEnemy,"Sun",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(1.20) { ConcentrationA1(objEnemy,"Feather",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(1.21) { ConcentrationA1(objEnemy,"Glass",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }

		case(2.01) { ConcentrationA2(objEnemy,"Star",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(2.02) { ConcentrationA2(objEnemy,"Magic",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(2.03) { ConcentrationA2(objEnemy,"Maple",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(2.04) { ConcentrationA2(objEnemy,"Snow",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(2.05) { ConcentrationA2(objEnemy,"Cherry",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(2.06) { ConcentrationA2(objEnemy,"Music",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(2.07) { ConcentrationA2(objEnemy,"Flower",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(2.08) { ConcentrationA2(objEnemy,"Heart",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(2.09) { ConcentrationA2(objEnemy,"Cloud",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(2.10) { ConcentrationA2(objEnemy,"Earth",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(2.11) { ConcentrationA2(objEnemy,"Lightning",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(2.12) { ConcentrationA2(objEnemy,"Moon",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(2.13) { ConcentrationA2(objEnemy,"Nuclear",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(2.14) { ConcentrationA2(objEnemy,"Atom",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(2.15) { ConcentrationA2(objEnemy,"Leaf",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(2.16) { ConcentrationA2(objEnemy,"Metal",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(2.17) { ConcentrationA2(objEnemy,"Fire",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(2.18) { ConcentrationA2(objEnemy,"Water",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(2.19) { ConcentrationA2(objEnemy,"Sun",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(2.20) { ConcentrationA2(objEnemy,"Feather",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(2.21) { ConcentrationA2(objEnemy,"Glass",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }

		case(3.01) { ConcentrationA3(objEnemy,"Star",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(3.02) { ConcentrationA3(objEnemy,"Magic",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(3.03) { ConcentrationA3(objEnemy,"Maple",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(3.04) { ConcentrationA3(objEnemy,"Snow",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(3.05) { ConcentrationA3(objEnemy,"Cherry",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(3.06) { ConcentrationA3(objEnemy,"Music",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(3.07) { ConcentrationA3(objEnemy,"Flower",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(3.08) { ConcentrationA3(objEnemy,"Heart",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(3.09) { ConcentrationA3(objEnemy,"Cloud",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(3.10) { ConcentrationA3(objEnemy,"Earth",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(3.11) { ConcentrationA3(objEnemy,"Lightning",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(3.12) { ConcentrationA3(objEnemy,"Moon",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(3.13) { ConcentrationA3(objEnemy,"Nuclear",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(3.14) { ConcentrationA3(objEnemy,"Atom",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(3.15) { ConcentrationA3(objEnemy,"Leaf",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(3.16) { ConcentrationA3(objEnemy,"Metal",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(3.17) { ConcentrationA3(objEnemy,"Fire",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(3.18) { ConcentrationA3(objEnemy,"Water",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(3.19) { ConcentrationA3(objEnemy,"Sun",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(3.20) { ConcentrationA3(objEnemy,"Feather",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(3.21) { ConcentrationA3(objEnemy,"Glass",eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }

		case(4.01) { ConcentrationA4(objEnemy,"Star",eventParam[2][0],eventParam[3][0],eventParam[4]); }
		case(4.02) { ConcentrationA4(objEnemy,"Magic",eventParam[2][0],eventParam[3][0],eventParam[4]); }
		case(4.03) { ConcentrationA4(objEnemy,"Maple",eventParam[2][0],eventParam[3][0],eventParam[4]); }
		case(4.04) { ConcentrationA4(objEnemy,"Snow",eventParam[2][0],eventParam[3][0],eventParam[4]); }
		case(4.05) { ConcentrationA4(objEnemy,"Cherry",eventParam[2][0],eventParam[3][0],eventParam[4]); }
		case(4.06) { ConcentrationA4(objEnemy,"Music",eventParam[2][0],eventParam[3][0],eventParam[4]); }
		case(4.07) { ConcentrationA4(objEnemy,"Flower",eventParam[2][0],eventParam[3][0],eventParam[4]); }
		case(4.08) { ConcentrationA4(objEnemy,"Heart",eventParam[2][0],eventParam[3][0],eventParam[4]); }
		case(4.09) { ConcentrationA4(objEnemy,"Cloud",eventParam[2][0],eventParam[3][0],eventParam[4]); }
		case(4.10) { ConcentrationA4(objEnemy,"Earth",eventParam[2][0],eventParam[3][0],eventParam[4]); }
		case(4.11) { ConcentrationA4(objEnemy,"Lightning",eventParam[2][0],eventParam[3][0],eventParam[4]); }
		case(4.12) { ConcentrationA4(objEnemy,"Moon",eventParam[2][0],eventParam[3][0],eventParam[4]); }
		case(4.13) { ConcentrationA4(objEnemy,"Nuclear",eventParam[2][0],eventParam[3][0],eventParam[4]); }
		case(4.14) { ConcentrationA4(objEnemy,"Atom",eventParam[2][0],eventParam[3][0],eventParam[4]); }
		case(4.15) { ConcentrationA4(objEnemy,"Leaf",eventParam[2][0],eventParam[3][0],eventParam[4]); }
		case(4.16) { ConcentrationA4(objEnemy,"Metal",eventParam[2][0],eventParam[3][0],eventParam[4]); }
		case(4.17) { ConcentrationA4(objEnemy,"Fire",eventParam[2][0],eventParam[3][0],eventParam[4]); }
		case(4.18) { ConcentrationA4(objEnemy,"Water",eventParam[2][0],eventParam[3][0],eventParam[4]); }
		case(4.19) { ConcentrationA4(objEnemy,"Sun",eventParam[2][0],eventParam[3][0],eventParam[4]); }
		case(4.20) { ConcentrationA4(objEnemy,"Feather",eventParam[2][0],eventParam[3][0],eventParam[4]); }
		case(4.21) { ConcentrationA4(objEnemy,"Glass",eventParam[2][0],eventParam[3][0],eventParam[4]); }

		case(5.01) { ConcentrationRainbowA1(objEnemy,"Star",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(5.02) { ConcentrationRainbowA1(objEnemy,"Magic",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(5.03) { ConcentrationRainbowA1(objEnemy,"Maple",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(5.04) { ConcentrationRainbowA1(objEnemy,"Snow",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(5.05) { ConcentrationRainbowA1(objEnemy,"Cherry",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(5.06) { ConcentrationRainbowA1(objEnemy,"Music",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(5.07) { ConcentrationRainbowA1(objEnemy,"Flower",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(5.08) { ConcentrationRainbowA1(objEnemy,"Heart",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(5.09) { ConcentrationRainbowA1(objEnemy,"Cloud",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(5.10) { ConcentrationRainbowA1(objEnemy,"Earth",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(5.11) { ConcentrationRainbowA1(objEnemy,"Lightning",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(5.12) { ConcentrationRainbowA1(objEnemy,"Moon",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(5.13) { ConcentrationRainbowA1(objEnemy,"Nuclear",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(5.14) { ConcentrationRainbowA1(objEnemy,"Atom",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(5.15) { ConcentrationRainbowA1(objEnemy,"Leaf",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(5.16) { ConcentrationRainbowA1(objEnemy,"Metal",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(5.17) { ConcentrationRainbowA1(objEnemy,"Fire",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(5.18) { ConcentrationRainbowA1(objEnemy,"Water",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(5.19) { ConcentrationRainbowA1(objEnemy,"Sun",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(5.20) { ConcentrationRainbowA1(objEnemy,"Feather",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(5.21) { ConcentrationRainbowA1(objEnemy,"Glass",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }

		case(6.01) { ConcentrationRainbowA2(objEnemy,"Star",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(6.02) { ConcentrationRainbowA2(objEnemy,"Magic",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(6.03) { ConcentrationRainbowA2(objEnemy,"Maple",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(6.04) { ConcentrationRainbowA2(objEnemy,"Snow",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(6.05) { ConcentrationRainbowA2(objEnemy,"Cherry",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(6.06) { ConcentrationRainbowA2(objEnemy,"Music",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(6.07) { ConcentrationRainbowA2(objEnemy,"Flower",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(6.08) { ConcentrationRainbowA2(objEnemy,"Heart",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(6.09) { ConcentrationRainbowA2(objEnemy,"Cloud",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(6.10) { ConcentrationRainbowA2(objEnemy,"Earth",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(6.11) { ConcentrationRainbowA2(objEnemy,"Lightning",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(6.12) { ConcentrationRainbowA2(objEnemy,"Moon",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(6.13) { ConcentrationRainbowA2(objEnemy,"Nuclear",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(6.14) { ConcentrationRainbowA2(objEnemy,"Atom",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(6.15) { ConcentrationRainbowA2(objEnemy,"Leaf",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(6.16) { ConcentrationRainbowA2(objEnemy,"Metal",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(6.17) { ConcentrationRainbowA2(objEnemy,"Fire",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(6.18) { ConcentrationRainbowA2(objEnemy,"Water",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(6.19) { ConcentrationRainbowA2(objEnemy,"Sun",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(6.20) { ConcentrationRainbowA2(objEnemy,"Feather",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }
		case(6.21) { ConcentrationRainbowA2(objEnemy,"Glass",eventParam[2][0],eventParam[3][0],eventParam[4][0]); }

		case(7) { ConcentrationB1(objEnemy,eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5][0],eventParam[6][0],eventParam[7][0],eventParam[8]); }
		case(8) { ConcentrationB2(objEnemy,eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5][0],eventParam[6][0],eventParam[7][0],eventParam[8],eventParam[9]); }

		case(9) { ConcentrationC1(objEnemy,eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }

		case(10) { ConcentrationBinaryA1(objEnemy,eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
		case(11) { ConcentrationBinaryA2(objEnemy,eventParam[2][0],eventParam[3][0],eventParam[4][0],eventParam[5]); }
	}
	case(EV_BOSS_EFFECT) {
		let eventParam = GetEventArgument(0);
		BossEffects(eventParam[0],eventParam[1],eventParam[2],eventParam[3],eventParam[4]);
	}
	case(EV_DELAY) {
		let eventParam = GetEventArgument(0);
		//HSVDelay(eventParam[0],eventParam[1]);
		DelayEx(eventParam[0],eventParam[1]);
	}
	case(EV_START_BOSS_SPELL){
		let CircleColor = [];
		BossID = GetEnemyBossObjectID[0];
		SpellID = Obj_GetValueD(BossID,"Spell ID",000);
		let SpellCardName = "";
		alternative(GetAreaCommonData("Options","Language",0))
		case(0) {
			SpellCardName = SpellInfo[SpellID][0];
		}
		case(1) {
			SpellCardName = SpellInfo_JP[SpellID][0];
		}
		others {
			SpellCardName = SpellInfo[SpellID][0];
		}
		let CutImg = Obj_GetValueD(BossID,"Cut Image",[""]);
		let CutType = Obj_GetValueD(BossID,"Cut Type","TABLE");
		CircleColor = ConvertColorRGB(Obj_GetValueD(BossID,"Circle Color","Red"));
		if(!IsReplay) {
			NotifyEventAll(EV_HISTORY,[SpellID,1]);
			if(GetCommonData("Stage","")!="Stage 7") { NotifyEventAll(EV_UNLOCK,100+ceil(SpellID/4)); }
			else { NotifyEventAll(EV_UNLOCK,100+35+ceil((SpellID-140)/2)); }
		}
		cutin(SpellID,CutType,SpellCardName,CutImg);
		SpellStarburst(BossID,CircleColor);
		ManageDiscordBonus;
		ManageSpellBonus;
		MagicCircle;
		Nullity;
		typeEnd = 0;
	}
	case(EV_GAIN_SPELL){
		let objScene = GetEnemyBossSceneObjectID;
		let score = 0;
		if(!IsReplay) {
			NotifyEventAll(EV_HISTORY,[SpellID,0]);
		}
		if(((SpellID>136 && SpellID<141) || (SpellID == 163) || (SpellID == 164)) && GetAreaCommonData("PlayState","Mode","")!="Spell Practice" && delayFurther){ //delays spell capture appearance for explosion
			DelayedSpellCapture(objScene, score, 150);
		}
		else if((SpellID == 173) || (SpellID == 174) && GetAreaCommonData("PlayState","Mode","")!="Spell Practice" && delayFurther){ //delays spell capture appearance for explosion
			DelayedSpellCapture(objScene, score, 145);
		}
		else if(isInIdsArray(SpellID) && GetAreaCommonData("PlayState","Mode","")!="Spell Practice" && delayFurther){
			DelayedSpellCapture(objScene, score, 90);
		}
		else{
			PlaySoundEffect("cardget",100);
			score = Obj_GetValueD(objScene,"Spell Bonus",0);
			GotSpellCard(round(score/10)*10);
			AddScore(round(score/10)*10);

			score = Obj_GetValueD(objScene,"Discord Bonus",0);
			if(score>0) {
				GotDiscordBonus(round(score/10)*10);
				AddScore(round(score/10)*10);
			}
		}
		typeEnd = END_SUCCESS;
	}
	case(EV_END_BOSS_STEP) {
		if(typeEnd == 0) {
			typeEnd = END_FAILED;
			BonusFailed;
		}
	}
	case(EV_EXTEND) {
		Extend;
	}
	case(EV_GET_SPELL) {
		GetSpell;
	}
	case(EV_MAX_BALANCE) {
		CollectItems(10);
		MaxBalance;
	}
	case(EV_FULL_POWER) {
		FullPowerUp;
	}
	case(EV_STAGE_CLEAR) {
		let eventParam = GetEventArgument(0);
		StageClear(eventParam);
	}
	case(EV_ENCORE_CHANCE) {
		EncoreChance;
	}
}

task DelayedSpellCapture(objScene, score, time){
	//WriteLog("Special-case wait started.");
	let score1 = Obj_GetValueD(objScene,"Spell Bonus",0);
	let score2 = Obj_GetValueD(objScene,"Discord Bonus",0);
	wait(time);
	PlaySoundEffect("cardget",100);
	GotSpellCard(round(score1/10)*10);
	AddScore(round(score1/10)*10);
	if(score2>0) {
		GotDiscordBonus(round(score2/10)*10);
		AddScore(round(score2/10)*10);
	}
	//WriteLog("Special-case wait ended.");
}

task LaserBase(objLaser,width) {
	yield;
	if(!Obj_GetValueD(objLaser,"Laser Base",true) || Obj_IsDeleted(objLaser)) { return; }
	let graphic = ObjShot_GetImageID(objLaser);
	let delayColor = GetShotDataInfoA1(graphic,TARGET_ENEMY,INFO_DELAY_COLOR);
	let colorID = 0;
	if(delayColor == [255, 64, 64]) { colorID = 1; }
	if(delayColor == [255, 128, 64]) { colorID = 2; }
	if(delayColor == [255, 255, 64]) { colorID = 3; }
	if(delayColor == [64, 255, 64]) { colorID = 4; }
	if(delayColor == [64, 255, 255]) { colorID = 5; }
	if(delayColor == [64, 64, 255]) { colorID = 6; }
	if(delayColor == [255, 64, 255]) { colorID = 7; }

	let objBase = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjRender_SetBlendType(objBase, BLEND_ADD_ARGB);
	Obj_SetRenderPriorityI(objBase, 51);
	ObjPrim_SetTexture(objBase, MD ~ "Shot/LaserBase.png");
	ObjSprite2D_SetSourceRect(objBase,0+colorID*128,0,128+colorID*128,128);
	ObjSprite2D_SetDestCenter(objBase);

	let objBase_Flash = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjRender_SetBlendType(objBase_Flash, BLEND_ADD_ARGB);
	Obj_SetRenderPriorityI(objBase_Flash, 51);
	ObjPrim_SetTexture(objBase_Flash, MD ~ "Shot/LaserBase.png");
	ObjSprite2D_SetSourceRect(objBase_Flash, 0, 0, 128, 128);
	ObjSprite2D_SetDestCenter(objBase_Flash);

	let count = 0;
	let spin = randEff(0,360);
	let visible = 1;
	let scaleBase = 0.32;
	let scaleFactor = width/16;
	let scale2 = Obj_GetValueD(objLaser,"Laser Base Scale",1);
	let scale = scaleBase*scaleFactor*scale2;
	let alphaFactor = 1;
	let del = Obj_GetValueD(objLaser,"__Delete Frame__",10000);

	while(!Obj_IsDeleted(objLaser)) {
		if(count%3==0) { visible = visible*-1; }
		spin+=15;
		count++;
		if(count>=del || Obj_GetValueD(objLaser,"Laser Base Fade",false)) { alphaFactor-=1/25; }
		if(alphaFactor<=0) { break; }

		ObjRender_SetColor(objBase,255*alphaFactor,255*alphaFactor,255*alphaFactor);
		ObjRender_SetColor(objBase_Flash,80*alphaFactor,80*alphaFactor,80*alphaFactor);
		ObjRender_SetScaleXYZ(objBase,scale,scale,scale);
		ObjRender_SetScaleXYZ(objBase_Flash,scale,scale,scale);
		ObjRender_SetPosition(objBase,ObjMove_GetX(objLaser),ObjMove_GetY(objLaser),0);
		ObjRender_SetPosition(objBase_Flash,ObjMove_GetX(objLaser),ObjMove_GetY(objLaser),0);
		ObjRender_SetAngleZ(objBase,spin-45);
		ObjRender_SetAngleZ(objBase_Flash,spin);
		if(visible==1) { Obj_SetVisible(objBase_Flash,true); }
		else { Obj_SetVisible(objBase_Flash,false); }
		yield;
	}
	Obj_Delete(objBase);
	Obj_Delete(objBase_Flash);
}

task CollectItems(x) {
	loop(x) {
		CollectAllItems;
		yield;
	}
}

task FlashBomb(x,y) {
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);

	ObjPrim_SetTexture(obj, MD ~ "System/IMG/Effect/ConcentrationCircle3.png");
	ObjSprite2D_SetSourceRect(obj,0,0,256,256);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetBlendType(obj, BLEND_ADD_RGB);
	Obj_SetRenderPriorityI(obj, 50);
	//ObjRender_SetAlpha(obj, 200);

	let alpha = 1.5;
	let scale = 0;
	let dscale = 0.25;
	loop(20){
		scale += dscale;
		if(dscale>0){ dscale = dscale^1.07; }
		if(alpha>0) { alpha -= 1.5/20; }
		else { alpha = 0; }
		if(GetPlayerID == "Ex_Rin") { ObjRender_SetColor(obj, 255*alpha, min(30*alpha,30), min(30*alpha,30)); }
		if(GetPlayerID == "Ex_Kasen") { ObjRender_SetColor(obj, min(30*alpha,30), 255*alpha, min(30*alpha,30)); }
		if(GetPlayerID == "Ex_Tokiko") { ObjRender_SetColor(obj, min(30*alpha,30), min(30*alpha,30), min(30*alpha,30)); }
		ObjRender_SetAlpha(obj, alpha);
		ObjRender_SetPosition(obj, x, y, 0);
		ObjRender_SetScaleXYZ(obj, scale, scale, 1);
		//DeleteShotInCircle(TYPE_ALL,TYPE_ITEM,x,y,scale*128);
		//NotifyEventAll(EV_USER + 18,[3,x,y,400]);
		let shots = GetShotIdInCircleA2(x,y,scale*128,TARGET_ENEMY);
		let enemies = GetAllEnemyID;
		ascent(i in 0..length(enemies)) {
			if(Obj_GetValueD(enemies[i],"Flash Enable",true) && length(GetEnemyBossObjectID)==0 && GetDistance(x,y,ObjMove_GetX(enemies[i]),ObjMove_GetY(enemies[i]))<scale*128) {
				Indicator(enemies[i]);
				Obj_SetValue(enemies[i],"Flash Enable",false);
				Obj_SetValue(enemies[i],"PIV Enable",true);
			}
		}
		ascent(i in 0..length(shots)) {
			if(!ObjShot_IsSpellResist(shots[i])) {
				NotifyEventAll(EV_USER + 15,[ObjMove_GetX(shots[i]),ObjMove_GetY(shots[i]),ObjShot_GetImageID(shots[i]),shots[i]]);
				Obj_Delete(shots[i]);
			}
		}
		yield;
	}
	Obj_Delete(obj);

	task Indicator(objEnemy) {
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);

		ObjPrim_SetTexture(obj, MD ~ "IMG/Enemy/Indicator.png");
		ObjRender_SetBlendType(obj, BLEND_ALPHA);
		ObjSprite2D_SetSourceRect(obj,0,0,256,256);
		ObjSprite2D_SetDestCenter(obj);
		Obj_SetRenderPriorityI(obj, 50);
		ObjRender_SetAlpha(obj, 180);

		let scale = 0.65;
		let angle = 0;
		let spin = 90;
		let spindir = CoinFlip;

		PlaySoundEffect("lockon",100);

		loop(20) {
			if(Obj_IsDeleted(objEnemy)) { break; }
			spin+=90/20*spindir;
			scale-=0.40/20;
			ObjRender_SetPosition(obj,ObjMove_GetX(objEnemy),ObjMove_GetY(objEnemy),0);
			ObjRender_SetScaleXYZ(obj,scale,scale,scale);
			ObjRender_SetAngleZ(obj,spin);
			yield;
		}
		while(!Obj_IsDeleted(objEnemy)) {
			spin+=1*spindir;
			ObjRender_SetPosition(obj,ObjMove_GetX(objEnemy),ObjMove_GetY(objEnemy),0);
			ObjRender_SetAngleZ(obj,spin);
			yield;
		}
		Obj_Delete(obj);
	}
}

task DiscordReady {
	PlaySoundEffect("bonus5",100);

	let obj1 = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjRender_SetBlendType(obj1, BLEND_ALPHA);
	Obj_SetRenderPriorityI(obj1,41);
	ObjPrim_SetTexture(obj1, MD ~ "System/IMG/DiscordReady_Ring.png");
	ObjSprite2D_SetSourceRect(obj1,0,0,256,256);
	ObjSprite2D_SetDestCenter(obj1);

	let obj2 = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjRender_SetBlendType(obj2, BLEND_ALPHA);
	Obj_SetRenderPriorityI(obj2,41);
	ObjPrim_SetTexture(obj2, MD ~ "System/IMG/DiscordReady_Text.png");
	ObjSprite2D_SetSourceRect(obj2,0,0,256,256);
	ObjSprite2D_SetDestCenter(obj2);

	let obj3 = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjRender_SetBlendType(obj3, BLEND_ALPHA);
	Obj_SetRenderPriorityI(obj3,41);
	ObjPrim_SetTexture(obj3, MD ~ "System/IMG/DiscordReady_Icon.png");
	ObjSprite2D_SetSourceRect(obj3,0,0,256,256);
	ObjSprite2D_SetDestCenter(obj3);

	Anim1;
	Anim2;
	Anim3;

	let spin = 0;
	let dspin = 1;

	loop(120) {
		if(GetCommonData("Discord",false) || GetCommonData("Simple Discord",false)) { break; }
		ObjRender_SetPosition(obj1, GetPlayerX, GetPlayerY, 0);
		ObjRender_SetPosition(obj2, GetPlayerX, GetPlayerY, 0);
		ObjRender_SetPosition(obj3, GetPlayerX, GetPlayerY, 0);
		ObjRender_SetAngleZ(obj1,spin);
		ObjRender_SetAngleZ(obj2,spin);
		spin+=dspin;
		yield;
	}
	Anim1_Reverse;
	Anim2_Reverse;
	while(GetCommonData("Balance",0)>=4000 && !GetCommonData("Discord",false) && !GetCommonData("Simple Discord",false)) { yield; }
	isDiscordReady = false;

	task Anim1 {
		let frames = 20;
		let alpha = 0;
		let maxalpha = 120;
		let maxscale = 1.6;
		let minscale = 0.9;
		let scale = maxscale;
		ascent(i in 0..frames) {
			//if(alpha<maxalpha) { alpha+=maxalpha/frames; } else { alpha = maxalpha; }
			alpha = maxalpha*sin(90*i/frames);
			scale = maxscale - (maxscale-minscale)*sin(90*i/frames);
			ObjRender_SetScaleXYZ(obj1, scale, scale, scale);
			ObjRender_SetAlpha(obj1, alpha);
			yield;
		}
	}
	task Anim2 {
		let frames = 20;
		let alpha = 0;
		let maxalpha = 120;
		let maxscale = 0.9;
		let scale = 0;
		ascent(i in 0..frames) {
			//if(alpha<maxalpha) { alpha+=maxalpha/frames; } else { alpha = maxalpha; }
			alpha = maxalpha*sin(90*i/frames);
			scale = maxscale*sin(90*i/frames);
			ObjRender_SetScaleXYZ(obj2, scale, scale, scale);
			ObjRender_SetAlpha(obj2, alpha);
			yield;
		}
	}
	task Anim3 {
		let alpha = 0;
		let maxalpha = 70;
		let frames = 20;
		loop(120) {
			if(GetCommonData("Discord",false) || GetCommonData("Simple Discord",false)) { break; }
			if(alpha<maxalpha) { alpha+=maxalpha/frames; }
			ObjRender_SetAlpha(obj3, alpha);
			yield;
		}
		frames = 15;
		loop(frames) {
			alpha-=maxalpha/frames;
			ObjRender_SetAlpha(obj3, alpha);
			yield;
		}
		Obj_Delete(obj3);
	}
	task Anim1_Reverse {
		let frames = 15;
		let alpha = 180;
		let maxalpha = 180;
		let maxscale = 1.6;
		let minscale = 0.9;
		let scale = maxscale;
		descent(i in 0..frames) {
			//if(alpha>0) { alpha-=maxalpha/frames; } else { alpha = 0; }
			alpha = maxalpha*sin(90*i/frames);
			scale = maxscale - (maxscale-minscale)*sin(90*i/frames);
			ObjRender_SetScaleXYZ(obj1, scale, scale, scale);
			ObjRender_SetAlpha(obj1, alpha);
			yield;
		}
		Obj_Delete(obj1);
	}
	task Anim2_Reverse {
		let frames = 15;
		let alpha = 180;
		let maxalpha = 180;
		let maxscale = 0.9;
		let scale = 0;
		descent(i in 0..frames) {
			//if(alpha>0) { alpha-=maxalpha/frames; } else { alpha = 0; }
			alpha = maxalpha*sin(90*i/frames);
			scale = maxscale*sin(90*i/frames);
			ObjRender_SetScaleXYZ(obj2, scale, scale, scale);
			ObjRender_SetAlpha(obj2, alpha);
			yield;
		}
		Obj_Delete(obj2);
	}
}

task SpellBurst_Discord(radius) {
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);

	ObjPrim_SetTexture(obj, MD ~ "System/IMG/Effect/ConcentrationCircle3.png");
	ObjSprite2D_SetSourceRect(obj,0,0,256,256);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetBlendType(obj, BLEND_ADD_RGB);
	Obj_SetRenderPriorityI(obj, 50);
	ObjRender_SetAlpha(obj, 200);

	let alpha = 1;
	let scale = 0;
	let dscale = 0.17*(radius/230);
	loop(45){
		scale += dscale;
		if(dscale>0){ dscale = dscale^1.04; }
		if(alpha>0) { alpha -= 1/30; }
		else { alpha = 0; }
		ObjRender_SetColor(obj, 128*alpha, 30*alpha, 255*alpha);
		ObjRender_SetAlpha(obj, alpha);
		ObjRender_SetPosition(obj, GetPlayerX, GetPlayerY, 0);
		ObjRender_SetScaleXYZ(obj, scale, scale, 1);
		yield;
	}
	Obj_Delete(obj);
}

task DiscordEffect_Simple {
	let obj1 = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjRender_SetBlendType(obj1, BLEND_ALPHA);
	Obj_SetRenderPriorityI(obj1,41);
	ObjPrim_SetTexture(obj1, MD ~ "System/IMG/DiscordReady_Ring.png");
	ObjSprite2D_SetSourceRect(obj1,0,0,256,256);
	ObjSprite2D_SetDestCenter(obj1);

	let obj2 = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjRender_SetBlendType(obj2, BLEND_ALPHA);
	Obj_SetRenderPriorityI(obj2,41);
	ObjPrim_SetTexture(obj2, MD ~ "System/IMG/DiscordSimple_Text.png");
	ObjSprite2D_SetSourceRect(obj2,0,0,256,256);
	ObjSprite2D_SetDestCenter(obj2);

	let obj3 = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjRender_SetBlendType(obj3, BLEND_ALPHA);
	Obj_SetRenderPriorityI(obj3,41);
	ObjPrim_SetTexture(obj3, MD ~ "System/IMG/DiscordReady_Icon.png");
	ObjSprite2D_SetSourceRect(obj3,0,0,256,256);
	ObjSprite2D_SetDestCenter(obj3);

	Anim1;
	Anim2;
	Anim3;

	let spin = 0;
	let dspin = 2.5;

	while(GetCommonData("Simple Discord",false)) {
		ObjRender_SetPosition(obj1, GetPlayerX, GetPlayerY, 0);
		ObjRender_SetPosition(obj2, GetPlayerX, GetPlayerY, 0);
		ObjRender_SetPosition(obj3, GetPlayerX, GetPlayerY, 0);
		ObjRender_SetAngleZ(obj1,spin);
		ObjRender_SetAngleZ(obj2,spin);
		spin+=dspin;
		yield;
	}
	Anim1_Reverse;
	Anim2_Reverse;
	while(GetCommonData("Balance",0)>=4000 && !GetCommonData("Discord",false) && !GetCommonData("Simple Discord",false)) { yield; }
	isDiscordReady = false;

	task Anim1 {
		let frames = 20;
		let alpha = 0;
		let maxalpha = 120;
		let maxscale = 1.6;
		let minscale = 0.9;
		let scale = maxscale;
		ascent(i in 0..frames) {
			//if(alpha<maxalpha) { alpha+=maxalpha/frames; } else { alpha = maxalpha; }
			alpha = maxalpha*sin(90*i/frames);
			scale = maxscale - (maxscale-minscale)*sin(90*i/frames);
			ObjRender_SetScaleXYZ(obj1, scale, scale, scale);
			ObjRender_SetAlpha(obj1, alpha);
			yield;
		}
		wait(20);
		maxscale = minscale;
		minscale = 0.5;
		frames = frames*3;
		ascent(i in 0..frames) {
			scale = maxscale - (maxscale-minscale)*sin(90*i/frames);
			ObjRender_SetScaleXYZ(obj1, scale, scale, scale);
			yield;
		}
	}
	task Anim2 {
		let frames = 20;
		let alpha = 0;
		let maxalpha = 120;
		let maxscale = 0.85;
		let minscale = 0;
		let scale = 0;
		ascent(i in 0..frames) {
			//if(alpha<maxalpha) { alpha+=maxalpha/frames; } else { alpha = maxalpha; }
			alpha = maxalpha*sin(90*i/frames);
			scale = maxscale*sin(90*i/frames);
			ObjRender_SetScaleXYZ(obj2, scale, scale, scale);
			ObjRender_SetAlpha(obj2, alpha);
			yield;
		}
		wait(20);
		maxscale = 0.85;
		minscale = 0.48;
		frames = frames*3;
		ascent(i in 0..frames) {
			scale = maxscale - (maxscale-minscale)*sin(90*i/frames);
			ObjRender_SetScaleXYZ(obj2, scale, scale, scale);
			yield;
		}
	}
	task Anim3 {
		let alpha = 0;
		let maxalpha = 70;
		let frames = 20;
		//while(GetCommonData("Balance",0)>=4000 && !GetCommonData("Discord",false)) {
		loop(frames) {
			if(alpha<maxalpha) { alpha+=maxalpha/frames; }
			ObjRender_SetAlpha(obj3, alpha);
			yield;
		}
		wait(20);
		let maxscale = 1;
		let minscale = 0.48;
		let scale = 0;
		frames = frames*3;
		ascent(i in 0..frames) {
			scale = maxscale - (maxscale-minscale)*sin(90*i/frames);
			ObjRender_SetScaleXYZ(obj3, scale, scale, scale);
			yield;
		}
		while(GetCommonData("Simple Discord",false)) { yield; }
		frames = 25;
		loop(frames) {
			alpha-=maxalpha/frames;
			ObjRender_SetAlpha(obj3, alpha);
			yield;
		}
		Obj_Delete(obj3);
	}
	task Anim1_Reverse {
		let frames = 25;
		let alpha = 180;
		let maxalpha = 180;
		let maxscale = 0.8;
		let minscale = 0.5;
		let scale = maxscale;
		descent(i in 0..frames) {
			//if(alpha>0) { alpha-=maxalpha/frames; } else { alpha = 0; }
			alpha = maxalpha*sin(90*i/frames);
			scale = maxscale - (maxscale-minscale)*sin(90*i/frames);
			ObjRender_SetScaleXYZ(obj1, scale, scale, scale);
			ObjRender_SetAlpha(obj1, alpha);
			yield;
		}
		Obj_Delete(obj1);
	}
	task Anim2_Reverse {
		let frames = 25;
		let alpha = 180;
		let maxalpha = 180;
		let maxscale = 0.45;
		let scale = 0;
		descent(i in 0..frames) {
			//if(alpha>0) { alpha-=maxalpha/frames; } else { alpha = 0; }
			alpha = maxalpha*sin(90*i/frames);
			scale = maxscale*sin(90*i/frames);
			ObjRender_SetScaleXYZ(obj2, scale, scale, scale);
			ObjRender_SetAlpha(obj2, alpha);
			yield;
		}
		Obj_Delete(obj2);
	}
}

task DiscordEffect(simple,debug) {
	if(debug) { SetCommonData("Balance",10000); }
	SetPlayerInvincibilityFrame(60);
	let radius = 50+180*(GetCommonData("Balance",0)/10000);
	SpellBurst_Discord(radius);
	DeleteShotInCircle(TYPE_SHOT,TYPE_ITEM,GetPlayerX,GetPlayerY,radius); //122-230
	if(!simple) {
		SetCommonData("Discord",true);
		SetShotDelayRenderBlendType(BLEND_ALPHA);
		white(78);
		white(36);
		ManageShotRendering;
		// wait(2);
		// Vortex;
	}
	else {
		SetCommonData("Simple Discord",true);
		DiscordEffect_Simple;
	}
	ManageDiscordResources;

	task white(layer) {
		let objEffect = ObjPrim_Create(OBJ_SPRITE_2D);

		ObjRender_SetBlendType(objEffect,BLEND_INV_DESTRGB);
		Obj_SetRenderPriorityI(objEffect,layer);
		ObjPrim_SetTexture(objEffect, MD ~ "IMG/Background/white.png");
		ObjSprite2D_SetSourceRect(objEffect,0,0,1024,1024);
		ObjSprite2D_SetDestCenter(objEffect);
		ObjRender_SetPosition(objEffect,GetPlayerX,GetPlayerY,0);

		let scale = 2;

		while(GetCommonData("Discord",false)) {
			ObjRender_SetScaleXYZ(objEffect,scale,scale,scale);
			yield;
		}
		loop(40) {
			//ObjRender_SetPosition(objEffect,GetPlayerX,GetPlayerY,0);
			ObjRender_SetScaleXYZ(objEffect,scale,scale,scale);
			scale-=2/40;
			yield;
		}
		Obj_Delete(objEffect);
	}
	task Vortex {
		let objEffect = ObjPrim_Create(OBJ_SPRITE_2D);

		ObjRender_SetBlendType(objEffect,BLEND_ALPHA);
		Obj_SetRenderPriorityI(objEffect,29);
		ObjPrim_SetTexture(objEffect, MD ~ "IMG/Background/white.png");
		ObjSprite2D_SetSourceRect(objEffect,0,0,1024,1024);
		ObjSprite2D_SetDestCenter(objEffect);
		ObjRender_SetPosition(objEffect,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		ObjRender_SetColor(objEffect,0,0,0);

		let scale = 2;

		let objVortex = ObjPrim_Create(OBJ_SPRITE_2D);

		ObjRender_SetBlendType(objVortex, BLEND_ALPHA);
		Obj_SetRenderPriorityI(objVortex,29);
		ObjPrim_SetTexture(objVortex, MD ~ "IMG/Background/vortex.png");
		ObjSprite2D_SetSourceRect(objVortex, 0, 0, 1024, 1024);
		ObjSprite2D_SetDestCenter(objVortex);
		ObjRender_SetColor(objVortex,20,20,255);
		ObjRender_SetScaleXYZ(objVortex,0.65,0.65,0.65);
		ObjRender_SetPosition(objVortex,GetStgFrameWidth/2,GetStgFrameHeight/2,0);

		let spin = 0;
		let alpha = 255;

		while(GetCommonData("Discord",false)) {
			ObjRender_SetAngleZ(objVortex,spin);
			ObjRender_SetScaleXYZ(objEffect,scale,scale,scale);
			spin+=1;
			yield;
		}
		loop(40) {
			ObjRender_SetPosition(objEffect,GetPlayerX,GetPlayerY,0);
			ObjRender_SetScaleXYZ(objEffect,scale,scale,scale);
			ObjRender_SetAngleZ(objVortex,spin);
			ObjRender_SetAlpha(objVortex,alpha);
			alpha-=255/30;
			scale-=2/40;
			spin+=1;
			yield;
		}
		Obj_Delete(objEffect);
		Obj_Delete(objVortex);
	}

	let Balance = GetCommonData("Balance",0);
	let shots = [];
	let count = 0;
	if(!debug) { Balance-=1000; }
	SetCommonData("Balance",round(Balance));
	while(GetCommonData("Balance",0)>0) {
		if(GetPlayerState==STATE_HIT || GetPlayerState==STATE_DOWN) { break; }
		Balance = GetCommonData("Balance",0);
		if(!debug && !ObjEnemyBossScene_GetInfo(GetEnemyBossSceneObjectID,INFO_IS_LAST_SPELL)) { Balance-=200/60; } // 2.0%/sec
		count++;
		SetCommonData("Balance",round(Balance));
		if(ObjEnemyBossScene_GetInfo(GetEnemyBossSceneObjectID,INFO_IS_LAST_SPELL)) { Obj_SetValue(GetEnemyBossSceneObjectID,"Discord Last Spell",true); }
		if(GetCommonData("END",false)) { break; }
		//if(ObjEnemyBossScene_GetInfo(GetEnemyBossSceneObjectID,INFO_IS_LAST_SPELL)) { break; }
		if(GetVirtualKeyState(VK_USER1)==KEY_PUSH && count>=180 && !ObjEnemyBossScene_GetInfo(GetEnemyBossSceneObjectID,INFO_IS_LAST_SPELL)) { break; }
		if(count<180) { SetForbidPlayerSpell(true); } else { SetForbidPlayerSpell(false); }
		if(IsPlayerSpellActive) { break; }
		if(GetCommonData("OnEvent",false)) { break; }
		yield;
	}
	SetForbidPlayerSpell(false);
	PlaySoundEffect("effect3",100);
	if(Balance<0) { Balance = 0; }
	SetCommonData("Balance",round(Balance));
	if(!simple) {
		SetCommonData("Discord",false);
		SetShotDelayRenderBlendType(BLEND_NONE);
		loop(45) {
			shots = GetShotIdInCircleA2(GetStgFrameWidth/2,GetStgFrameHeight/2,1000,TARGET_ENEMY);
			ascent(i in 0..length(shots)) {
				ObjRender_SetBlendType(shots[i],BLEND_ALPHA);
			}
			yield;
		}
		ascent(i in 0..length(shots)) {
			if(!Obj_IsDeleted(shots[i])) {
				let graphic = ObjShot_GetImageID(shots[i]);
				let blend = Obj_GetValueD(shots[i], "Blend", GetShotDataInfoA1(graphic,TARGET_ENEMY,INFO_BLEND)); //Retrieves the altered blend type or defaults to shotsheet value
				let type = Obj_GetType(shots[i]);
				ObjRender_SetBlendType(shots[i],blend);
				if(type == OBJ_LOOSE_LASER || type == OBJ_STRAIGHT_LASER || type == OBJ_CURVE_LASER) {
					ObjRender_SetBlendType(shots[i],BLEND_ADD_ARGB);
				}
			}
		}
	}
	else {
		SetCommonData("Simple Discord",false);
	}

	task ManageShotRendering {
		loop(45) {
			shots = GetShotIdInCircleA2(GetStgFrameWidth/2,GetStgFrameHeight/2,1000,TARGET_ENEMY);
			ascent(i in 0..length(shots)) {
				ObjRender_SetBlendType(shots[i],BLEND_ALPHA);
			}
			yield;
		}
	}
}
task DiscordBreak1 { //by gtbot
	let renderTexture = GetReservedRenderTargetName(0);
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetTexture(obj, renderTexture);
	ObjPrim_SetPrimitiveType(obj,PRIMITIVE_TRIANGLELIST);
	ObjRender_SetBlendType(obj,BLEND_ALPHA);

	// ObjRender_SetPosition(obj, GetStgFrameWidth/2, GetStgFrameHeight/2, 0);
	Obj_SetRenderPriorityI(obj, 82);
	SetInvalidRenderPriorityA1(20, 81);

	RenderToTextureA1(renderTexture, 20, 81, true);

	let num = 40;
	let o = 32;
	let width = GetStgFrameWidth+64;
	//let height = GetStgFrameHeight+64;
	let height = (12288)^(1/2);

	ObjPrim_SetVertexCount(obj,3*num);
	ClearInvalidRenderPriority;

	ascent(j in 0..5) {
			ascent(i in -1..3) {
					ManageFragmentA1(i, j, -0.5);

					ManageFragmentA1(i, j, 0.5);

			}
	}
	wait(240);
	Obj_Delete(obj);

	task ManageFragmentA1(i, j, cy){
		let x = 40+128*i+64;
		let y = 16+height*j+height+(height*cy);
		let vert = 0;
		let angle = 0;
		let rotangle = 0;
		let inang = 0;
		x+=64;
		y-=64;
		if(cy == -0.5){
			vert = 6+6*i+24*j;
			inang = 270;
			ascent(z in 0..3){
				let vangle = inang+360/3*z;
				SetVertexProp(obj,vert+z,x+76*cos(vangle),y+76*sin(vangle),0);
			}
		}else{
			x-=64;
			y-=36;
			vert = 9+6*i+24*j;
			inang = 90;
			ascent(z in 0..3){
				let vangle = inang+360/3*z;
				SetVertexProp(obj,vert+z,x+76*cos(vangle),y+76*sin(vangle),0);
			}
		}

		let dist = absolute(x-width/2)/(width/2);
		let mod = 1;
		if(x<width/2){mod = -1;}
		/*xinit, yinit,
		xmax, ymax,
		xvel, yvel,
		angleinc, rotinc
		*/
		let data = [
		dist*4*mod, -4+8*dist,
		randEff(1, 2)*mod, randEff(4.5, 5.5),
		randEff(0.07, 0.17)*mod, randEff(0.1, 0.2),
		randEff(-5, 5), randEff(-4, 4)
		];

		while(y<GetStgFrameHeight+128 && x>-128 && x<GetStgFrameWidth+256){
			x+=data[0];
			y+=data[1];
			angle+=data[6];
			rotangle+=data[7];
			if(mod == 1){
				data[0] = min(data[0] + data[4], data[2]);
			}else{data[0] = max(data[0] + data[4], data[2]);}
			data[1] = min(data[1] + data[5], data[3]);
			SetThreeVertexPositions(vert, x, y);


			yield;
		}
		function SetThreeVertexPositions(id, x, y){
			ascent(z in 0..3){
				let vangle = rotangle+inang+360/3*z;
				ObjPrim_SetVertexPosition(obj,id+z,
					x+(76*cos(angle))*cos(vangle),
					y+(76*sin(angle))*sin(vangle),0);
			}
		}
	}


	task SetVertexProp(obj, id, x, y,z){
		ObjPrim_SetVertexUVT(obj,id,x,y);
		ObjPrim_SetVertexPosition(obj,id,x,y,0);
	}
}
task DiscordBreak2 { //Unfinished and scrapped
	PlaySoundEffect("effect",100);
	let renderTexture = GetReservedRenderTargetName(0);
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetTexture(obj, renderTexture);
	ObjPrim_SetPrimitiveType(obj,PRIMITIVE_TRIANGLELIST);

	// ObjRender_SetPosition(obj, GetStgFrameWidth/2, GetStgFrameHeight/2, 0);
	Obj_SetRenderPriorityI(obj, 82);
	SetInvalidRenderPriorityA1(20, 81);

	RenderToTextureA1(renderTexture, 20, 81, true);

	let num = 40;
	let height = (12288)^(1/2);

	ObjPrim_SetVertexCount(obj,3*num);

	ascent(j in 0..5) {
		ascent(i in -1..3) {
			ObjPrim_SetVertexUVT(obj,6+6*i+24*j,40+128*i,16+height*j);
			ObjPrim_SetVertexUVT(obj,7+6*i+24*j,40+128*i+64,16+height*j+height);
			ObjPrim_SetVertexUVT(obj,8+6*i+24*j,40+128*i+64*2,16+height*j);
			ManageFragment01(6+6*i+24*j,128*i+64,height*j+height-0.5*height);

			ObjPrim_SetVertexUVT(obj,9+6*i+24*j,40+128*i+64,16+height*j+height);
			ObjPrim_SetVertexUVT(obj,10+6*i+24*j,40+128*i+64*2,16+height*j);
			ObjPrim_SetVertexUVT(obj,11+6*i+24*j,40+128*i+64*3,16+height*j+height);
			// ManageFragment01(9+6*i+24*j,40+128*i+64,16+height*j+height+0.5*height);
		}
	}

	ascent(j in 0..5) {
		ascent(i in -1..3) {
			ObjPrim_SetVertexPosition(obj,6+6*i+24*j,0+128*i,height*j,0);
			ObjPrim_SetVertexPosition(obj,7+6*i+24*j,0+128*i+64,height*j+height,0);
			ObjPrim_SetVertexPosition(obj,8+6*i+24*j,0+128*i+64*2,height*j,0);

			ObjPrim_SetVertexPosition(obj,9+6*i+24*j,0+128*i+64,height*j+height,0);
			ObjPrim_SetVertexPosition(obj,10+6*i+24*j,0+128*i+64*2,height*j,0);
			ObjPrim_SetVertexPosition(obj,11+6*i+24*j,0+128*i+64*3,height*j+height,0);
		}
	}
	task ManageFragment01(vertex,centerX,centerY) {
		let rotX = 0;
		let rotY = 0;
		let rotZ = 0;
		let angleX = 0;
		let angleY = 0;
		let angleZ = 0;
		let r = 0.5*height;

		Animate;

		task Animate {
			while(!Obj_IsDeleted(obj)) {
				ObjPrim_SetVertexPosition(obj,vertex,centerX+r*cos(210+angleZ),centerY+r*sin(210+angleZ),0);
				ObjPrim_SetVertexPosition(obj,vertex+1,centerX+r*cos(90+angleZ),centerY+r*sin(90+angleZ),0);
				ObjPrim_SetVertexPosition(obj,vertex+2,centerX+r*cos(-30+angleZ),centerY+r*sin(-30+angleZ),0);
				angleZ+=rotZ;
				yield;
			}
		}
	}
}

task DiscordBreak{ //by gtbot
	//return;
	let minpri = 20;
	let maxpri = 79;


	let renderTexture = "DiscordScreenShatter";
	let count = 0;
	let pathShader = CSD~"LIB/mask.hlsl";
	let pathMask = CSD~"IMG/glass.png";
	if(!CreateRenderTarget(renderTexture)){
	RaiseError("Not enough VRAM to proceed.\nTry restarting the game and lowering the graphics quality.");}

	// SetInvalidRenderPriorityA1(minpri, maxpri);
	Reset2DCamera;
	RenderToTextureA1(renderTexture, minpri, maxpri, true);
	// ClearInvalidRenderPriority;

	let objShader = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjShader_SetShaderF(objShader, pathShader);
	ObjShader_SetTechnique(objShader, "TecMask");

	ObjShader_SetTexture(objShader, "textureMask_", renderTexture);
	SetShaderI(objShader, maxpri, maxpri);

	let GlassRender = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjRender_SetBlendType(GlassRender, BLEND_ALPHA);
	Obj_SetRenderPriority(GlassRender, maxpri/100);
	ObjPrim_SetTexture(GlassRender, pathMask);
	ObjSpriteList2D_SetSourceRect(GlassRender, 0, 0, 64, 64);
	ObjSpriteList2D_SetDestRect(GlassRender, -32, -32, 32, 32);
	ObjRender_SetScaleXYZ(GlassRender, 1.5, 1.5, 1.5);

	DoStuff;

	let countx = 14;
	let county = 9;
	ascent(x in 0..countx){
		ascent(y in 0..county){
			CreateFragmentB1(GetStgFrameWidth/countx*x+randEff(-16, 16), GetStgFrameHeight/county*y+randEff(-16, 16));
		}
	}
	yield;
	while(count > 0){yield;}
	ObjShader_ResetShader(objShader);
	ResetShaderI(maxpri, maxpri);
	RemoveTexture(renderTexture);
	Obj_Delete(objShader);
	Obj_Delete(GlassRender);

	ClearInvalidRenderPriority;


	task CreateFragmentA1(x, y){
		count++;
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjRender_SetBlendType(obj, BLEND_ALPHA);
		ObjRender_SetAlpha(obj, 255);
		Obj_SetRenderPriority(obj, maxpri/100);
		ObjPrim_SetTexture(obj, pathMask);
		let ranxy = [round(randEff(0,3)), round(randEff(0,3))];
		ObjRender_SetScaleXYZ(obj, 1.5, 1.5, 1.5);
		ObjSprite2D_SetSourceRect(obj, ranxy[0]*64, ranxy[1]*64, (ranxy[0]+1)*64, (ranxy[1]+1)*64);
		ObjSprite2D_SetDestCenter(obj);

		let mid = GetStgFrameWidth/2;
		let data = [0, 0, 0,
		(((x-mid)/mid)*randEff(0, 5) + randEff(-1,1))*2,
		(2-absolute((x-mid)/mid)*3+randEff(-1, 2))*0.70];

		let datamov = [randEff(-8, 8), randEff(-8, 8), randEff(-8, 8), 0, 0.022];
		ObjRender_SetPosition(obj, x, y, 0);
		ObjRender_SetAngleXYZ(obj, data[0], data[1], data[2]);
		while(y<GetStgFrameHeight+64&&x<GetStgFrameWidth+64&&x>-64){
			ObjRender_SetPosition(obj, x, y, 0);
			ObjRender_SetAngleXYZ(obj, data[0], data[1], data[2]);


			data += datamov;
			datamov[4] = datamov[4]*1.06;
			x += data[3];
			y += data[4];

			yield;
		}
		Obj_Delete(obj);
		count--;
	}

	task CreateFragmentB1(x, y){
		count++;

		let srx = round(randEff(0, 3));
		let sry = round(randEff(0, 3));
		let ranxy = [round(randEff(0,3)), round(randEff(0,3))];

		let mid = GetStgFrameWidth/2;

		let crx = 0;
		let cry = 0;
		let crz = 0;

		let cxm = (((x-mid)/mid)*randEff(0, 5) + randEff(-1,1))*3.0;
		// let cym = (2-absolute((x-mid)/mid)*3+randEff(-1, 2))*0.70;
		let cym = (2-absolute((x-mid)/mid)*2+randEff(0, 2))*0.75;


		let crxm = randEff(-8, 8);
		let crym = randEff(-8, 8);
		let crzm = randEff(-8, 8);

		let cxmm = 0;
		let cymm = 0.025;

		while(y<GetStgFrameHeight+80&&x<GetStgFrameWidth+80&&x>-80&&y>-80){

			crx += crxm;
			cry += crym;
			crz += crzm;
			cxm += cxmm;
			cym += cymm;
			if(cym > 0){cym *= 1.08;}


			x += cxm;
			y -= cym;

			ObjSpriteList2D_SetSourceRect(GlassRender, srx*64, sry*64, (srx+1)*64, (sry+1)*64);
			ObjRender_SetPosition(GlassRender, x, y, 0);
			ObjRender_SetAngleXYZ(GlassRender, crx, cry, crz);
			ObjSpriteList2D_AddVertex(GlassRender);
			yield;
		}
		count--;
	}

	task DoStuff{
		while(!Obj_IsDeleted(GlassRender)){
			ObjSpriteList2D_ClearVertexCount(GlassRender);
			yield;
		}
	}
}

task HSVDelay(objShot,frames) { //No longer in use----shaders on every bullet fired proved too laggy
	let graphic = ObjShot_GetImageID(objShot);
	let RGB = GetShotDataInfoA1(graphic,TARGET_ENEMY,INFO_DELAY_COLOR);

	let objDelay = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objDelay,MD ~ "Shot/RCFShot.png");
	Obj_SetRenderPriorityI(objDelay,50);
	ObjRender_SetBlendType(objDelay,BLEND_ADD_ARGB);
	ObjRender_SetColor(objDelay,200,200,200);
	ObjSprite2D_SetSourceRect(objDelay,991,479,1023,511);
	ObjSprite2D_SetDestCenter(objDelay);

	let Hue = RGBToHSV(RGB[0],RGB[1],RGB[2])[0];
	let Sat = RGBToHSV(RGB[0],RGB[1],RGB[2])[1];

	let pathShader = MD ~ "Script/LIB/PS_HueShiftHLSL.dnh";
	ObjShader_SetShaderF(objDelay, pathShader);
	ObjShader_SetTechnique(objDelay, "TecShift");
	ObjShader_SetFloat(objDelay, "paramHue", Hue);
	ObjShader_SetFloat(objDelay, "paramSat", Sat);

	// WriteLog(Hue);

	let scale = 0;
	let minscale = 0.45;

	ObjRender_SetPosition(objDelay,ObjMove_GetX(objShot),ObjMove_GetY(objShot),0);
	while(frames>0) {
		scale = min(minscale+3.0*(frames/75), minscale+3.0);
		ObjRender_SetScaleXYZ(objDelay,scale,scale,scale);
		if(GetCommonData("Discord",false)) { ObjRender_SetBlendType(objDelay,BLEND_ALPHA); }
		else { ObjRender_SetBlendType(objDelay,BLEND_ADD_ARGB); }
		frames--;
		yield;
	}
	Obj_Delete(objDelay);
}
task DelayEx(objShot,frames) {
	let graphic = 0;
	if(!Obj_IsDeleted(objShot)) {
		graphic = ObjShot_GetImageID(objShot);
	}
	else { return; }
	let colorID = 0;
	let delayColor = GetShotDataInfoA1(graphic,TARGET_ENEMY,INFO_DELAY_COLOR);
	let rect = GetShotDataInfoA1(graphic,TARGET_ENEMY,INFO_RECT);
	let rectSize = rect[2]-rect[0];

	if(delayColor == [255, 64, 64]) { colorID = 1; }
	if(delayColor == [255, 128, 64]) { colorID = 2; }
	if(delayColor == [255, 255, 64]) { colorID = 3; }
	if(delayColor == [64, 255, 64]) { colorID = 4; }
	if(delayColor == [64, 255, 255]) { colorID = 5; }
	if(delayColor == [64, 64, 255]) { colorID = 6; }
	if(delayColor == [255, 64, 255]) { colorID = 7; }

	let objDelay = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objDelay,MD ~ "Shot/Delay.png");
	ObjRender_SetBlendType(objDelay,BLEND_ADD_ARGB);
	ObjRender_SetColor(objDelay,200,200,200);
	ObjRender_SetAlpha(objDelay,200);

	ObjSprite2D_SetSourceRect(objDelay,0+colorID*32,0,32+colorID*32,32);
	ObjSprite2D_SetDestCenter(objDelay);

	let scale = 0;
	let minscale = 0.45*(rectSize/16);

	ObjRender_SetPosition(objDelay,ObjMove_GetX(objShot),ObjMove_GetY(objShot),0);
	while(frames>0) {
		scale = min(minscale+3.0*(frames/75), minscale+3.0);
		if(!Obj_IsDeleted(objDelay)) {
			ObjRender_SetScaleXYZ(objDelay,scale,scale,scale);
			if(GetCommonData("Discord",false)) { ObjRender_SetBlendType(objDelay,BLEND_ALPHA); }
			else { ObjRender_SetBlendType(objDelay,BLEND_ADD_ARGB); }
		}
		frames--;
		yield;
	}
	if(!Obj_IsDeleted(objDelay)) { Obj_Delete(objDelay); }
}
function RGBToHSV(R,G,B) {
	R = R/255;
	G = G/255;
	B = B/255;

	let H = 0;
	let S = 0;
	let V = 0;

	let high = R;
	if(G>high) { high = G; }
	if(B>high) { high = B; }

	let low = R;
	if(G<low) { low = G; }
	if(B<low) { low = B; }

	let delta = high-low;

	if(delta==0) {
		H = 0;
	}
	else {
		if(high==R) {
			H = 60*(((G-B)/delta)%6);
		}
		if(high==G) {
			H = 60*(((B-R)/delta)+2);
		}
		if(high==B) {
			H = 60*(((R-G)/delta)+4);
		}
	}

	if(delta==0) {
		S = 0;
	}
	else {
		S = delta/high*100;
	}

	V = high*100;
	return [H,S,V];
}
task Nullity {
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjRender_SetBlendType(obj, BLEND_ALPHA);
	Obj_SetRenderPriorityI(obj, 90);
	ObjPrim_SetTexture(obj, CSD ~ "IMG/Nullity.png");
	ObjSprite2D_SetSourceRect(obj, 0, 0, 242, 69);
	ObjSprite2D_SetDestCenter(obj);

	let obj2 = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjRender_SetBlendType(obj2, BLEND_ALPHA);
	Obj_SetRenderPriorityI(obj2, 90);
	ObjPrim_SetTexture(obj2, CSD ~ "IMG/Nullity.png");
	ObjSprite2D_SetSourceRect(obj2, 0, 0, 242, 69);
	ObjSprite2D_SetDestCenter(obj2);

	ObjRender_SetScaleXYZ(obj,0.9,0.9,0.9);
	ObjRender_SetScaleXYZ(obj2,0.9,0.9,0.9);

	ObjRender_SetPosition(obj,532,116,0);
	ObjRender_SetPosition(obj2,532,230,0);

	let objScene = GetEnemyBossSceneObjectID;

	while(!Obj_IsDeleted(objScene)) {
		if(ObjEnemyBossScene_GetInfo(objScene,INFO_IS_LAST_SPELL) || GetAreaCommonData("PlayState","Mode","")=="Spell Practice") {
			Obj_SetVisible(obj,true);
			Obj_SetVisible(obj2,true);
		}
		else {
			Obj_SetVisible(obj,false);
			Obj_SetVisible(obj2,false);
		}
		yield;
	}
	Obj_Delete(obj);
	Obj_Delete(obj2);
}
task MagicCircle {

	let path = CSD ~ "IMG/SpellCircle.png";
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjRender_SetBlendType(obj, BLEND_ADD_RGB);
	Obj_SetRenderPriorityI(obj, 30);
	ObjPrim_SetTexture(obj, path);
	ObjSprite2D_SetSourceRect(obj, 0, 0, 1024, 1024);
	ObjSprite2D_SetDestRect(obj, 0, 0, 1024, 1024);
	ObjSprite2D_SetDestCenter(obj);


	//shader stuffs
	circleCount++;
	let objShader;
	if (circleCount % 2 == 1) {
		objShader = magicCircle;
	}
	else {
		objShader = magicCircle_copy;
	}

	ObjShader_SetTechnique(objShader,"TecPass");
	let check = ObjShader_SetShaderO(obj,objShader);
	//WriteLog("Magic Circle Task Check: " ~ ToString(check));

	let objScene = GetEnemyBossSceneObjectID();
	let objBoss = GetEnemyBossObjectID()[0];
	let timerOrg = ObjEnemyBossScene_GetInfo(objScene, INFO_ORGTIMERF);
	let bLastSpell = ObjEnemyBossScene_GetInfo(objScene, INFO_IS_LAST_SPELL);

	let scale = 1.2;
	ObjRender_SetScaleXYZ(obj, scale, scale, scale);
	let cx = 0;
	let cy = 0;

	let alpha = 0;
	let frame = 0;
	let angleRender = 0;

	function GetPlayerX {
		let objPlayer = GetPlayerObjectID();
		return ObjRender_GetX(objPlayer);
	}

	function GetPlayerY {
		let objPlayer = GetPlayerObjectID();
		return ObjRender_GetY(objPlayer);
	}

	function UpdateVertex {
		if(bLastSpell) {
			ObjRender_SetColor(obj, 255 * alpha, 192 * alpha, 192 * alpha);
		}
		else {
			ObjRender_SetColor(obj, 192 * alpha, 192 * alpha, 255 * alpha);
		}

		ObjRender_SetPosition(obj, cx, cy, 0);
		ObjRender_SetAngleZ(obj, angleRender);
		ObjRender_SetScaleXYZ(obj, scale, scale, scale);
	}

	PlaySoundEffect("spell",100);
	//if common data here
	ObjShader_SetFloat(objShader, "time", frame);

	while(typeEnd == 0) {
		if(!Obj_IsDeleted(objBoss)) {
			cx = ObjRender_GetX(objBoss);
			cy = ObjRender_GetY(objBoss);
			if(cx<-400) { cx = GetStgFrameWidth/2; cy = GetStgFrameHeight/2; }
		}

		alpha += 1 / 120;
		alpha = min(alpha, 1);
		angleRender += 4;
		//let rateUndulate = 1 + (sin(frame * 5) * 0.1);

		let timer = ObjEnemyBossScene_GetInfo(objScene, INFO_TIMERF);
		let rRate = timer / timerOrg;
		scale = 1.2 * rRate;


		UpdateVertex();
		frame++;
		//if common data here
		ObjShader_SetFloat(objShader, "time", frame);
		ObjShader_SetShaderO(obj,objShader);
		yield;
	}

	if(SpellID>136 && SpellID<141 && GetAreaCommonData("PlayState","Mode","")!="Spell Practice"){
		loop(150){
			if(!Obj_IsDeleted(objBoss)) {
				cx = ObjRender_GetX(objBoss);
				cy = ObjRender_GetY(objBoss);
				if(cx<-400) { cx = GetStgFrameWidth/2; cy = GetStgFrameHeight/2; }
			}

			alpha += 1 / 120;
			alpha = min(alpha, 1);
			angleRender += 4;

			let timer = ObjEnemyBossScene_GetInfo(objScene, INFO_TIMERF);
			let rRate = timer / timerOrg;
			scale = 1.2 * rRate;


			UpdateVertex();
			frame++;
			//if common data here
			ObjShader_SetFloat(obj, "time", frame);
			ObjShader_SetShaderO(obj,objShader);
			yield;
		}
	}


	if(typeEnd == END_FAILED) {
		alpha = 1;
		loop(150) {
			alpha -= 0.01;
			alpha = max(alpha,0);
			angleRender += 4;
			UpdateVertex();
			yield;
		}
		Obj_Delete(obj);
		return;
	}

	let rRate = 1.0;
	frame = 0;
	alpha = 1;
	let weightX = 1;
	let weightY = 1;
	scale = 1;

	loop(105) {
		angleRender += 4;
		let dx = (GetPlayerX() - cx) / 8;
		let dy = (GetPlayerY() - cy) / 8;
		cx += dx;
		cy += dy;
		scale = max(0,scale - 0.01);
		if(frame >= 45)
		{
			if(frame == 45) {
				//if common data here (TecSpell)
				ObjShader_SetTechnique(objShader,"TecSpell");
			}
			alpha -= 1 / 45;
			alpha = max(alpha, 0);
			weightX += 0.12;
			weightY += 0.12;
		}

		UpdateVertex;
		frame++;
		//if common data here for three lines below
		ObjShader_SetFloat(objShader, "time", frame);
		ObjShader_SetFloat(objShader, "weightX", weightX);
		ObjShader_SetFloat(objShader, "weightY", weightY);
		ObjShader_SetShaderO(obj,objShader);
		yield;
	}

	Obj_Delete(obj);
}
task ManageDiscordResources {
	let bonus = GetCommonData("Discord Resource Bonus",0);
	let sound = true;
	while(GetCommonData("Discord",false) || GetCommonData("Simple Discord",false)) {
		if(!ObjEnemyBossScene_GetInfo(GetEnemyBossSceneObjectID,INFO_IS_LAST_SPELL) && bonus<300) { bonus+=100/(11*60); }
		if(bonus>300) { bonus = 300; }
		if(sound && bonus>=300) { PlaySoundEffect("bonus4",100); sound = false; }
		if(bonus<300) { sound = true; }
		SetCommonData("Discord Resource Bonus",bonus);
		yield;
	}
	bonus = GetCommonData("Discord Resource Bonus",0);
	if(bonus/100 >= 3) {
		bonus-=300;
		SetCommonData("Discord Resource Bonus",bonus);
		wait(45);
		if(GetPlayerState == STATE_HIT || GetPlayerState == STATE_DOWN) { yield; }
		PlaySoundEffect("bonus",100);
		NotifyEventAll(EV_CREATE_AUTO_ITEM,[ID_INVALID,7,GetPlayerX-30,GetPlayerY-30,0]);
		NotifyEventAll(EV_CREATE_AUTO_ITEM,[ID_INVALID,7,GetPlayerX,GetPlayerY-45,0]);
		NotifyEventAll(EV_CREATE_AUTO_ITEM,[ID_INVALID,7,GetPlayerX+30,GetPlayerY-30,0]);
	}
	else if(bonus/100 >= 2) {
		bonus-=200;
		SetCommonData("Discord Resource Bonus",bonus);
		wait(45);
		if(GetPlayerState == STATE_HIT || GetPlayerState == STATE_DOWN) { yield; }
		PlaySoundEffect("bonus",100);
		NotifyEventAll(EV_CREATE_AUTO_ITEM,[ID_INVALID,7,GetPlayerX-30,GetPlayerY-30,0]);
		NotifyEventAll(EV_CREATE_AUTO_ITEM,[ID_INVALID,7,GetPlayerX+30,GetPlayerY-30,0]);
	}
	else if(bonus/100 >= 1) {
		bonus-=100;
		SetCommonData("Discord Resource Bonus",bonus);
		wait(45);
		if(GetPlayerState == STATE_HIT || GetPlayerState == STATE_DOWN) { yield; }
		PlaySoundEffect("bonus",100);
		NotifyEventAll(EV_CREATE_AUTO_ITEM,[ID_INVALID,7,GetPlayerX,GetPlayerY-45,0]);
	}
}
task ManageSpellBonus {
	let objScene = GetEnemyBossSceneObjectID;
	let objEnemy = GetEnemyBossObjectID[0];
	let baseScore = Obj_GetValueD(objScene,"Spell Base",0);
	//if(GetCommonData("Stage","")=="Stage 7") { baseScore = baseScore*}
	let initScore = baseScore*(2000000+atoi(GetCommonData("Stage","Stage 1")[6])*1000000)+3000000*atoi(GetCommonData("Stage","Stage 1")[6])+3000000*GetAreaCommonData("PlayState","Difficulty",2);
	if (GetAreaCommonData("PlayState","Mode","")=="Extra") { initScore = min(750 * round(GetCommonData("ItemValue",10000)),99000000); }
	let initTimer = ObjEnemyBossScene_GetInfo(objScene, INFO_TIMERF)/60-5;
	let Timer = initTimer;
	let durableSpell = ObjEnemyBossScene_GetInfo(objScene,INFO_IS_DURABLE_SPELL);
	Obj_SetValue(objScene,"Spell Bonus",initScore);
	wait(300);
	while(!Obj_IsDeleted(objEnemy)) {
		if(!durableSpell) {
			Timer = ObjEnemyBossScene_GetInfo(objScene, INFO_TIMERF)/60;
			Obj_SetValue(objScene,"Spell Bonus",initScore*(1/3)+(initScore*(2/3)*(Timer/initTimer)));
		}
		yield;
	}
}
task ManageDiscordBonus {
	let objScene = GetEnemyBossSceneObjectID;
	let objEnemy = GetEnemyBossObjectID[0];
	let baseScore = Obj_GetValueD(objScene,"Spell Base",0);
	let initScore = baseScore*(2000000+atoi(GetCommonData("Stage","Stage 1")[6])*1000000)+3000000*atoi(GetCommonData("Stage","Stage 1")[6])+3000000*GetAreaCommonData("PlayState","Difficulty",2);
	if (GetAreaCommonData("PlayState","Mode","")=="Extra") { initScore = 750 * round(GetCommonData("ItemValue",10000)); }
	let initTimer = ObjEnemyBossScene_GetInfo(objScene, INFO_TIMERF)-300;
	let Timer = initTimer;
	let firstFrameBonus = initScore*(1/3)+(initScore*(2/3)*(Timer/initTimer));
	let nextFrameBonus = initScore*(1/3)+(initScore*(2/3)*((Timer+1)/initTimer));

	let maxScore = baseScore*(2000000+atoi(GetCommonData("Stage","Stage 1")[6])*1000000)+3000000*atoi(GetCommonData("Stage","Stage 1")[6])+3000000*GetAreaCommonData("PlayState","Difficulty",2)*4;
	if (GetAreaCommonData("PlayState","Mode","")=="Extra") { maxScore = 750 * round(GetCommonData("ItemValue",10000))*4; }
	let finalScore = 0;
	let initLife = ObjEnemy_GetInfo(objEnemy,INFO_LIFE);
	let finalLife = initLife;
	let scoreRatio = finalScore/maxScore;
	let lifeRatio = 1-finalLife/initLife;
	//let Ratio = (scoreRatio*0.8) + (lifeRatio*0.2);

	Obj_SetValue(objScene,"Discord Bonus",0);
	wait(180);
	while(!Obj_IsDeleted(objEnemy)) {
		if(GetCommonData("Discord",false) || GetCommonData("Simple Discord",false)) {
			let value = Obj_GetValueD(objScene,"Discord Bonus",0)+(nextFrameBonus-firstFrameBonus)*3;
			if (GetAreaCommonData("PlayState","Mode","")=="Extra") { value = min(value,99000000); }
			Obj_SetValue(objScene,"Discord Bonus",value);
		}
		if(ObjEnemyBossScene_GetInfo(objScene,INFO_PLAYER_SHOOTDOWN_COUNT)>0 || ObjEnemyBossScene_GetInfo(objScene,INFO_PLAYER_SPELL_COUNT)>0 || ObjEnemyBossScene_GetInfo(objScene,INFO_TIMERF)<=0) {
			finalScore = 0;
			finalLife = initLife;
		}
		else {
			finalScore = Obj_GetValueD(objScene,"Discord Bonus",0);
			finalLife = ObjEnemy_GetInfo(objEnemy,INFO_LIFE);
		}
		scoreRatio = finalScore/maxScore;
		lifeRatio = 1-finalLife/initLife;
		//Ratio = (scoreRatio*0.8) + (lifeRatio*0.2);
		//Obj_SetValue(objEnemy,"Discord Bonus Ratio",Ratio);
		yield;
	}
	//Obj_SetValue(objEnemy,"Discord Bonus Ratio",Ratio);
}
task StageClear(score){ //by gtbot
	let objScore = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	let listNum_old = DigitToArray(score, GetNumSize(score));
	let listNum = [];
	let comcount = 0;
	ascent(i in 0..length(listNum_old)){
		let ni = length(listNum_old)-i-1;
		listNum = listNum ~ [listNum_old[i]];
		if(ni%3==0 && ni != length(listNum_old) && ni != 0){
			listNum = listNum ~ [14];
			comcount++;
		}
	}
	let pathDigit = CSD ~ "IMG/SystemDigit.png";
	let count = length(listNum);
	//RaiseError(listNum);
	ObjRender_SetBlendType(objScore, BLEND_ALPHA);
	ObjPrim_SetTexture(objScore, pathDigit);
	Obj_SetRenderPriorityI(objScore, 80);
	ObjRender_SetY(objScore, 140);
	ObjRender_SetScaleXYZ(objScore,1.0,1.0,1);

	let lprop = [];
	//alpha, y
	ascent(i in 0..count){
		lprop = lprop~[[0, 0]];
		ControlNumber(i);
	}
	RenderText;
	loop(150){
		RenderScore;
		yield;
	}

	descent(i in 0..255/10){
		RenderScore;
		ObjRender_SetScaleY(objScore, max(0, 1.0*(i/(255/10))));
		// ObjRender_SetScaleX(objScore, 1.0);
		ascent(x in 0..count){
			let lp = lprop[x];
			lp[0] = i*15;
			lprop[x] = lp;
		}
		yield;
	}

	ObjSpriteList2D_ClearVertexCount(objScore);
	Obj_Delete(objScore);

	task RenderText {
		RenderBonusText01("StageClear",98,15,-1);
		RenderBonusText01("StageClear",98,15,1);
		wait(15);
		RenderBonusText02("StageClear",98,25);
	}

	sub RenderScore{
		ObjSpriteList2D_ClearVertexCount(objScore);
		let basex = GetStgFrameWidth/2 - ((count-comcount-1)*12/2) - ((comcount-1)*6/2);
		ascent(iObj in 0 .. count){
			let lp = lprop[iObj];
			ObjRender_SetAlpha(objScore, lp[0]);
			let num = listNum[iObj];
			ObjRender_SetX(objScore, basex);
			if(num == 14){
				basex += 6;
				ObjRender_SetY(objScore, 142 + lp[1]);
			}else{
				basex += 12;
				ObjRender_SetY(objScore, 140 + lp[1]);
			}
			ObjSpriteList2D_SetSourceRect(objScore, num*16, 0, (num+1)*16, 32);
			ObjSpriteList2D_SetDestRect(objScore, -8, -16, 8, 16);
			ObjSpriteList2D_AddVertex(objScore);
		}
	}
	function DigitToArray(digit, count){
		let res = [];
		digit = truncate(digit);

		loop{
			let tnum = truncate(digit % 10);
			digit /= 10;
			res = [tnum] ~ res;
			if(truncate(digit) == 0){break;}
		}

		loop(max(0, count - length(res))){
			res = [0] ~ res;
		}

		return res;
	}
	function GetNumSize(value){
		if(value<=1){return 1;}
		else{return truncate(log10(value))+1;}
	}
	task ControlNumber(i){
		loop(12+(count-i)*2){yield;}
		ascent(x in 0..8){
			let lp = lprop[i];
			lp[0] = min(255, lp[0]+255/6);
			lp[1] = lp[1]-3;
			lprop[i] = lp;
			yield;
		}
		ascent(x in 0..4){
			let lp = lprop[i];
			lp[1] = lp[1]+3;
			lprop[i] = lp;
			yield;
		}
	}
}
task GotSpellCard(score){ //by gtbot
	let objScore = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	let listNum_old = DigitToArray(score, GetNumSize(score));
	let listNum = [];
	let comcount = 0;
	ascent(i in 0..length(listNum_old)){
		let ni = length(listNum_old)-i-1;
		listNum = listNum ~ [listNum_old[i]];
		if(ni%3==0 && ni != length(listNum_old) && ni != 0){
			listNum = listNum ~ [14];
			comcount++;
		}
	}
	let pathDigit = CSD ~ "IMG/SystemDigit.png";
	let count = length(listNum);
	//RaiseError(listNum);
	ObjRender_SetBlendType(objScore, BLEND_ALPHA);
	ObjPrim_SetTexture(objScore, pathDigit);
	Obj_SetRenderPriorityI(objScore, 80);
	ObjRender_SetY(objScore, 140);
	ObjRender_SetScaleXYZ(objScore,1.0,1.0,1);

	let lprop = [];
	//alpha, y
	ascent(i in 0..count){
		lprop = lprop~[[0, 0]];
		ControlNumber(i);
	}
	RenderText;
	loop(150){
		RenderScore;
		yield;
	}

	descent(i in 0..255/10){
		RenderScore;
		ObjRender_SetScaleY(objScore, max(0, 1.0*(i/(255/10))));
		// ObjRender_SetScaleX(objScore, 1.0);
		ascent(x in 0..count){
			let lp = lprop[x];
			lp[0] = i*15;
			lprop[x] = lp;
		}
		yield;
	}

	ObjSpriteList2D_ClearVertexCount(objScore);
	Obj_Delete(objScore);

	task RenderText {
		RenderBonusText01("SpellBonus",98,15,-1);
		RenderBonusText01("SpellBonus",98,15,1);
		wait(15);
		RenderBonusText02("SpellBonus",98,25);
	}

	sub RenderScore{
		ObjSpriteList2D_ClearVertexCount(objScore);
		let basex = GetStgFrameWidth/2 - ((count-comcount-1)*12/2) - ((comcount-1)*6/2);
		ascent(iObj in 0 .. count){
			let lp = lprop[iObj];
			ObjRender_SetAlpha(objScore, lp[0]);
			let num = listNum[iObj];
			ObjRender_SetX(objScore, basex);
			if(num == 14){
				basex += 6;
				ObjRender_SetY(objScore, 142 + lp[1]);
			}else{
				basex += 12;
				ObjRender_SetY(objScore, 140 + lp[1]);
			}
			ObjSpriteList2D_SetSourceRect(objScore, num*16, 0, (num+1)*16, 32);
			ObjSpriteList2D_SetDestRect(objScore, -8, -16, 8, 16);
			ObjSpriteList2D_AddVertex(objScore);
		}
	}
	function DigitToArray(digit, count){
		let res = [];
		digit = truncate(digit);

		loop{
			let tnum = truncate(digit % 10);
			digit /= 10;
			res = [tnum] ~ res;
			if(truncate(digit) == 0){break;}
		}

		loop(max(0, count - length(res))){
			res = [0] ~ res;
		}

		return res;
	}
	function GetNumSize(value){
		if(value<=1){return 1;}
		else{return truncate(log10(value))+1;}
	}
	task ControlNumber(i){
		loop(12+(count-i)*2){yield;}
		ascent(x in 0..8){
			let lp = lprop[i];
			lp[0] = min(255, lp[0]+255/6);
			lp[1] = lp[1]-3;
			lprop[i] = lp;
			yield;
		}
		ascent(x in 0..4){
			let lp = lprop[i];
			lp[1] = lp[1]+3;
			lprop[i] = lp;
			yield;
		}
	}
}
task GotSpellCard2(score){ //unused
	let path = CSD ~ "IMG/system.png";
	let objText = ObjPrim_Create(OBJ_SPRITE_2D);

	let maxscale = 2;
	let scale = 0;
	let alpha = 0;

	ObjPrim_SetTexture(objText, path);
	ObjSprite2D_SetSourceRect(objText, 0, 96, 256, 136);
	ObjSprite2D_SetDestCenter(objText);
	Obj_SetRenderPriorityI(objText, 80);
	ObjRender_SetPosition(objText, GetStgFrameWidth/2, 98, 0);

	let objScore = ObjText_Create;
	ObjText_SetFontSize(objScore,26);
	ObjText_SetFontType(objScore, "Crystal clear");
	ObjText_SetFontColorTop(objScore,255,255,255);
	ObjText_SetFontColorBottom(objScore,180,180,180);
	ObjText_SetFontBorderType(objScore,BORDER_FULL);
	ObjText_SetFontBorderWidth(objScore,2);
	ObjText_SetFontBorderColor(objScore,0,0,0);
	ObjText_SetHorizontalAlignment(objScore,ALIGNMENT_CENTER);
	ObjText_SetMaxWidth(objScore,300);
	Obj_SetRenderPriorityI(objScore,80);

	ObjText_SetText(objScore,ToCommas(score));
	ObjRender_SetPosition(objScore,GetStgFrameWidth/2-150,120,0);

	ObjText_SetAutoTransCenter(objScore,false);
	ObjText_SetTransCenter(objScore,GetStgFrameWidth/2*(3/4),12);

	ascent(i in 0..30){
		alpha+=255/25;
		scale = maxscale - scale*sin(90*i/30);
		ObjRender_SetScaleXYZ(objScore, scale, scale, scale);
		ObjRender_SetScaleXYZ(objText, scale, scale, scale);
		ObjRender_SetAlpha(objScore, alpha);
		ObjRender_SetAlpha(objText, alpha);
		yield;
	}

	loop(120){ yield; }

	loop(25){
		ObjRender_SetScaleXYZ(objScore, 1, scale, 1);
		ObjRender_SetScaleXYZ(objText, 1, scale, 1);
		scale-=1/25;
		yield;
	}


	Obj_Delete(objText);
	Obj_Delete(objScore);
}
task GotDiscordBonus(score){ //by gtbot
	wait(20);
	let objScore = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	let listNum_old = DigitToArray(score, GetNumSize(score));
	let listNum = [];
	let comcount = 0;
	ascent(i in 0..length(listNum_old)){
		let ni = length(listNum_old)-i-1;
		listNum = listNum ~ [listNum_old[i]];
		if(ni%3==0 && ni != length(listNum_old) && ni != 0){
			listNum = listNum ~ [14];
			comcount++;
		}
	}
	let pathDigit = CSD ~ "IMG/SystemDigit.png";
	let count = length(listNum);
	//RaiseError(listNum);
	ObjRender_SetBlendType(objScore, BLEND_ALPHA);
	ObjPrim_SetTexture(objScore, pathDigit);
	Obj_SetRenderPriorityI(objScore, 80);
	ObjRender_SetY(objScore, 200);
	ObjRender_SetScaleXYZ(objScore,1.0,1.0,1);

	let lprop = [];
	//alpha, y
	ascent(i in 0..count){
		lprop = lprop~[[0, 0]];
		ControlNumber(i);
	}
	RenderText;
	loop(150){
		RenderScore;
		yield;
	}

	descent(i in 0..255/10){
		RenderScore;
		ObjRender_SetScaleY(objScore, max(0, 1.0*(i/(255/10))));
		// ObjRender_SetScaleX(objScore, 1.0);
		ascent(x in 0..count){
			let lp = lprop[x];
			lp[0] = i*15;
			lprop[x] = lp;
		}
		yield;
	}

	ObjSpriteList2D_ClearVertexCount(objScore);
	Obj_Delete(objScore);

	task RenderText {
		RenderBonusText01("DiscordBonus",158,15,-1);
		RenderBonusText01("DiscordBonus",158,15,1);
		wait(15);
		RenderBonusText02("DiscordBonus",158,25);
	}

	sub RenderScore{
		ObjSpriteList2D_ClearVertexCount(objScore);
		let basex = GetStgFrameWidth/2 - ((count-comcount-1)*12/2) - ((comcount-1)*6/2);
		ascent(iObj in 0 .. count){
			let lp = lprop[iObj];
			ObjRender_SetAlpha(objScore, lp[0]);
			let num = listNum[iObj];
			ObjRender_SetX(objScore, basex);
			if(num == 14){
				basex += 6;
				ObjRender_SetY(objScore, 202 + lp[1]);
			}else{
				basex += 12;
				ObjRender_SetY(objScore, 200 + lp[1]);
			}
			ObjSpriteList2D_SetSourceRect(objScore, num*16, 0, (num+1)*16, 32);
			ObjSpriteList2D_SetDestRect(objScore, -8, -16, 8, 16);
			ObjSpriteList2D_AddVertex(objScore);
		}
	}
	function DigitToArray(digit, count){
		let res = [];
		digit = truncate(digit);

		loop{
			let tnum = truncate(digit % 10);
			digit /= 10;
			res = [tnum] ~ res;
			if(truncate(digit) == 0){break;}
		}

		loop(max(0, count - length(res))){
			res = [0] ~ res;
		}

		return res;
	}
	function GetNumSize(value){
		if(value<=1){return 1;}
		else{return truncate(log10(value))+1;}
	}
	task ControlNumber(i){
		loop(12+(count-i)*2){yield;}
		ascent(x in 0..8){
			let lp = lprop[i];
			lp[0] = min(255, lp[0]+255/6);
			lp[1] = lp[1]-3;
			lprop[i] = lp;
			yield;
		}
		ascent(x in 0..4){
			let lp = lprop[i];
			lp[1] = lp[1]+3;
			lprop[i] = lp;
			yield;
		}
	}
}
function ToCommas(input) {
	let number = "";
	let num = length(IntToString(input));
		descent(i in 0..num) {
			number = number ~ ToString(IntToString(input)[num-i-1]);
			if(num>3) {
				if(i%3 == 0 && i != 0) {
					number = number ~ ",";
				}
			}
		}
	return number;
}
task Slowdown(fps,frames) {
	StartSlow(TARGET_ALL,fps);
	wait(frames);
	StopSlow(TARGET_ALL);
}
task cutin(SpellID,type,SpellCardName,CutImg) {
	let objScene = GetEnemyBossSceneObjectID;
	let objEnemy = ID_INVALID;
	if(length(GetEnemyBossObjectID)>0) { objEnemy = GetEnemyBossObjectID[0]; }
	descent(i in 0..length(CutImg)) { Cut(i); }
	SpellText;
	if(GetAreaCommonData("Options","ScrollingText",true)) { ScrollingText; }

	task Cut(num) {
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		let alpha = 220;
		let count = 0;
		let x = 0;
		let y = 0;

		let s = 0.55;
		let f = 0;
		let g = 0;
		if(type=="NAZRIN") {
			x = GetStgFrameWidth+256;
			y = GetStgFrameHeight/2-100;
		}
		if(type=="TABLE") {
			if(num==0) {
				x = -40;
				y = GetStgFrameHeight/2;
			}
			if(num==1) {
				x = GetStgFrameWidth+40;
				y = GetStgFrameHeight/2;
			}
			if(num==2) {
				x = GetStgFrameWidth/2-25;
				y = GetStgFrameHeight+20;
			}
		}
		ObjRender_SetBlendType(obj,BLEND_ALPHA);
		ObjPrim_SetTexture(obj,CutImg[num]);
		Obj_SetRenderPriorityI(obj,30);
		ObjSprite2D_SetSourceRect(obj,0,0,GetTextureWidth(CutImg[num]),GetTextureHeight(CutImg[num]));
		ObjSprite2D_SetDestRect(obj,-GetTextureWidth(CutImg[num])/2,-GetTextureHeight(CutImg[num])/2+250,GetTextureWidth(CutImg[num])/2,GetTextureHeight(CutImg[num])/2+250);


		while(!Obj_IsDeleted(obj)){
			if(type=="NAZRIN") {
				if(count<21){x-=20; y+=5}
				if(count>=21 && count<100){ x--; y+=0.5; }
				if(count>=100){x-=20; y+=5;}
				if(count>120){ Obj_Delete(obj); }
				ObjRender_SetScaleXYZ(obj,s,s,0);
				ObjRender_SetPosition(obj,x,y,0);
				ObjRender_SetAlpha(obj,alpha);
			}
			if(num==0) {
				if(type=="TABLE") {
					if(count<30){ x+=20-g; g+=20/30; }
					if(count>=70){ s+=0.02-f; f+=0.0005; alpha-=220/40; }
					if(count>160){ Obj_Delete(obj); }
					ObjRender_SetScaleXYZ(obj,s,s,0);
					ObjRender_SetPosition(obj,x,y,0);
					ObjRender_SetAlpha(obj,alpha);
				}
			}
			if(num==1) {
				if(type=="TABLE") {
					if(count<30){ x-=20-g; g+=20/30; }
					if(count>=70){ s+=0.02-f; f+=0.0005; alpha-=220/40; }
					if(count>160){ Obj_Delete(obj); }
					ObjRender_SetScaleXYZ(obj,s,s,0);
					ObjRender_SetPosition(obj,x,y,0);
					ObjRender_SetAlpha(obj,alpha);
				}
			}
			if(num==2) {
				if(type=="TABLE") {
					if(count<30){ y-=20-g; g+=20/30; }
					if(count>=70){ s+=0.02-f; f+=0.0005; alpha-=220/40; }
					if(count>160){ Obj_Delete(obj); }
					ObjRender_SetScaleXYZ(obj,s,s,0);
					ObjRender_SetPosition(obj,x,y,0);
					ObjRender_SetAlpha(obj,alpha);
				}
			}
			count++;
			yield;
		}

	}
	task ScrollingText {
		ascent(i in -6..12) {
			Text(-200+i*120,-200,135);
			Text(-200+i*120+30,-200+30,315);
		}
		task Text(x,y,dir) {
			let objAttack = ObjPrim_Create(OBJ_SPRITE_2D);
			let a = 0;

			ObjRender_SetBlendType(objAttack,BLEND_ALPHA);
			Obj_SetRenderPriorityI(objAttack,29);
			ObjPrim_SetTexture(objAttack,MD ~ "System/IMG/SpellCardAttack.png");
			ObjSprite2D_SetSourceRect(objAttack,-192*8,0,192*8,16);
			ObjSprite2D_SetDestCenter(objAttack);
			if(dir == 135) { ObjRender_SetAngleZ(objAttack,dir-180); }
			if(dir == 315) { ObjRender_SetAngleZ(objAttack,dir); }

			loop(30) {
				ObjRender_SetAlpha(objAttack,a);
				ObjRender_SetPosition(objAttack,x,y,0);
				x+=2.5*cos(dir);
				y+=2.5*sin(dir);
				a+=255/30;
				yield;
			}
			loop(70) {
				ObjRender_SetPosition(objAttack,x,y,0);
				x+=3*cos(dir);
				y+=3*sin(dir);
				yield;
			}
			loop(30) {
				ObjRender_SetAlpha(objAttack,a);
				ObjRender_SetPosition(objAttack,x,y,0);
				x+=3*cos(dir);
				y+=3*sin(dir);
				a-=255/30;
				yield;
			}
			Obj_Delete(objAttack);
		}
	}
	task SpellText {
		let objtext = ObjText_Create;
		let x1 = GetStgFrameWidth/2-145;
		let a = 0;
		let a2 = 0;
		let y1 = 370;
		let scale = 1.5;
		let offset = 0;
		if(!GetAreaCommonData("PlayState","Infinite Discord",false)) { offset = 0; } else { offset = 2; }

		ObjText_SetText(objtext,SpellCardName);

		alternative(GetAreaCommonData("Options","Language",0))
		case(0) {
			ObjText_SetFontType(objtext, "Noto Sans");
			ObjText_SetFontSize(objtext,15);
			ObjText_SetFontBold(objtext, true);
		}
		case(1) {
			ObjText_SetFontType(objtext, "Noto Sans Mono CJK JP Bold");
			ObjText_SetFontSize(objtext,17);
		}
		case(2) {
			ObjText_SetFontType(objtext, "Noto Sans Mono CJK SC Bold");
			ObjText_SetFontSize(objtext,17);
		}
		others {
			ObjText_SetFontType(objtext, "Noto Sans");
			ObjText_SetFontSize(objtext,15);
			ObjText_SetFontBold(objtext, true);
		}

		ObjText_SetFontColorTop(objtext,255,255,255);
		ObjText_SetFontColorBottom(objtext,255,255,255);
		ObjText_SetFontBorderType(objtext,BORDER_FULL);
		ObjText_SetFontBorderWidth(objtext,1);
		ObjText_SetFontBorderColor(objtext,0,0,0);
		ObjText_SetHorizontalAlignment(objtext,ALIGNMENT_RIGHT);
		ObjText_SetMaxWidth(objtext,330);
		Obj_SetRenderPriorityI(objtext,70);

		SpellBG;
		SpellBonus;
		DiscordBonus;
		SpellHistory;

		loop(20) {
			ObjRender_SetPosition(objtext,x1,y1,0);
			ObjRender_SetAlpha(objtext,a);
			if(a<255) { a+=255/20; }
			if(x1>GetStgFrameWidth/2-20) { x1-=30/20; }
			if(scale>1) { scale-=0.5/20; }
			yield;
		}
		loop(45) { yield; }
		a2 = a;
		if(GetAreaCommonData("Options","LifeBar",true)) { SetMovePosition01(objtext,x1,30,6,9); }
		else { SetMovePosition01(objtext,x1,30+7,6,9); }
		while(!Obj_IsDeleted(objEnemy)) {
			//ObjRender_SetY(objtext,y1);
			ObjText_SetText(objtext,SpellCardName);
			ObjRender_SetAlpha(objtext,a2);
			if(GetPlayerY<90 && a2>a-180) {
				a2-=10;
			}
			else if(a2<a) {
				a2+=10;
			}
			//if(y1>30) { y1-=365/60; }
			yield;
		}
		loop(20) {
			ObjRender_SetX(objtext,ObjRender_GetX(objtext)+15);
			yield;
		}
		Obj_Delete(objtext);

		task SpellBG {
			let objbg = ObjPrim_Create(OBJ_SPRITE_2D);
			ObjRender_SetBlendType(objbg,BLEND_ALPHA);
			Obj_SetRenderPriorityI(objbg,69);
			ObjPrim_SetTexture(objbg,GetCurrentScriptDirectory ~ "IMG/SpellBG.png");
			ObjSprite2D_SetSourceRect(objbg,0,0,256,64);
			ObjSprite2D_SetDestRect(objbg,-256,-12,0,52);

			loop(20) {
				ObjRender_SetPosition(objbg,GetStgFrameWidth,356,0);
				ObjRender_SetAlpha(objbg,a);
				ObjRender_SetScaleXYZ(objbg,scale,scale,0);
				yield;
			}
			loop(45) { yield; }
			if(GetAreaCommonData("Options","LifeBar",true)) { SetMovePosition01(objbg,GetStgFrameWidth,30-14,6,9); }
			else { SetMovePosition01(objbg,GetStgFrameWidth,30-14+7,6,9); }
			while(!Obj_IsDeleted(objEnemy)) {
				//ObjRender_SetY(objbg,y1-14);
				ObjRender_SetAlpha(objbg,a2);
				yield;
			}
			loop(20) {
				ObjRender_SetX(objbg,ObjRender_GetX(objbg)+15);
				yield;
			}
			Obj_Delete(objbg);
		}
		task SpellBonus {
			let objtext2a = ObjText_Create;
			let y2 = 385;

			ObjText_SetText(objtext2a,"Bonus");
			ObjText_SetFontSize(objtext2a,12);
			ObjText_SetFontType(objtext2a, "Noto Sans");
			// ObjText_SetFontBold(objtext2a, true);
			ObjText_SetFontColorTop(objtext2a,255,255,255);
			ObjText_SetFontColorBottom(objtext2a,0,0,255);
			ObjText_SetFontBorderType(objtext2a,BORDER_FULL);
			ObjText_SetFontBorderWidth(objtext2a,1);
			ObjText_SetFontBorderColor(objtext2a,0,0,0);
			ObjText_SetHorizontalAlignment(objtext2a,ALIGNMENT_RIGHT);
			ObjText_SetMaxWidth(objtext2a,200);
			Obj_SetRenderPriorityI(objtext2a,70);

			let objtext2b = ObjText_Create;

			ObjText_SetFontSize(objtext2b,12);
			ObjText_SetFontType(objtext2b, "Noto Sans");
			// ObjText_SetFontBold(objtext2b, true);
			ObjText_SetFontColorTop(objtext2b,255,255,255);
			ObjText_SetFontColorBottom(objtext2b,150,150,150);
			ObjText_SetFontBorderType(objtext2b,BORDER_FULL);
			ObjText_SetFontBorderWidth(objtext2b,1);
			ObjText_SetFontBorderColor(objtext2b,0,0,0);
			ObjText_SetHorizontalAlignment(objtext2b,ALIGNMENT_RIGHT);
			ObjText_SetMaxWidth(objtext2b,200);
			Obj_SetRenderPriorityI(objtext2b,70);

			loop(20) {
				ObjRender_SetPosition(objtext2a,GetStgFrameWidth/2-160,y2,0);
				ObjRender_SetPosition(objtext2b,GetStgFrameWidth/2-110,y2,0);
				ObjRender_SetAlpha(objtext2a,a);
				ObjRender_SetAlpha(objtext2b,a);
				if(ObjEnemyBossScene_GetInfo(objScene,INFO_PLAYER_SHOOTDOWN_COUNT)>0 || ObjEnemyBossScene_GetInfo(objScene,INFO_PLAYER_SPELL_COUNT)>0) {
					ObjText_SetText(objtext2b,"Failed");
				}
				else {
					ObjText_SetText(objtext2b,rtos("0",Obj_GetValueD(objScene,"Spell Bonus",0)));
				}
				yield;
			}
			loop(45) {
				if(ObjEnemyBossScene_GetInfo(objScene,INFO_PLAYER_SHOOTDOWN_COUNT)>0 || ObjEnemyBossScene_GetInfo(objScene,INFO_PLAYER_SPELL_COUNT)>0) {
					ObjText_SetText(objtext2b,"Failed");
				}
				else {
					ObjText_SetText(objtext2b,rtos("0",Obj_GetValueD(objScene,"Spell Bonus",0)));
				}
				yield;
			}
			if(GetAreaCommonData("Options","LifeBar",true)) {
				SetMovePosition01(objtext2a,GetStgFrameWidth/2-160,45,6,9);
				SetMovePosition01(objtext2b,GetStgFrameWidth/2-110,45,6,9);
			}
			else {
				SetMovePosition01(objtext2a,GetStgFrameWidth/2-160,45+7,6,9);
				SetMovePosition01(objtext2b,GetStgFrameWidth/2-110,45+7,6,9);
			}
			while(!Obj_IsDeleted(objEnemy)) {
				//ObjRender_SetY(objtext2a,y2);
				//ObjRender_SetY(objtext2b,y2);
				ObjRender_SetAlpha(objtext2a,a2);
				ObjRender_SetAlpha(objtext2b,a2);
				if(ObjEnemyBossScene_GetInfo(objScene,INFO_PLAYER_SHOOTDOWN_COUNT)>0 || ObjEnemyBossScene_GetInfo(objScene,INFO_PLAYER_SPELL_COUNT)>0) {
					ObjText_SetText(objtext2b,"Failed");
				}
				else {
					ObjText_SetText(objtext2b,rtos("0",Obj_GetValueD(objScene,"Spell Bonus",0)));
				}
				//if(y2>45) { y2-=365/60; }
				yield;
			}
			loop(20) {
				ObjRender_SetX(objtext2a,ObjRender_GetX(objtext2a)+15);
				ObjRender_SetX(objtext2b,ObjRender_GetX(objtext2b)+15);
				yield;
			}
			Obj_Delete(objtext2a);
			Obj_Delete(objtext2b);
		}
		task DiscordBonus {
			let objtext4a = ObjText_Create;
			let y3 = 395;

			ObjText_SetText(objtext4a,"Discord Bonus");
			ObjText_SetFontSize(objtext4a,12);
			ObjText_SetFontType(objtext4a, "Noto Sans");
			// ObjText_SetFontBold(objtext4a, true);
			ObjText_SetFontColorTop(objtext4a,255,255,255);
			ObjText_SetFontColorBottom(objtext4a,182,0,255);
			ObjText_SetFontBorderType(objtext4a,BORDER_FULL);
			ObjText_SetFontBorderWidth(objtext4a,1);
			ObjText_SetFontBorderColor(objtext4a,0,0,0);
			ObjText_SetHorizontalAlignment(objtext4a,ALIGNMENT_RIGHT);
			ObjText_SetMaxWidth(objtext4a,200);
			Obj_SetRenderPriorityI(objtext4a,70);

			let objtext4b = ObjText_Create;

			ObjText_SetFontSize(objtext4b,12);
			ObjText_SetFontType(objtext4b, "Noto Sans");
			// ObjText_SetFontBold(objtext4b, true);
			ObjText_SetFontColorTop(objtext4b,255,255,255);
			ObjText_SetFontColorBottom(objtext4b,150,150,150);
			ObjText_SetFontBorderType(objtext4b,BORDER_FULL);
			ObjText_SetFontBorderWidth(objtext4b,1);
			ObjText_SetFontBorderColor(objtext4b,0,0,0);
			ObjText_SetHorizontalAlignment(objtext4b,ALIGNMENT_RIGHT);
			ObjText_SetMaxWidth(objtext4b,200);
			Obj_SetRenderPriorityI(objtext4b,70);

			loop(20) {
				ObjRender_SetPosition(objtext4a,GetStgFrameWidth/2-160,y3,0);
				ObjRender_SetPosition(objtext4b,GetStgFrameWidth/2-110,y3,0);
				ObjRender_SetAlpha(objtext4a,a);
				ObjRender_SetAlpha(objtext4b,a);
				if(Obj_GetValueD(objScene,"Discord Bonus",0)>0 || GetCommonData("Discord",false) || GetCommonData("Simple Discord",false)) {
					Obj_SetVisible(objtext4a,true);
					Obj_SetVisible(objtext4b,true);
				}
				else {
					Obj_SetVisible(objtext4a,false);
					Obj_SetVisible(objtext4b,false);
				}
				if(ObjEnemyBossScene_GetInfo(objScene,INFO_PLAYER_SHOOTDOWN_COUNT)>0 || ObjEnemyBossScene_GetInfo(objScene,INFO_PLAYER_SPELL_COUNT)>0) {
					ObjText_SetText(objtext4b,"Failed");
				}
				else {
					ObjText_SetText(objtext4b,rtos("0",Obj_GetValueD(objScene,"Discord Bonus",0)));
				}
				yield;
			}
			loop(45) {
				if(ObjEnemyBossScene_GetInfo(objScene,INFO_PLAYER_SHOOTDOWN_COUNT)>0 || ObjEnemyBossScene_GetInfo(objScene,INFO_PLAYER_SPELL_COUNT)>0) {
					ObjText_SetText(objtext4b,"Failed");
				}
				else {
					ObjText_SetText(objtext4b,rtos("0",Obj_GetValueD(objScene,"Discord Bonus",0)));
				}
				yield;
			}
			if(GetAreaCommonData("Options","LifeBar",true)) {
				SetMovePosition01(objtext4a,GetStgFrameWidth/2-160,55,6,9);
				SetMovePosition01(objtext4b,GetStgFrameWidth/2-110,55,6,9);
			}
			else {
				SetMovePosition01(objtext4a,GetStgFrameWidth/2-160,55+7,6,9);
				SetMovePosition01(objtext4b,GetStgFrameWidth/2-110,55+7,6,9);
			}
			while(!Obj_IsDeleted(objEnemy)) {
				//ObjRender_SetY(objtext4a,y2);
				//ObjRender_SetY(objtext4b,y2);
				ObjRender_SetAlpha(objtext4a,a2);
				ObjRender_SetAlpha(objtext4b,a2);
				if(Obj_GetValueD(objScene,"Discord Bonus",0)>0 || GetCommonData("Discord",false) || GetCommonData("Simple Discord",false)) {
					Obj_SetVisible(objtext4a,true);
					Obj_SetVisible(objtext4b,true);
				}
				else {
					Obj_SetVisible(objtext4a,false);
					Obj_SetVisible(objtext4b,false);
				}
				if(ObjEnemyBossScene_GetInfo(objScene,INFO_PLAYER_SHOOTDOWN_COUNT)>0 || ObjEnemyBossScene_GetInfo(objScene,INFO_PLAYER_SPELL_COUNT)>0) {
					ObjText_SetText(objtext4b,"Failed");
				}
				else {
					ObjText_SetText(objtext4b,rtos("0",Obj_GetValueD(objScene,"Discord Bonus",0)));
				}
				//if(y2>45) { y2-=365/60; }
				yield;
			}
			loop(20) {
				ObjRender_SetX(objtext4a,ObjRender_GetX(objtext4a)+15);
				ObjRender_SetX(objtext4b,ObjRender_GetX(objtext4b)+15);
				yield;
			}
			Obj_Delete(objtext4a);
			Obj_Delete(objtext4b);
		}
		task SpellHistory {
			let objtext3a = ObjText_Create;
			let y2 = 385;

			ObjText_SetText(objtext3a,"History");
			ObjText_SetFontSize(objtext3a,12);
			ObjText_SetFontType(objtext3a, "Noto Sans");
			// ObjText_SetFontBold(objtext3a, true);
			ObjText_SetFontColorTop(objtext3a,255,255,255);
			ObjText_SetFontColorBottom(objtext3a,0,0,255);
			ObjText_SetFontBorderType(objtext3a,BORDER_FULL);
			ObjText_SetFontBorderWidth(objtext3a,1);
			ObjText_SetFontBorderColor(objtext3a,0,0,0);
			ObjText_SetHorizontalAlignment(objtext3a,ALIGNMENT_RIGHT);
			ObjText_SetMaxWidth(objtext3a,200);
			Obj_SetRenderPriorityI(objtext3a,70);

			let objtext3b = ObjText_Create;
			let objtext3c = ObjText_Create;
			let objtext3d = ObjText_Create;

			let numCaptures = 0;
			if(IsCommonDataAreaExists("PlayState")) {
				if(GetAreaCommonData("PlayState","Mode","")=="Spell Practice") {
					numCaptures = GetAreaCommonData("History",GetPlayerID[3..length(GetPlayerID)]~" History",[])[1+offset][SpellID][0];
				}
				else {
					numCaptures = GetAreaCommonData("History",GetPlayerID[3..length(GetPlayerID)]~" History",[])[0+offset][SpellID][0];
				}
			}

			if (numCaptures >= 100) {
				ObjText_SetText(objtext3d,"MASTER");
				ObjText_SetFontSize(objtext3d,12);
				ObjText_SetFontType(objtext3d, "Noto Sans");
				// ObjText_SetFontBold(objtext3d, true);
				ObjText_SetFontColorTop(objtext3d,255,255,255);
				ObjText_SetFontColorBottom(objtext3d,150,150,150);
				ObjText_SetFontBorderType(objtext3d,BORDER_FULL);
				ObjText_SetFontBorderWidth(objtext3d,1);
				ObjText_SetFontBorderColor(objtext3d,0,0,0);
				ObjText_SetHorizontalAlignment(objtext3d,ALIGNMENT_RIGHT);
				ObjText_SetMaxWidth(objtext3d,200);
				Obj_SetRenderPriorityI(objtext3d,70);
			}
			else {

			if(IsCommonDataAreaExists("PlayState")) {
				if(GetAreaCommonData("PlayState","Mode","")=="Spell Practice") {
					ObjText_SetText(objtext3b,rtos("00",numCaptures));
				}
				else {
					ObjText_SetText(objtext3b,rtos("00",numCaptures));
				}
			}
			else { ObjText_SetText(objtext3b,rtos("00",0)); }
			ObjText_SetFontSize(objtext3b,12);
			ObjText_SetFontType(objtext3b, "Noto Sans");
			// ObjText_SetFontBold(objtext3b, true);
			ObjText_SetFontColorTop(objtext3b,255,255,255);
			ObjText_SetFontColorBottom(objtext3b,150,150,150);
			ObjText_SetFontBorderType(objtext3b,BORDER_FULL);
			ObjText_SetFontBorderWidth(objtext3b,1);
			ObjText_SetFontBorderColor(objtext3b,0,0,0);
			ObjText_SetHorizontalAlignment(objtext3b,ALIGNMENT_RIGHT);
			ObjText_SetMaxWidth(objtext3b,200);
			Obj_SetRenderPriorityI(objtext3b,70);


			ObjText_SetText(objtext3c,"/");
			ObjText_SetFontSize(objtext3c,12);
			ObjText_SetFontType(objtext3c, "Noto Sans");
			// ObjText_SetFontBold(objtext3c, true);
			ObjText_SetFontColorTop(objtext3c,255,255,255);
			ObjText_SetFontColorBottom(objtext3c,150,150,150);
			ObjText_SetFontBorderType(objtext3c,BORDER_FULL);
			ObjText_SetFontBorderWidth(objtext3c,1);
			ObjText_SetFontBorderColor(objtext3c,0,0,0);
			ObjText_SetHorizontalAlignment(objtext3c,ALIGNMENT_RIGHT);
			ObjText_SetMaxWidth(objtext3c,200);
			Obj_SetRenderPriorityI(objtext3c,70);


			if(IsCommonDataAreaExists("PlayState")) {
				if(GetAreaCommonData("PlayState","Mode","")=="Spell Practice") {
					ObjText_SetText(objtext3d,rtos("00",GetAreaCommonData("History",GetPlayerID[3..length(GetPlayerID)]~" History",[])[1+offset][SpellID][1]));
				}
				else {
					ObjText_SetText(objtext3d,rtos("00",GetAreaCommonData("History",GetPlayerID[3..length(GetPlayerID)]~" History",[])[0+offset][SpellID][1]));
				}
			}
			else { ObjText_SetText(objtext3d,rtos("00",0)); }
			ObjText_SetFontSize(objtext3d,12);
			ObjText_SetFontType(objtext3d, "Noto Sans");
			// ObjText_SetFontBold(objtext3d, true);
			ObjText_SetFontColorTop(objtext3d,255,255,255);
			ObjText_SetFontColorBottom(objtext3d,150,150,150);
			ObjText_SetFontBorderType(objtext3d,BORDER_FULL);
			ObjText_SetFontBorderWidth(objtext3d,1);
			ObjText_SetFontBorderColor(objtext3d,0,0,0);
			ObjText_SetHorizontalAlignment(objtext3d,ALIGNMENT_RIGHT);
			ObjText_SetMaxWidth(objtext3d,200);
			Obj_SetRenderPriorityI(objtext3d,70);
			}

			loop(20) {
				ObjRender_SetPosition(objtext3a,GetStgFrameWidth/2-70,y2,0);
				ObjRender_SetPosition(objtext3b,GetStgFrameWidth/2-52,y2,0);
				ObjRender_SetPosition(objtext3c,GetStgFrameWidth/2-42,y2,0);
				ObjRender_SetPosition(objtext3d,GetStgFrameWidth/2-26,y2,0);
				ObjRender_SetAlpha(objtext3a,a);
				ObjRender_SetAlpha(objtext3b,a);
				ObjRender_SetAlpha(objtext3c,a);
				ObjRender_SetAlpha(objtext3d,a);
				yield;
			}
			loop(45) {
				yield;
			}
			if(GetAreaCommonData("Options","LifeBar",true)) {
				SetMovePosition01(objtext3a,GetStgFrameWidth/2-70,45,6,9);
				SetMovePosition01(objtext3b,GetStgFrameWidth/2-52,45,6,9);
				SetMovePosition01(objtext3c,GetStgFrameWidth/2-42,45,6,9);
				SetMovePosition01(objtext3d,GetStgFrameWidth/2-26,45,6,9);
			}
			else {
				SetMovePosition01(objtext3a,GetStgFrameWidth/2-70,45+7,6,9);
				SetMovePosition01(objtext3b,GetStgFrameWidth/2-52,45+7,6,9);
				SetMovePosition01(objtext3c,GetStgFrameWidth/2-42,45+7,6,9);
				SetMovePosition01(objtext3d,GetStgFrameWidth/2-26,45+7,6,9);
			}
			while(!Obj_IsDeleted(objEnemy)) {
				// ObjRender_SetY(objtext3a,y2);
				// ObjRender_SetY(objtext3b,y2);
				// ObjRender_SetY(objtext3c,y2);
				// ObjRender_SetY(objtext3d,y2);
				ObjRender_SetAlpha(objtext3a,a2);
				ObjRender_SetAlpha(objtext3b,a2);
				ObjRender_SetAlpha(objtext3c,a2);
				ObjRender_SetAlpha(objtext3d,a2);
				//yif(y2>45) { y2-=365/60; }
				yield;
			}
			loop(20) {
				ObjRender_SetX(objtext3a,ObjRender_GetX(objtext3a)+15);
				ObjRender_SetX(objtext3b,ObjRender_GetX(objtext3b)+15);
				ObjRender_SetX(objtext3c,ObjRender_GetX(objtext3c)+15);
				ObjRender_SetX(objtext3d,ObjRender_GetX(objtext3d)+15);
				yield;
			}
			Obj_Delete(objtext3a);
			Obj_Delete(objtext3b);
			Obj_Delete(objtext3c);
			Obj_Delete(objtext3d);
		}
	}
}
task BonusFailed {
	RenderBonusText01("BonusFailed",98,15,-1);
	RenderBonusText01("BonusFailed",98,15,1);
}
task Extend {
	while(IsBonusText) { yield; }
	IsBonusText = true;
	RenderBonusText01("Extend",70,15,-1);
	RenderBonusText01("Extend",70,15,1);
	wait(15);
	RenderBonusText02("Extend",70,25);
	wait(160);
	IsBonusText = false;
}
task GetSpell {
	while(IsBonusText) { yield; }
	IsBonusText = true;
	RenderBonusText01("GetSpell",70,15,-1);
	RenderBonusText01("GetSpell",70,15,1);
	wait(15);
	RenderBonusText02("GetSpell",70,25);
	wait(160);
	IsBonusText = false;
}
task MaxBalance {
	while(IsBonusText) { yield; }
	IsBonusText = true;
	RenderBonusText01("MaxBalance",70,15,-1);
	RenderBonusText01("MaxBalance",70,15,1);
	wait(15);
	RenderBonusText02("MaxBalance",70,25);
	wait(160);
	IsBonusText = false;
}
task FullPowerUp {
	while(IsBonusText) { yield; }
	IsBonusText = true;
	RenderBonusText01("FullPower",70,15,-1);
	RenderBonusText01("FullPower",70,15,1);
	wait(15);
	RenderBonusText02("FullPower",70,25);
	wait(160);
	IsBonusText = false;
}
task EncoreChance {
	RenderBonusText01("EncoreChance",100,15,-1);
	RenderBonusText01("EncoreChance",100,15,1);
	wait(15);
	RenderBonusText02("EncoreChance",100,25);
	DiscordIcon;
}
task DiscordIcon {
	let objIcon = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objIcon,MD ~ "System/IMG/DiscordReady_Icon.png");
	Obj_SetRenderPriorityI(objIcon, 79);
	ObjRender_SetBlendType(objIcon,BLEND_ALPHA);
	ObjSprite2D_SetSourceRect(objIcon,0,0,256,256);
	ObjSprite2D_SetDestCenter(objIcon);

	let objIcon2 = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objIcon2,MD ~ "System/IMG/DiscordReady_Icon.png");
	Obj_SetRenderPriorityI(objIcon2, 79);
	ObjRender_SetBlendType(objIcon,BLEND_ADD_ARGB);
	ObjSprite2D_SetSourceRect(objIcon2,0,0,256,256);
	ObjSprite2D_SetDestCenter(objIcon2);

	ObjRender_SetPosition(objIcon,GetStgFrameWidth/2,GetStgFrameHeight/2-120,0);
	ObjRender_SetPosition(objIcon2,GetStgFrameWidth/2,GetStgFrameHeight/2-120,0);
	ObjRender_SetScaleXYZ(objIcon,0.7,0.7,0.7);
	ObjRender_SetScaleXYZ(objIcon2,0.7,0.7,0.7);


	let alpha = 0;
	let count = 0;

	loop(120) {
		if(GetCommonData("Discord",false)) { break; }
		if(alpha<170) { alpha+=170/8; }
		if(count>8) {
			if(count%8 > 4) { alpha = 170; }
			else { alpha = 255; }
		}
		ObjRender_SetAlpha(objIcon,215*(alpha/255));
		ObjRender_SetColor(objIcon2, alpha, alpha, alpha);
		ObjRender_SetAlpha(objIcon2, alpha);
		count++;
		yield;
	}
	alpha = 255;
	loop(30) {
		alpha-=255/30;
		ObjRender_SetAlpha(objIcon,alpha);
		ObjRender_SetAlpha(objIcon2,alpha);
		yield;
	}

}
task RenderBonusText01(type,y,frames,offset) {
	let path = GetCurrentScriptDirectory ~ "IMG/system.png";
	let objText = ObjPrim_Create(OBJ_SPRITE_2D);

	let maxscale = 2;
	let scale = 0;
	let alpha = 0;
	let x_max = 50;
	let x = 0;

	ObjPrim_SetTexture(objText, path);
	Obj_SetRenderPriorityI(objText, 80);

	if(type=="Extend") { ObjSprite2D_SetSourceRect(objText, 0, 234, 256, 260); }
	if(type=="GetSpell") { ObjSprite2D_SetSourceRect(objText, 0, 265, 256, 295); }
	if(type=="MaxBalance") { ObjSprite2D_SetSourceRect(objText, 0, 133, 256, 167); }
	if(type=="SpellBonus") { ObjSprite2D_SetSourceRect(objText, 0, 97, 256, 135); }
	if(type=="BonusFailed") { ObjSprite2D_SetSourceRect(objText, 0, 329, 256, 361); }
	if(type=="FullPower") { ObjSprite2D_SetSourceRect(objText, 0, 168, 256, 198); }
	if(type=="DiscordBonus") { ObjSprite2D_SetSourceRect(objText, 0, 201, 256, 232); }
	if(type=="StageClear") { ObjSprite2D_SetSourceRect(objText, 0, 297, 256, 327); }
	if(type=="EncoreChance") { ObjSprite2D_SetSourceRect(objText, 0, 361, 256, 391); }
	ObjSprite2D_SetDestCenter(objText);


	ascent(i in 1..frames+1){
		alpha+=130/frames;
		scale = maxscale - scale*sin(90*i/frames);
		x = x_max - x_max*sin(90*i/frames);
		ObjRender_SetPosition(objText, GetStgFrameWidth/2+x*offset, y, 0);
		ObjRender_SetScaleXYZ(objText, scale, scale, scale);
		ObjRender_SetAlpha(objText, alpha);
		yield;
	}

	loop(150-frames){
		alpha+=125/5;
		ObjRender_SetAlpha(objText, alpha);
		yield;
	}

	loop(25){
		ObjRender_SetScaleXYZ(objText, 1, scale, 1);
		scale-=1/25;
		yield;
	}
	Obj_Delete(objText);
}
task RenderBonusText02(type,y,frames) {
	let path = GetCurrentScriptDirectory ~ "IMG/system.png";
	let objText = ObjPrim_Create(OBJ_SPRITE_2D);

	let maxscale = 2;
	let scale = 1;
	let alpha = 150;

	ObjPrim_SetTexture(objText, path);
	Obj_SetRenderPriorityI(objText, 80);

	if(type=="Extend") { ObjSprite2D_SetSourceRect(objText, 0, 234, 256, 260); }
	if(type=="GetSpell") { ObjSprite2D_SetSourceRect(objText, 0, 265, 256, 295); }
	if(type=="MaxBalance") { ObjSprite2D_SetSourceRect(objText, 0, 133, 256, 167); }
	if(type=="SpellBonus") { ObjSprite2D_SetSourceRect(objText, 0, 97, 256, 135); }
	if(type=="BonusFailed") { ObjSprite2D_SetSourceRect(objText, 0, 329, 256, 361); }
	if(type=="FullPower") { ObjSprite2D_SetSourceRect(objText, 0, 168, 256, 198); }
	if(type=="DiscordBonus") { ObjSprite2D_SetSourceRect(objText, 0, 201, 256, 232); }
	if(type=="StageClear") { ObjSprite2D_SetSourceRect(objText, 0, 297, 256, 327); }
	if(type=="EncoreChance") { ObjSprite2D_SetSourceRect(objText, 0, 361, 256, 391); }

	ObjSprite2D_SetDestCenter(objText);

	ascent(i in 1..frames+1){
		alpha-=150/frames;
		scale = 1 + (maxscale-1)*sin(90*i/frames);
		ObjRender_SetPosition(objText, GetStgFrameWidth/2, y, 0);
		ObjRender_SetScaleXYZ(objText, scale, scale, scale);
		ObjRender_SetAlpha(objText, alpha);
		yield;
	}
	Obj_Delete(objText);
}
function ConvertColorRGB(color) { // String to RGB
	let CircleColor = [];
	alternative(color)
	case("White") { CircleColor = [255,255,255]; }
	case("Red") { CircleColor = [255,96,96]; }
	case("Orange") { CircleColor = [255,128,64]; }
	case("Yellow") { CircleColor = [255,255,96]; }
	case("Swamp") { CircleColor = [128,255,64]; }
	case("Green") { CircleColor = [96,255,96]; }
	case("Spring") { CircleColor = [64,255,128]; }
	case("Aqua") { CircleColor = [96,255,255]; }
	case("Azure") { CircleColor = [64,128,255]; }
	case("Blue") { CircleColor = [96,96,255]; }
	case("Purple") { CircleColor = [128,64,255]; }
	case("Magenta") { CircleColor = [255,96,255]; }
	case("Pink") { CircleColor = [255,64,128]; }
	return CircleColor;
}
function ConvertColorString(color) { //RGB to String
	let CircleColor = "Red";
	alternative(color)
	case([255,255,255]) { CircleColor = "White"; }
	case([255,96,96]) { CircleColor = "Red"; }
	case([255,128,64]) { CircleColor = "Orange"; }
	case([255,255,96]) { CircleColor = "Yellow"; }
	case([128,255,64]) { CircleColor = "Swamp"; }
	case([96,255,96]) { CircleColor = "Green"; }
	case([64,255,128]) { CircleColor = "Spring"; }
	case([96,255,255]) { CircleColor = "Aqua"; }
	case([64,128,255]) { CircleColor = "Azure"; }
	case([96,96,255]) { CircleColor = "Blue"; }
	case([128,64,255]) { CircleColor = "Purple"; }
	case([255,96,255]) { CircleColor = "Magenta"; }
	case([255,64,128]) { CircleColor = "Pink"; }
	return CircleColor;
}
task AlertZone01(num,x,y,dir,frames) { //num must be 2,3,4,or 5
	let disp = 0;
	let num1 = 0;
	let num2 = 0;

	if(num == 2) { num1 = 0; num2 = 0; }
	else if(num == 3) { num1 = 1; num2 = 0; }
	else if(num == 4) { num1 = 1; num2 = 1; }
	else if(num == 5) { num1 = 2; num2 = 1; }
	else { RaiseError("AlertZone01: num must be between 2 and 5"); }
	AlertSound;
	loop(9) {
		disp = 1;
		Alert(x,y,dir,frames);
		loop(num1) {
			Alert(x+70*disp*cos(dir-90),y+70*disp*sin(dir-90),dir,frames);
			Alert(x+70*disp*cos(dir+90),y+70*disp*sin(dir+90),dir,frames);
			disp++;
		}
		wait(2);
		x+=35*cos(dir);
		y+=35*sin(dir);
		disp = 1;
		Alert(x+35*cos(dir-90),y+35*sin(dir-90),dir,frames);
		Alert(x+35*cos(dir+90),y+35*sin(dir+90),dir,frames);
		loop(num2) {
			Alert(x+35*cos(dir-90)*disp+70*cos(dir-90)*disp,y+35*sin(dir-90)+70*sin(dir-90)*disp,dir,frames);
			Alert(x+35*cos(dir+90)*disp+70*cos(dir+90)*disp,y+35*sin(dir+90)+70*sin(dir+90)*disp,dir,frames);
			disp++;
		}
		wait(2);
		x+=35*cos(dir);
		y+=35*sin(dir);
	}
	task AlertSound {
		loop(5) {
			PlaySoundEffect("alert",100);
			wait(8);
		}
	}
}
task AlertZone02(num,x,y,frames) {
	AlertSound;
	Alert(x,y,0,frames);
	if(num>1) {
		Alert(x+35,y+35,0,frames);
		Alert(x+35,y-35,0,frames);
		Alert(x-35,y+35,0,frames);
		Alert(x-35,y-35,0,frames);
	}
	wait(3);
	if(num>2) {
		Alert(x+70,y,0,frames);
		Alert(x-70,y,0,frames);
		Alert(x,y+70,0,frames);
		Alert(x,y-70,0,frames);
	}
	wait(3);
	if(num>3) {
		Alert(x+70,y+70,0,frames);
		Alert(x+70,y-70,0,frames);
		Alert(x-70,y+70,0,frames);
		Alert(x-70,y-70,0,frames);
	}
	wait(3);
	//if(num>4) {
	//	Alert(x+105,y,0,frames);
	//	Alert(x-105,y,0,frames);
	//	Alert(x,y+105,0,frames);
	//	Alert(x,y-105,0,frames);
	//}
	task AlertSound {
		loop(5) {
			PlaySoundEffect("alert",100);
			wait(8);
		}
	}
}
task AlertZone03(num_width,num_length,x,y,dir,frames) { //num must be 2,3,4,or 5
	let disp = 0;
	let num1 = 0;
	let num2 = 0;

	if(num_width == 2) { num1 = 0; num2 = 0; }
	else if(num_width == 3) { num1 = 1; num2 = 0; }
	else if(num_width == 4) { num1 = 1; num2 = 1; }
	else if(num_width == 5) { num1 = 2; num2 = 1; }
	else { RaiseError("AlertZone03: num_width must be 2, 3, 4, or 5"); }
	AlertSound;
	loop(num_length) {
		disp = 1;
		Alert(x,y,dir,frames);
		loop(num1) {
			Alert(x+70*disp*cos(dir-90),y+70*disp*sin(dir-90),dir,frames);
			Alert(x+70*disp*cos(dir+90),y+70*disp*sin(dir+90),dir,frames);
			disp++;
		}
		wait(2);
		x+=35*cos(dir);
		y+=35*sin(dir);
		disp = 1;
		Alert(x+35*cos(dir-90),y+35*sin(dir-90),dir,frames);
		Alert(x+35*cos(dir+90),y+35*sin(dir+90),dir,frames);
		loop(num2) {
			Alert(x+35*cos(dir-90)*disp+70*cos(dir-90)*disp,y+35*sin(dir-90)+70*sin(dir-90)*disp,dir,frames);
			Alert(x+35*cos(dir+90)*disp+70*cos(dir+90)*disp,y+35*sin(dir+90)+70*sin(dir+90)*disp,dir,frames);
			disp++;
		}
		wait(2);
		x+=35*cos(dir);
		y+=35*sin(dir);
	}
	task AlertSound {
		loop(5) {
			PlaySoundEffect("alert",100);
			wait(8);
		}
	}
}
task BossEffects(ID,aura,life,circle,shadow) {
	if(aura) { Aura(ID); }
	if(life) { BossLife(ID); }
	if(circle) { BossMagicCircle(ID); }
	if(shadow) { BossShadow(ID); }
	let scalemod = Obj_GetValueD(ID,"Boss Effect Scale",1);
	function Aura(objEnemy) {
		loop(1) { yield; }
		let effect = GetCurrentScriptDirectory ~ "IMG/Aura.png";
		let scalecounter = 1.5;
		let RED = 0;
		let GREEN = 0;
		let BLUE = 0;
		AuraA;

		task AuraA {
			yield;
			loop(6){
				AuraA;

				loop(2) { yield; }
				AuraB;
				loop(2) { yield; }
			}

			task AuraA {
				let scale_0 = 4;
				let scale = scale_0;
				let scale_d = -3.5/20;
				let color = [0, 0, 0];
				let color_r_d = 224/20;
				let color_gb = 150;
				let color_gb_ang = 0;
				let color_gb_ang_d = 90/20;

				let obj = ObjPrim_Create(OBJ_SPRITE_2D);

				ObjPrim_SetTexture(obj, effect);
				ObjRender_SetBlendType(obj, BLEND_ADD_RGB);
				Obj_SetRenderPriorityI(obj, 36);
				ObjRender_SetAngleXYZ(obj, 0, 0, randEff(0,360));
				ObjRender_SetScaleXYZ(obj, scale*scalemod, scale*scalecounter*scalemod, scale*scalemod);
				ObjSprite2D_SetSourceRect(obj, 0, 0, 50, 50);
				ObjSprite2D_SetDestCenter(obj);

				while(!Obj_IsDeleted(objEnemy)){
					if(!Obj_IsDeleted(objEnemy)) {
						RED = Obj_GetValueD(objEnemy,"Aura Color",[100,100,100])[0];
						GREEN = Obj_GetValueD(objEnemy,"Aura Color",[100,100,100])[1];
						BLUE = Obj_GetValueD(objEnemy,"Aura Color",[100,100,100])[2];
					}
					loop(29){
						scale += scale_d;
						color_gb_ang += color_gb_ang_d;

						color[0] = color_gb * sin(color_gb_ang)^RED;
						color[1] = color_gb * sin(color_gb_ang)^GREEN;
						color[2] = color_gb * sin(color_gb_ang)^BLUE;

						ObjRender_SetColor(obj, color[0], color[1], color[2]);
						ObjRender_SetScaleXYZ(obj, scale*scalemod, scale*scalecounter*scalemod, scale*scalemod);
						if(!Obj_IsDeleted(objEnemy)) { ObjRender_SetPosition(obj, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0); }
						else { break; }
						yield;
					}
					scale = scale_0;
					color_gb_ang = 0;
					color = [0, 0, 0];

					ObjRender_SetColor(obj, color[0], color[1], color[2]);

					ObjRender_SetScaleXYZ(obj, scale*scalemod, scale*scalecounter*scalemod, scale*scalemod);
					ObjRender_SetAngleXYZ(obj, 0, 0, randEff(0,360));
					ObjRender_SetPosition(obj, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);

					yield;
				}
				Obj_Delete(obj);
			}
			task AuraB {
				let scale_0 = 4;
				let scale = scale_0;
				let scale_d = -3.5/20;
				let color = [0, 0, 0];
				let color_r_d = 224/20;
				let color_gb = 150;
				let color_gb_ang = 0;
				let color_gb_ang_d = 90/20;

				let obj = ObjPrim_Create(OBJ_SPRITE_2D);

				ObjPrim_SetTexture(obj, effect);
				ObjRender_SetBlendType(obj, BLEND_SUBTRACT);
				Obj_SetRenderPriorityI(obj, 36);
				ObjRender_SetAngleXYZ(obj, 0, 0, randEff(0,360));
				ObjRender_SetScaleXYZ(obj, scale*scalemod, scale*scalecounter*scalemod, scale*scalemod);
				ObjSprite2D_SetSourceRect(obj, 0, 0, 50, 50);
				ObjSprite2D_SetDestCenter(obj);

				while(!Obj_IsDeleted(objEnemy)){
					if(!Obj_IsDeleted(objEnemy)) {
						RED = Obj_GetValueD(objEnemy,"Aura Color",[100,100,100])[0];
						GREEN = Obj_GetValueD(objEnemy,"Aura Color",[100,100,100])[1];
						BLUE = Obj_GetValueD(objEnemy,"Aura Color",[100,100,100])[2];
					}
					loop(19){
						scale += scale_d;
						color_gb_ang += color_gb_ang_d;

						color[0] = color_gb * sin(color_gb_ang)^RED;
						color[1] = color_gb * sin(color_gb_ang)^GREEN;
						color[2] = color_gb * sin(color_gb_ang)^BLUE;

						ObjRender_SetColor(obj, color[0]*0.5, color[1]*0.5, color[2]*0.5);
						ObjRender_SetScaleXYZ(obj, scale*scalemod, scale*scalecounter*scalemod, scale*scalemod);
						if(!Obj_IsDeleted(objEnemy)) { ObjRender_SetPosition(obj, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0); }
						else { break; }
						yield;
					}
					scale = scale_0;
					color_gb_ang = 0;
					color = [0, 0, 0];

					ObjRender_SetColor(obj, color[0], color[1], color[2]);

					ObjRender_SetScaleXYZ(obj, scale*scalemod, scale*scalecounter*scalemod, scale*scalemod);
					ObjRender_SetAngleXYZ(obj, 0, 0, randEff(0,360));
					ObjRender_SetPosition(obj, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);

					yield;
				}
				Obj_Delete(obj);
			}
		}
	}
	task BossLife(objEnemy) {
		let path = MD ~ "System/IMG/lifebar.png";
		let countVertex = 64;

		loop(2) { yield; }
		// let objStar = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
		// ObjPrim_SetTexture(objStar,path);
		// Obj_SetRenderPriority(objStar, 0.7);
		// ObjSpriteList2D_SetSourceRect(objStar, 17, 2, 30, 14);

		let objOutline = ObjPrim_Create(OBJ_PRIMITIVE_2D);
		ObjPrim_SetPrimitiveType(objOutline, PRIMITIVE_TRIANGLESTRIP);
		ObjPrim_SetVertexCount(objOutline, countVertex);
		ObjRender_SetBlendType(objOutline, BLEND_ALPHA);
		Obj_SetRenderPriority(objOutline, 0.69);
		ObjPrim_SetTexture(objOutline, path);

		let objLife = ObjPrim_Create(OBJ_PRIMITIVE_2D);
		ObjPrim_SetPrimitiveType(objLife, PRIMITIVE_TRIANGLESTRIP);
		ObjPrim_SetVertexCount(objLife, countVertex);
		ObjRender_SetBlendType(objLife, BLEND_ALPHA);
		Obj_SetRenderPriority(objLife, 0.68);
		ObjPrim_SetTexture(objLife, path);

		let objLife2 = ObjPrim_Create(OBJ_PRIMITIVE_2D);
		ObjPrim_SetPrimitiveType(objLife2, PRIMITIVE_TRIANGLESTRIP);
		ObjPrim_SetVertexCount(objLife2, countVertex);
		ObjRender_SetBlendType(objLife2, BLEND_ALPHA);
		Obj_SetRenderPriority(objLife2, 0.68);
		ObjPrim_SetTexture(objLife2, path);

		let objScene = GetEnemyBossSceneObjectID;
		let alpha = 0;
		let alpha2 = 0;
		let delaycount = 0;
		let LifeRatio = 0;
		let expand = 0;
		let angle = 0;
		let r1 = 58;
		let r2 = 62;
		let StartLife = ObjEnemy_GetInfo(objEnemy,INFO_LIFE);

		// CreateStepInd;

		ascent (iVert in 0..countVertex/2){
			let vertex = iVert * 2;
			ObjPrim_SetVertexUVT(objOutline, vertex+0, 0, 0);
			ObjPrim_SetVertexUVT(objOutline, vertex+1, 4, 16);
			ObjPrim_SetVertexUVT(objLife, vertex+0, 7, 0);
			ObjPrim_SetVertexUVT(objLife, vertex+1, 10, 16);
			ObjPrim_SetVertexUVT(objLife2, vertex+0, 7, 0);
			ObjPrim_SetVertexUVT(objLife2, vertex+1, 10, 16);
		}

		ObjRender_SetScaleXYZ(objOutline, -1.0, 1.0, 1.0);
		ObjRender_SetScaleXYZ(objLife, -1.0, 1.0, 1.0);
		ObjRender_SetScaleXYZ(objLife2, -1.0, 1.0, 1.0);

		while(!Obj_IsDeleted(objEnemy)) {

			//if(GetCommonData("Lifebar Delay",false)) {
			//	Obj_SetVisible(objOutline, false);
			//	Obj_SetVisible(objLife, false);
			//	Obj_SetVisible(objLife2, false);
			//}
			//else {
				//Obj_SetVisible(objOutline, true);
				//Obj_SetVisible(objLife, true);
				//Obj_SetVisible(objLife2, true);
			//}

			ObjRender_SetPosition(objOutline, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), 0);
			ObjRender_SetPosition(objLife, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), 0);
			ObjRender_SetPosition(objLife2, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), 0);

			if(alpha2<255 && GetPlayerY>=115) { alpha2+=255/30; }
			if(alpha2>150 && GetPlayerY<115) { alpha2-=255/30; }
			// ObjRender_SetAlpha(objStar,alpha2);

			// ObjSpriteList2D_ClearVertexCount(objStar);
			// ascent(i in 0..ObjEnemyBossScene_GetInfo(objScene,INFO_REMAIN_STEP_COUNT)) {
				// ObjSpriteList2D_SetDestRect(objStar, 4+i*12, 16, 4+(i+1)*12, 28);
				// ObjSpriteList2D_AddVertex(objStar);
			// }

			ascent (i in 0..countVertex/2){
				let index = i * 2;
				angle = (360 / (countVertex/2 - 1) * i);
				ObjPrim_SetVertexPosition(objLife, index + 0 , r1*cos(angle-90), r1*sin(angle-90), 0);
				ObjPrim_SetVertexPosition(objLife, index + 1 , (r1+1.5)*cos(angle-90), (r1+1.5)*sin(angle-90), 0);
				angle = (360 / (countVertex/2 - 1) * i);
				ObjPrim_SetVertexPosition(objLife2, index + 0 , r2*cos(angle-90), r2*sin(angle-90), 0);
				ObjPrim_SetVertexPosition(objLife2, index + 1 , (r2+1.5)*cos(angle-90), (r2+1.5)*sin(angle-90), 0);
				angle = min(360*(LifeRatio), angle);
				ObjPrim_SetVertexPosition(objOutline, index + 0 , r2*cos(angle-90), r2*sin(angle-90), 0);
				ObjPrim_SetVertexPosition(objOutline, index + 1 , r1*cos(angle-90), r1*sin(angle-90), 0);
			}
			if(expand<1 && delaycount>=45) { expand+=1/50; }
			if(delaycount>=100 && delaycount<120) { alpha+=255/20; }
			LifeRatio = ObjEnemy_GetInfo(objEnemy,INFO_LIFE)/StartLife*expand;
			delaycount++;

			// if(ObjEnemyBossScene_GetInfo(objScene,INFO_ACTIVE_STEP_TOTAL_LIFE)<=0) {
				// expand = 0;
				// delaycount = 0;
				// alpha = 0;
				// loop(2) { yield; }
				// CreateStepInd;
			// }


			yield;
		}
		Obj_Delete(objOutline);
		Obj_Delete(objLife);
		Obj_Delete(objLife2);

		// task CreateStepInd {
			// let listLifeDiv = ObjEnemyBossScene_GetInfo(objScene, INFO_ACTIVE_STEP_LIFE_RATE_LIST);
			// ascent(i in 0 .. length(listLifeDiv)-1){
				// let rate = listLifeDiv[i];
				// let angle = 360*(rate);
				// Separator(angle, rate);
			// }
			// task Separator(angle, rate){
				// let obj = ObjPrim_Create(OBJ_SPRITE_2D);
				// ObjRender_SetBlendType(obj, BLEND_ALPHA);
				// Obj_SetRenderPriority(obj, 0.69);
				// ObjPrim_SetTexture(obj, path);
				// ObjSprite2D_SetSourceRect(obj, 10, 0, 15, 8);
				// ObjSprite2D_SetDestCenter(obj);
				// ObjRender_SetScaleXYZ(obj, 1.3, 1.3, 1);
				// ObjRender_SetPosition(obj, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), 0);
				// ObjRender_SetAngleZ(obj, angle);
				// yield;
				// let life = ObjEnemyBossScene_GetInfo(objScene,INFO_ACTIVE_STEP_TOTAL_LIFE)/ObjEnemyBossScene_GetInfo(objScene,INFO_ACTIVE_STEP_TOTAL_MAX_LIFE);
				// while(1-rate<life-0.000001){
					// life = ObjEnemyBossScene_GetInfo(objScene,INFO_ACTIVE_STEP_TOTAL_LIFE)/ObjEnemyBossScene_GetInfo(objScene,INFO_ACTIVE_STEP_TOTAL_MAX_LIFE);
					// ObjRender_SetPosition(obj, ObjRender_GetX(objEnemy)+(r1-1)*cos(angle-90), ObjRender_GetY(objEnemy)+(r1-1)*sin(angle-90), 0);
					// ObjRender_SetAlpha(obj, alpha);
					// if(GetCommonData("DurableSpell",false)) { Obj_SetVisible(obj, false); } else { Obj_SetVisible(obj, true); }
					// yield;
				// }
				// Obj_Delete(obj);
			// }
		// }
	}
	task BossMagicCircle(objEnemy) {
		loop(2) { yield; }
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
		Obj_SetRenderPriorityI(obj, 37);
		ObjPrim_SetTexture(obj, CSD ~ "IMG/MC_Red.png");
		ObjSprite2D_SetSourceRect(obj, 0, 0, 512, 512);
		ObjSprite2D_SetDestCenter(obj);

		let objScene = GetEnemyBossSceneObjectID;
		let t = 15;
		let scale = 0;
		let maxscale = 0.35;
		let spin = 0;
		let dspin = 0;
		let spinDist = 0;
		let alpha = 0;
		let color = Obj_GetValueD(objEnemy,"Circle Color","Red");

		ascent(i in 0..45) {
			ObjRender_SetPosition(obj, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), 0);

			alpha = 230*sin(90*i/45);
			dspin = 8*cos(90*i/45);
			scale = 0.3*sin(90*i/45)+0.7;
			color = Obj_GetValueD(objEnemy,"Circle Color","Red");

			ObjPrim_SetTexture(obj, CSD ~ "IMG/MC_" ~color~ ".png");
			ObjRender_SetAngleXYZ(obj, 0, 0, spin);
			ObjRender_SetScaleXYZ(obj, scale*maxscale, scale*maxscale, 1);
			ObjRender_SetColor(obj, alpha, alpha, alpha);
			maxscale+=0.005*sin(3*t);
			t++;
			spin+=dspin;
			yield;
		}
		scale = 1;
		while(!Obj_IsDeleted(objEnemy)) {
			ObjRender_SetPosition(obj, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), 0);
			ObjPrim_SetTexture(obj, CSD ~ "IMG/MC_" ~color~ ".png");
			ObjRender_SetAngleXYZ(obj, 0, 0, spin);
			ObjRender_SetScaleXYZ(obj, scale*maxscale, scale*maxscale, 1);
			ObjRender_SetColor(obj, alpha, alpha, alpha);
			color = Obj_GetValueD(objEnemy,"Circle Color","Red");
			maxscale+=0.005*sin(3*t);
			spin+=dspin;
			if(GetDistance(ObjRender_GetX(objEnemy),ObjRender_GetY(objEnemy),GetPlayerX,GetPlayerY)<=145) {
				if(alpha>128) { alpha-=128/15; }
			}
			else {
				if(alpha<230) { alpha+=128/15; }
			}
			if(dspin<5) { dspin+=5/30; }
			t++;
			yield;
		}
		Obj_Delete(obj);
	}
	task BossShadow(objEnemy) {
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(obj, CSD ~ "IMG/shadow.png");
		Obj_SetRenderPriorityI(obj, 1);
		ObjSprite2D_SetSourceRect(obj, 0, 0, 64, 16);
		ObjSprite2D_SetDestCenter(obj);
		ObjRender_SetY(obj, GetStgFrameHeight+24);

		let objScene = GetEnemyBossSceneObjectID;
		let alpha = 0;
		let alphamod = 0;

		let initbosshp = ObjEnemy_GetInfo(objEnemy, INFO_LIFE);
		let bosshp = initbosshp;

		while(!Obj_IsDeleted(objEnemy)) {
			if(ObjMove_GetX(objEnemy)>-32+GetStgFrameLeft && ObjMove_GetX(objEnemy)<GetStgFrameWidth+GetStgFrameLeft){
			ObjRender_SetX(obj,ObjMove_GetX(objEnemy)+GetStgFrameLeft);
			}

			bosshp = ObjEnemy_GetInfo(objEnemy, INFO_LIFE);
			alpha = 150-75*cos(alphamod);
			alphamod+=3.5+(((initbosshp-bosshp)/(initbosshp/4))^2); //the rate that alphamod increases at ranges from 3.5 to 14.81ish (3.5+4^1.75) based on this function
			ObjRender_SetAlpha(obj, alpha);
			yield;
		}
		Obj_Delete(obj);
	}
}
task SpellStarburst(obj,color) {
	loop(3) { SpellBurstB2(obj,1.5,90,color); }
	wait(16);
	loop(3) { Starburst(obj,color); }
}
task ExplosionA1(objEnemy,type,circlecolor,starcolor) {
	let x = randEff(-45,45);
	let y = randEff(-45,45);
	let z = randEff(-90,90);
	let dir = randEff(0,360);
	PlaySoundEffect("death",90);
	DefaultCircleA1(objEnemy,2.0,circlecolor,x,y,z);
	DefaultCircleA1(objEnemy,2.0,circlecolor,x,y+90,z);
	loop(3) {
		ExplodeObject01(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(2.0,3.2), dir+randEff(-10,10), [255,255,255]);
		ExplodeObject01(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(2.0,3.2), dir+randEff(-10,10), starcolor);
		dir+=360/3;
	}
	//ObjEnemy_SetLife(objEnemy, 0);
	//Obj_Delete(objEnemy);
}
task ExplosionA2(objEnemy,type,circlecolor,starcolor) {
	let x = randEff(-45,45);
	let y = randEff(-45,45);
	let z = randEff(-90,90);
	let dir = randEff(0,360);
	PlaySoundEffect("death",90);
	DefaultCircleA1(objEnemy,2.7,circlecolor,x,y,z);
	DefaultCircleA1(objEnemy,2.7,circlecolor,x,y+90,z);
	loop(6) {
		ExplodeObject01(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(2.4,3.8), dir+randEff(-10,10), [255,255,255]);
		ExplodeObject01(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(2.4,3.8), dir+randEff(-10,10), starcolor);
		dir+=360/6;
	}
	//ObjEnemy_SetLife(objEnemy, 0);
	//Obj_Delete(objEnemy);
}
task ExplosionA3(objEnemy,type,circlecolor,starcolor) {
	let x = randEff(-45,45);
	let y = randEff(-45,45);
	let z = randEff(-90,90);
	let dir = randEff(0,360);
	PlaySoundEffect("death",90);
	DefaultCircleA1(objEnemy,4.0,circlecolor,x,y,z);
	DefaultCircleA1(objEnemy,4.0,circlecolor,x,y+90,z);
	loop(12) {
		ExplodeObject01(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(3.4,5.3), dir+randEff(-10,10), [255,255,255]);
		ExplodeObject01(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(3.4,5.3), dir+randEff(-10,10), starcolor);
		dir+=360/12;
	}
	//ObjEnemy_SetLife(objEnemy, 0);
	//Obj_Delete(objEnemy);
}
task ExplosionB1(objEnemy,type,circlecolor,starcolor) {
	let angle = randEff(0,360);
	ObjEnemy_SetLife(objEnemy, 1);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	PlaySoundEffect("explode",85);
	if(Obj_GetType(objEnemy) == OBJ_ENEMY_BOSS) { ScreenShake(45,35); }
	DefaultCircleA1(objEnemy,3.0,circlecolor,0,0,0);
	loop(35) {
		ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(2,6), angle, [255,255,255]);
		angle+=360/70;
		ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(2,6), angle, starcolor);
		angle+=360/70;
	}
	ObjEnemy_SetLife(objEnemy, 0);
	Obj_Delete(objEnemy);
}
task ExplosionB2(objEnemy,type,circlecolor,starcolor) {
	SetCommonData("BossExploding", true);
	let angle = randEff(0,360);
	ObjEnemy_SetLife(objEnemy, 1);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	PlaySoundEffect("explode",85);
	DefaultCircleA1(objEnemy,3.0,circlecolor,0,0,0);
	ScreenShake(30,30);
	ObjMove_SetSpeed(objEnemy,0.3);
	ObjMove_SetAngle(objEnemy,195);
	loop(90/4) {
		ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(1.5,4.0), randEff(0,360), [255,255,255]);
		ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(1.5,4.0), randEff(0,360), starcolor);
		loop(4) { yield; }
	}
	PlaySoundEffect("explode",85);
	DefaultCircleA1(objEnemy,3.0,circlecolor,0,0,0);
	ScreenShake(90,50);
	loop(40) {
		ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(2,6), angle, [255,255,255]);
		angle+=360/80;
		ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(2,6), angle, starcolor);
		angle+=360/80;
	}
	SetCommonData("BossExploding", false);
	ObjEnemy_SetLife(objEnemy, 0);
	Obj_Delete(objEnemy);
	DeleteShotAll_EventVer(TYPE_ALL, TYPE_ITEM);
}
task ExplosionB3(objEnemy,type,circlecolor,starcolor) {
	SetCommonData("BossExploding", true);
	let angle = randEff(0,360);
	ObjEnemy_SetLife(objEnemy, 1);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	PlaySoundEffect("explode",85);
	ScreenShake(30,30);
	DefaultCircleA1(objEnemy,3.0,circlecolor,0,0,0);
	MSDEffectExplode(objEnemy, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), starcolor);
	loop(150/3) {
		ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(3.5,6.5), randEff(0,360), [255,255,255]);
		ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(3.5,6.5), randEff(0,360), starcolor);
		loop(3) { yield; }
	}
	PlaySoundEffect("explode",85);
	ScreenShake(90,50);
	loop(25) {
		ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(3.5,6.5), angle, [255,255,255]);
		angle+=360/50;
		ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(3.5,6.5), angle, starcolor);
		angle+=360/50;
	}
	SetCommonData("BossExploding", false);
	ObjEnemy_SetLife(objEnemy, 0);
	Obj_Delete(objEnemy);
	DeleteShotAll_EventVer(TYPE_ALL, TYPE_ITEM);
}
task ExplosionB4(objEnemy,type,circlecolor,starcolor) {
	let angle = randEff(0,360);
	ObjEnemy_SetLife(objEnemy, 1);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	PlaySoundEffect("explode",85);
	DefaultCircleA1(objEnemy,3.0,circlecolor,0,0,0);
	loop(75/3) {
		ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(3.5,6.5), randEff(0,360), [255,255,255]);
		ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(3.5,6.5), randEff(0,360), starcolor);
		loop(3) { yield; }
	}
	PlaySoundEffect("explode",85);
	ScreenShake(90,50);
	loop(35) {
		ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(2,6), angle, [255,255,255]);
		angle+=360/70;
		ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(2,6), angle, starcolor);
		angle+=360/70;
	}
	ObjEnemy_SetLife(objEnemy, 0);
	Obj_Delete(objEnemy);
}
task ExplosionRainbowB1(objEnemy,type) {
	let angle = randEff(0,360);
	let colors = [[255,0,0],[255,128,0],[255,255,0],[0,255,0],[0,0,255],[255,0,255]];
	ObjEnemy_SetLife(objEnemy, 1);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	PlaySoundEffect("explode",85);
	ScreenShake(30,30);
	DefaultCircleA1(objEnemy,3.0,[255,255,255],0,0,0);
	loop(6) {
		ascent(i in 0..6) {
			ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(2,6), angle, [255,255,255]);
			angle+=360/72;
			ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(2,6), angle, colors[i]);
			angle+=360/72;
		}
	}
	ObjEnemy_SetLife(objEnemy, 0);
	Obj_Delete(objEnemy);
}
task ExplosionRainbowB2(objEnemy,type) {
	let angle = randEff(0,360);
	let colors = [[255,0,0],[255,128,0],[255,255,0],[0,255,0],[0,0,255],[255,0,255]];
	ObjEnemy_SetLife(objEnemy, 1);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	PlaySoundEffect("explode",85);
	ScreenShake(30,30);
	DefaultCircleA1(objEnemy,3.0,[255,255,255],0,0,0);
	loop(90/4/6) {
		ascent(i in 0..6) {
			ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(1.5,4.0), randEff(0,360), [255,255,255]);
			ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(1.5,4.0), randEff(0,360), colors[i]);
			loop(4) { yield; }
		}
	}
	PlaySoundEffect("explode",85);
	ScreenShake(90,50);
	loop(8) {
		ascent(i in 0..6) {
			ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(2,6), angle, [255,255,255]);
			angle+=360/96;
			ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(2,6), angle, colors[i]);
			angle+=360/96;
		}
	}
	ObjEnemy_SetLife(objEnemy, 0);
	Obj_Delete(objEnemy);
	DeleteShotAll_EventVer(TYPE_ALL, TYPE_ITEM);
}
task ExplosionRainbowB3(objEnemy,type) {
	SetCommonData("BossExploding", true);
	let angle = randEff(0,360);
	let colors = [[255,0,0],[255,128,0],[255,255,0],[0,255,0],[0,0,255],[255,0,255]];
	ObjEnemy_SetLife(objEnemy, 1);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	PlaySoundEffect("explode",85);
	ScreenShake(30,30);
	DefaultCircleA1(objEnemy,3.0,[255,255,255],0,0,0);
	MSDEffectRainbowExplode(objEnemy, 144, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy));
	loop(12) {
		ascent(i in 0..6) {
			ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(3.5,6.5), randEff(0,360), [255,255,255]);
			ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(3.5,6.5), randEff(0,360), colors[i]);
			loop(2) { yield; }
		}
	}
	PlaySoundEffect("explode",85);
	ScreenShake(90,50);
	loop(4) {
		ascent(i in 0..6) {
			ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(3.5,6.5), angle, [255,255,255]);
			angle+=360/48;
			ExplodeObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(3.5,6.5), angle, colors[i]);
			angle+=360/48;
		}
	}
	ObjEnemy_SetLife(objEnemy, 0);
	Obj_Delete(objEnemy);
	DeleteShotAll_EventVer(TYPE_ALL, TYPE_ITEM);
	wait(90);
	PlaySoundEffect("explodefinal",80);
	SetCommonData("BossExploding", false);
}
task ConcentrationA1(objEnemy,type,duration,speed,radius,color) {
	let w = round(1/speed*10);
	SpawnCircle;
	loop(duration/w) {
		if(!Obj_IsDeleted(objEnemy)) {
			ConcObject01(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, randEff(0,360), -1, radius, [255,255,255], 180);
			ConcObject01(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, randEff(0,360), 1, radius, color, 180);
		}
		loop(w) { yield; }
	}
	task SpawnCircle {
	let count = 0;
		loop(duration-10) {
			count++;
			if(count==20 && !Obj_IsDeleted(objEnemy)) { ConcCircle01(ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, radius, color); count = 0; }
			yield;
		}
	}
}
task ConcentrationA2(objEnemy,type,duration,speed,radius,color) {
	let w = round(1/speed*10);
	MSDEffect(objEnemy,duration,color);
	loop(duration/w) {
		if(!Obj_IsDeleted(objEnemy)) {
			ConcObject01(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, randEff(0,360), -1, radius, [255,255,255], 180);
			ConcObject01(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, randEff(0,360), 1, radius, color, 180);
		}
		loop(w) { yield; }
	}
}
task ConcentrationA3(objEnemy,type,duration,speed,radius,color) {
	let w = round(1/speed*10);
	let angle = randEff(0,360);
	SpawnCircle;
	loop(duration/w) {
		if(!Obj_IsDeleted(objEnemy)) {
			ConcObject01(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, randEff(0,360), -1, radius, [255,255,255], 180);
			ConcObject01(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, randEff(0,360), 1, radius, color, 180);
		}
		loop(w) { yield; }
	}
	wait(20);
	if(!Obj_IsDeleted(objEnemy)) {	PlaySoundEffect("explode2",100); }
	loop(30) {
		if(!Obj_IsDeleted(objEnemy)) {
			ExplodeObject03(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(2,8), angle, [255,255,255]);
			angle+=360/60;
			ExplodeObject03(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), randEff(2,8), angle, color);
			angle+=360/60;
		}
	}
	task SpawnCircle {
		loop(duration-10) { yield; }
		if(!Obj_IsDeleted(objEnemy)) { ConcCircle01(ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, radius, color); }
		yield;
	}
}
task ConcentrationA4(objEnemy,type,speed,radius,color) {
	let w = round(1/speed*10);
	let angle = randEff(0,360);
	loop(5) {
		if(!Obj_IsDeleted(objEnemy)) {
			ConcObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, angle, -1, radius+randEff(-50,50), [255,255,255], 230);
			ConcObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, angle, 1, radius+randEff(-50,50), color, 230);
		}
		angle+=360/5;
	}
	wait(w+6);
	if(!Obj_IsDeleted(objEnemy)) { ConcCircle01(ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed*0.7, radius, color); }
	angle+=360/10;
	loop(4) {
		if(!Obj_IsDeleted(objEnemy)) {
			ConcObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, angle, -1, radius+randEff(-50,50), [255,255,255], 230);
			ConcObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, angle, 1, radius+randEff(-50,50), color, 230);
		}
		angle+=360/5;
	}
	wait(w+6);
	angle+=360/10;
	loop(4) {
		if(!Obj_IsDeleted(objEnemy)) {
			ConcObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, angle, -1, radius+randEff(-50,50), [255,255,255], 230);
			ConcObject02(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, angle, 1, radius+randEff(-50,50), color, 230);
		}
		angle+=360/5;
	}
}
task ConcentrationB1(objEnemy,duration,num,angle,rot,speed,layer,color) {
	let color2 = [];
	ascent(i in 0..length(color)) {
		color2 = color2 ~ [color[i]/2];
	}

	let objEffect = ObjPrim_Create(OBJ_SPRITE_LIST_2D);

	ObjRender_SetBlendType(objEffect,BLEND_SUBTRACT);
	Obj_SetRenderPriorityI(objEffect,layer);
	ObjPrim_SetTexture(objEffect, MD ~ "System/IMG/Effect/Light.png");
	ObjSpriteList2D_SetSourceRect(objEffect,0,0,64,64);
	ObjSpriteList2D_SetDestCenter(objEffect);

	ClearVertices;

	loop(duration) {
		//ObjSpriteList2D_ClearVertexCount(objEffect);
		if(!Obj_IsDeleted(objEnemy)) {
			loop(num) {
				DarkConcentration(objEnemy,objEffect,angle,(0.4+randEff(1.4,1.8))*rot,400+randEff(0,128),speed,layer,color);
				DarkConcentration(objEnemy,objEffect,angle+(360/num/2),randEff(1.4,1.8)*rot,400+randEff(0,128),speed,layer,color2);
				angle+=360/num;
			}
		}
		yield;
	}
	wait(150);
	Obj_Delete(objEffect);
	task ClearVertices {
		while(!Obj_IsDeleted(objEffect)) {
			ObjSpriteList2D_ClearVertexCount(objEffect);
			yield;
		}
	}
}
task ConcentrationB2(objEnemy,duration,num,angle,rot,speed,layer,color,color3) {
	let color2 = [];
	let color4 = [];
	ascent(i in 0..length(color)) {
		color2 = color2 ~ [color[i]/2];
	}
	ascent(i in 0..length(color3)) {
		color4 = color4 ~ [color3[i]/2];
	}

	let objEffect = ObjPrim_Create(OBJ_SPRITE_LIST_2D);

	ObjRender_SetBlendType(objEffect,BLEND_SUBTRACT);
	Obj_SetRenderPriorityI(objEffect,layer);
	ObjPrim_SetTexture(objEffect, MD ~ "System/IMG/Effect/Light.png");
	ObjSpriteList2D_SetSourceRect(objEffect,0,0,64,64);
	ObjSpriteList2D_SetDestCenter(objEffect);

	ClearVertices;

	loop(duration) {
		//ObjSpriteList2D_ClearVertexCount(objEffect);
		if(!Obj_IsDeleted(objEnemy)) {
			loop(num) {
				DarkConcentration(objEnemy,objEffect,angle,(0.4+randEff(0.4,0.6))*rot,400+randEff(0,128),speed,layer,color);
				DarkConcentration(objEnemy,objEffect,angle,randEff(0.4,0.6)*rot,400+randEff(0,128),speed,layer,color2);
				angle+=360/num*2;
				DarkConcentration(objEnemy,objEffect,angle,-(0.4+randEff(0.4,0.6))*rot,400+randEff(0,128),speed,layer,color3);
				DarkConcentration(objEnemy,objEffect,angle,-randEff(0.4,0.6)*rot,400+randEff(0,128),speed,layer,color4);
				angle+=360/num*2;
			}
		}
		yield;
	}
	wait(150);
	Obj_Delete(objEffect);
	task ClearVertices {
		while(!Obj_IsDeleted(objEffect)) {
			ObjSpriteList2D_ClearVertexCount(objEffect);
			yield;
		}
	}
}
task Darkness(objEnemy,duration,speed,color) {
	loop(duration/10) {
		DarknessParticle(objEnemy,speed,color);
		wait(10);
	}
}
task ConcentrationC1(objEnemy,duration,speed,radius,color) {
	let w = round(1/speed*10+3);
	//SpawnCircle;
	loop(duration/w) {
		if(!Obj_IsDeleted(objEnemy)) {
			ConcObject04(ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, randEff(0,360), -1, radius, [255,255,255], 180);
			ConcObject04(ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, randEff(0,360), 1, radius, color, 180);
		}
		loop(w) { yield; }
	}
	task SpawnCircle {
	let count = 0;
		loop(duration-10) {
			count++;
			if(count==20 && !Obj_IsDeleted(objEnemy)) { ConcCircle01(ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, radius, color); count = 0; }
			yield;
		}
	}
}
task ConcentrationRainbowA1(objEnemy,type,duration,speed,radius) {
	let angle = randEff(0,360);
	let w = round(1/speed*10);
	let colors = [[255,64,64],[255,128,64],[255,255,64],[64,255,64],[64,64,255],[64,64,255]];
	SpawnCircle;
	loop(duration/w/6) {
		ascent(i in 0..6) {
			if(!Obj_IsDeleted(objEnemy)) {
				ConcObject01(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, randEff(0,360), -1, radius, [255,255,255], 180);
				ConcObject01(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, randEff(0,360), 1, radius, colors[i], 180);
			}
			loop(w) { yield; }
		}
	}
	task SpawnCircle {
	let count = 0;
	let i = 0;
		loop(duration-10) {
			count++;
			if(count==20 && !Obj_IsDeleted(objEnemy)) {
				ConcCircle01(ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, radius, colors[i]);
				i++;
				count = 0;
			}
			if(i>6) { i = 0; }
			yield;
		}
	}
}
task ConcentrationRainbowA2(objEnemy,type,duration,speed,radius) {
	let angle = randEff(0,360);
	let w = round(1/speed*10);
	let colors = [[255,64,64],[255,128,64],[255,255,64],[64,255,64],[64,64,255],[64,64,255]];
	MSDEffectRainbow(duration,objEnemy);
	loop(duration/w/6) {
		ascent(i in 0..6) {
			if(!Obj_IsDeleted(objEnemy)) {
				ConcObject01(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, randEff(0,360), -1, radius, [255,255,255], 180);
				ConcObject01(type, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, randEff(0,360), 1, radius, colors[i], 180);
			}
			loop(w) { yield; }
		}
	}
}
task ConcentrationBinaryA1(objEnemy,duration,speed,radius,color) {
	let angle = rand(0,360);
	let w = 1/speed*10;
	SpawnCircle;
	loop(duration/w/2) {
		if(!Obj_IsDeleted(objEnemy)) {
			ConcBinary01(ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, rand(0,360), -1, radius, [255,255,255], 180);
			ConcBinary01(ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, rand(0,360), 1, radius, color, 180);
			yield;
			ConcBinary02(ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, rand(0,360), -1, radius, [255,255,255], 180);
			ConcBinary02(ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, rand(0,360), 1, radius, color, 180);
		}
		loop(w) { yield; }
	}
	task SpawnCircle {
	let count = 20;
		loop(duration) {
			if(count==20 && !Obj_IsDeleted(objEnemy)) { ConcCircle01(ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, radius, color); count = 0; }
			count++;
			yield;
		}
	}
}
task ConcentrationBinaryA2(objEnemy,duration,speed,radius,color) {
	let angle = rand(0,360);
	let w = 1/speed*10;
	MSDEffect(objEnemy,duration,color);
	loop(duration/w/2) {
		if(!Obj_IsDeleted(objEnemy)) {
			ConcBinary01(ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, rand(0,360), -1, radius, [255,255,255], 180);
			ConcBinary01(ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, rand(0,360), 1, radius, color, 180);
			yield;
			ConcBinary02(ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, rand(0,360), -1, radius, [255,255,255], 180);
			ConcBinary02(ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), speed, rand(0,360), 1, radius, color, 180);
		}
		loop(w) { yield; }
	}
}
task Alert(x,y,dir,frames) {
	let objEffect = ObjPrim_Create(OBJ_SPRITE_2D);

	ObjRender_SetBlendType(objEffect,BLEND_ALPHA);
	Obj_SetRenderPriorityI(objEffect,39);
	ObjPrim_SetTexture(objEffect, MD ~ "IMG/Enemy/Alert.png");
	ObjSprite2D_SetSourceRect(objEffect,0,0,256,256);
	ObjSprite2D_SetDestCenter(objEffect);
	ObjRender_SetPosition(objEffect,x,y,0);
	//ObjRender_SetScaleXYZ(objEffect,0.25,0.25,0.25);

	let t = 0;
	let alpha = 0;
	let basealpha = 0;
	let scale = 0.5;

	loop(frames) {
		if(basealpha<140) { basealpha+=140/10; }
		if(basealpha>=140) { t++; }
		alpha = basealpha + 60*sin(40*t);
		if(scale>0.25) { scale-=0.25/20; }
		ObjRender_SetAlpha(objEffect,alpha);
		ObjRender_SetScaleXYZ(objEffect,scale,scale,scale);
		if(dir>90) { ObjRender_SetAngleZ(objEffect,dir+180); }
		else { ObjRender_SetAngleZ(objEffect, dir); }
		yield;
	}
	basealpha = alpha;
	loop(20) {
		alpha-=basealpha/20;
		ObjRender_SetAlpha(objEffect,alpha);
		yield;
	}
	Obj_Delete(objEffect);
}
task SpellBurstA1(x,y,type,color) {
	let angle = randEff(0,360);
	loop(30) {
		ExplodeObject03(type, x, y, randEff(2,8), angle, [255,255,255]);
		angle+=360/60;
		ExplodeObject03(type, x, y, randEff(2,8), angle, color);
		angle+=360/60;
	}
}
task SpellBurstB1(x,y,maxscale,frame,color) {
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);

	ObjPrim_SetTexture(obj, MD ~ "System/IMG/Effect/ConcentrationCircle.png");
	ObjSprite2D_SetSourceRect(obj,0,0,256,256);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetBlendType(obj, BLEND_ADD_RGB);
	Obj_SetRenderPriorityI(obj, 50);

	let RGB = color;
	let alpha = 255;
	let scale = 0;

	ascent(i in 0..frame) {
		scale = maxscale*sin(90*i/frame);
		alpha -= 255/frame;
		ObjRender_SetColor(obj,(alpha/255)*RGB[0],(alpha/255)*RGB[1],(alpha/255)*RGB[2]);
		ObjRender_SetPosition(obj, x, y, 0);
		ObjRender_SetScaleXYZ(obj, scale, scale, scale);
		yield;
	}
	Obj_Delete(obj);
}
task SpellBurstB2(objEnemy,maxscale,frame,color) {
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);

	ObjPrim_SetTexture(obj, MD ~ "System/IMG/Effect/ConcentrationCircle2.png");
	ObjSprite2D_SetSourceRect(obj,0,0,256,256);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetBlendType(obj, BLEND_ADD_RGB);
	Obj_SetRenderPriorityI(obj, 50);

	let RGB = color;
	let alpha = 255;
	let scale = 0;

	ascent(i in 0..frame) {
		scale = maxscale*sin(90*i/frame);
		alpha -= 255/frame;
		ObjRender_SetColor(obj,(alpha/255)*RGB[0],(alpha/255)*RGB[1],(alpha/255)*RGB[2]);
		ObjRender_SetPosition(obj, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);
		ObjRender_SetScaleXYZ(obj, scale, scale, scale);
		yield;
	}
	Obj_Delete(obj);
}
function PPCExplode(objEnemy,color) {
	loop(6) {
		MSDExplodeCircle(ObjRender_GetX(objEnemy),ObjRender_GetY(objEnemy),color);
	}
}
function PPCExplodeRainbow(objEnemy) {
	MSDExplodeCircle(ObjRender_GetX(objEnemy),ObjRender_GetY(objEnemy),[255,64,64]);
	MSDExplodeCircle(ObjRender_GetX(objEnemy),ObjRender_GetY(objEnemy),[255,128,64]);
	MSDExplodeCircle(ObjRender_GetX(objEnemy),ObjRender_GetY(objEnemy),[255,255,64]);
	MSDExplodeCircle(ObjRender_GetX(objEnemy),ObjRender_GetY(objEnemy),[128,255,128]);
	MSDExplodeCircle(ObjRender_GetX(objEnemy),ObjRender_GetY(objEnemy),[128,128,255]);
	MSDExplodeCircle(ObjRender_GetX(objEnemy),ObjRender_GetY(objEnemy),[128,64,255]);
}
task MSDExplodeCircle(x,y,RGB) {
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);

	ObjRender_SetBlendType(obj, BLEND_ADD_RGB);
	Obj_SetRenderPriorityI(obj,41);
	ObjPrim_SetTexture(obj, MD ~ "System/IMG/Effect/MSDEffect.png");
	ObjSprite2D_SetSourceRect(obj, 128, 0, 256, 128);
	ObjSprite2D_SetDestCenter(obj);

	let alpha = 255;
	let scale = 0;
	let dscale = 0.6;
	let anglex = randEff(-90,90);
	let angley = randEff(-90,90);
	let anglez = randEff(-90,90);
	let dx = randEff(-1,1);
	let dy = randEff(-1,1);
	let dz = randEff(-1,1);

	ObjRender_SetPosition(obj, x, y, 0);
	loop(40){
		scale += dscale;
		alpha -= 255/40;
		anglex+=dx; angley+=dy; anglez+=dz;
		if(dscale>0){ dscale-=0.55/40; }
		else { dscale = 0; }
		ObjRender_SetColor(obj,RGB[0]*(alpha/255),RGB[1]*(alpha/255),RGB[2]*(alpha/255));
		ObjRender_SetScaleXYZ(obj, scale, scale, 1);
		ObjRender_SetAngleXYZ(obj,anglex,angley,anglez);
		yield;
	}
	Obj_Delete(obj);
}
task Starburst(objEnemy,color) {
	let objStar = ObjPrim_Create(OBJ_SPRITE_2D);

	let alpha = 255;
	let RED = color[0];
	let GREEN = color[1];
	let BLUE = color[2];
	let spin = 0;
	let dspin = 2;
	let scale = 0;
	let maxscale = 1.00;

	ObjRender_SetBlendType(objStar, BLEND_ADD_RGB);
	Obj_SetRenderPriorityI(objStar,41);
	ObjPrim_SetTexture(objStar, MD ~ "System/IMG/Effect/Starburst.png");
	ObjSprite2D_SetSourceRect(objStar, 0, 0, 512, 512);
	ObjSprite2D_SetDestCenter(objStar);

	ascent(i in 0..90) {
		ObjRender_SetPosition(objStar, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);
		ObjRender_SetColor(objStar, RED*(alpha/255), GREEN*(alpha/255), BLUE*(alpha/255));
		ObjRender_SetScaleXYZ(objStar, scale, scale, scale);
		ObjRender_SetAngleZ(objStar, spin);
		scale = maxscale*sin(180*i/90);
		spin+=dspin;
		yield;
	}
	Obj_Delete(objStar);
}
task ExplodeObject01(type,x,y,speed,dir,color) {
	if(!GetAreaCommonData("Options","Particle",true)) { return; }
	let objStar = ObjPrim_Create(OBJ_SPRITE_2D);

	let alpha = 120;
	let spinA = randEff(0,180);
	let spinB = randEff(0,180);
	// let RED = randEff(100,255);
	// let GREEN = randEff(100,255);
	// let BLUE = randEff(100,255);
	let RED = color[0];
	let GREEN = color[1];
	let BLUE = color[2];
	let scale = 0;

	ObjRender_SetBlendType(objStar, BLEND_ADD_RGB);
	Obj_SetRenderPriorityI(objStar,41);
	ObjPrim_SetTexture(objStar, MD ~ "System/IMG/Effect/" ~ type ~ ".png");
	if(type=="Glass") { ObjPrim_SetTexture(objStar, MD ~ "System/IMG/Effect/Shatter.png"); }
	ObjSprite2D_SetSourceRect(objStar, 0, 0, 256, 256);
	ObjSprite2D_SetDestCenter(objStar);

	while(!Obj_IsDeleted(objStar)) {
		ObjRender_SetPosition(objStar, x, y, 0);
		ObjRender_SetScaleXYZ(objStar, scale, scale, scale);
		ObjRender_SetAngleXYZ(objStar, spinA, spinB, spinA);
		ObjRender_SetAlpha(objStar, alpha);
		ObjRender_SetColor(objStar, RED*(alpha/255), GREEN*(alpha/255), BLUE*(alpha/255));
		if(scale<0.19 && speed>0) { scale+=0.03; }
		if(speed>1.0) { speed-=0.094; }
		if(speed<=1.0 && alpha>0) { alpha-=16; scale-=0.008; }
		if(alpha<=0) { Obj_Delete(objStar); }
		spinA+=randEff(1,2);
		spinB+=randEff(-1,-2);
		x+=speed*cos(dir);
		y+=speed*sin(dir);
		yield;
	}
}
task ExplodeObject02(type,x,y,speed,dir,color) {
	if(!GetAreaCommonData("Options","Particle",true)) { return; }
	let objStar = ObjPrim_Create(OBJ_SPRITE_2D);

	let alpha = 200;
	let spinA = randEff(0,180);
	let spinB = randEff(0,180);
	let RED = color[0];
	let GREEN = color[1];
	let BLUE = color[2];
	let scale = 0;

	ObjRender_SetBlendType(objStar, BLEND_ADD_RGB);
	Obj_SetRenderPriorityI(objStar,41);
	ObjPrim_SetTexture(objStar, MD ~ "System/IMG/Effect/" ~ type ~ ".png");
	if(type=="Glass") { ObjPrim_SetTexture(objStar, MD ~ "System/IMG/Effect/Shatter.png"); }
	ObjSprite2D_SetSourceRect(objStar, 0, 0, 256, 256);
	ObjSprite2D_SetDestCenter(objStar);

	while(!Obj_IsDeleted(objStar)) {
		ObjRender_SetPosition(objStar, x, y, 0);
		ObjRender_SetScaleXYZ(objStar, scale, scale, scale);
		ObjRender_SetAngleXYZ(objStar, spinA, spinB, spinA);
		ObjRender_SetAlpha(objStar, alpha);
		ObjRender_SetColor(objStar, RED*(alpha/255), GREEN*(alpha/255), BLUE*(alpha/255));
		if(scale<0.38 && speed>0) { scale+=0.03; }
		if(speed>1.0) { speed-=0.038; }
		if(speed<=1.0 && alpha>0) { alpha-=15; scale-=0.035; }
		if(alpha<=0) { Obj_Delete(objStar); }
		spinA+=randEff(1,2);
		spinB+=randEff(-1,-2);
		x+=speed*cos(dir);
		y+=speed*sin(dir);
		yield;
	}
}
task ExplodeObject03(type,x,y,speed,dir,color) {
	if(!GetAreaCommonData("Options","Particle",true)) { return; }
	let objStar = ObjPrim_Create(OBJ_SPRITE_2D);

	let alpha = 200;
	let spinA = randEff(0,180);
	let spinB = randEff(0,180);
	let RED = color[0];
	let GREEN = color[1];
	let BLUE = color[2];
	let scale = 0;

	ObjRender_SetBlendType(objStar, BLEND_ADD_RGB);
	Obj_SetRenderPriorityI(objStar,41);
	ObjPrim_SetTexture(objStar, MD ~ "System/IMG/Effect/" ~ type ~ ".png");
	if(type=="Glass") { ObjPrim_SetTexture(objStar, MD ~ "System/IMG/Effect/Shatter.png"); }
	ObjSprite2D_SetSourceRect(objStar, 0, 0, 256, 256);
	ObjSprite2D_SetDestCenter(objStar);

	while(!Obj_IsDeleted(objStar)) {
		ObjRender_SetPosition(objStar, x, y, 0);
		ObjRender_SetScaleXYZ(objStar, scale, scale, scale);
		ObjRender_SetAngleXYZ(objStar, spinA, spinB, spinA);
		ObjRender_SetAlpha(objStar, alpha);
		ObjRender_SetColor(objStar, RED*(alpha/255), GREEN*(alpha/255), BLUE*(alpha/255));
		if(scale<0.38 && speed>0) { scale+=0.03; }
		if(speed>1.0) { speed-=0.09; }
		if(speed<=2.0 && alpha>0) { alpha-=15; scale-=0.035; }
		if(alpha<=0) { Obj_Delete(objStar); }
		spinA+=randEff(1,2);
		spinB+=randEff(-1,-2);
		x+=speed*cos(dir);
		y+=speed*sin(dir);
		yield;
	}
}
task DarkConcentration_old(objEnemy,angle,dangle,disp,ddisp,layer,color) { //Adapted from Mystical Power Plant
	let objEffect = ObjPrim_Create(OBJ_SPRITE_2D);

	ObjRender_SetBlendType(objEffect,BLEND_SUBTRACT);
	Obj_SetRenderPriorityI(objEffect,layer);
	ObjPrim_SetTexture(objEffect, MD ~ "System/IMG/Effect/Light.png");
	ObjSprite2D_SetSourceRect(objEffect,0,0,64,64);
	ObjSprite2D_SetDestCenter(objEffect);
	ObjRender_SetAngleXYZ(objEffect,0,0,randEff(0,360));

	let dispmax = randEff(disp-64,disp);
	let disp1 = 0;
	let dispA = 0;
	let alpha1 = 0;
	let alphaA = 0;
	let scalemax = randEff(0.6,1.4);
	let scale2 = scalemax*2;
	let angle2 = randEff(-14,14);

	while(disp1<0.999) {
		angle2+=dangle;

		if(alpha1<1){ alphaA+=10; }
		alpha1 = 1*sin(alphaA);

		dispA+=ddisp;
		disp1 = 1*sin(dispA);

		ObjRender_SetPosition(objEffect,ObjRender_GetX(objEnemy)+(dispmax-disp1*dispmax)*cos(angle+angle2),ObjRender_GetY(objEnemy)+(dispmax-disp1*dispmax)*sin(angle+angle2),0);
		ObjRender_SetScaleXYZ(objEffect,disp1*scalemax,disp1*scalemax,0);
		ObjRender_SetColor(objEffect,alpha1*color[0],alpha1*color[1],alpha1*color[2]);
		yield;
	}
	alpha1 = 0;
	alphaA = 0;
	while(alpha1<1) {
		angle2+=dangle;

		alphaA+=2.5;
		alpha1 = 1*sin(alphaA);

		if(scalemax<scale2) { scalemax+=(scale2/2)/30; }

		ObjRender_SetScaleXYZ(objEffect,disp1*scalemax,disp1*scalemax,0);
		ObjRender_SetColor(objEffect,color[0]-alpha1*color[0],color[1]-alpha1*color[1],color[2]-alpha1*color[2]);
		yield;
	}
	Obj_Delete(objEffect);
}
task DarkConcentration(objEnemy,objEffect,angle,dangle,disp,ddisp,layer,color) { //Adapted from Mystical Power Plant
	if(!GetAreaCommonData("Options","Particle",true)) { return; }
	ObjRender_SetAngleXYZ(objEffect,0,0,randEff(0,360));

	let dispmax = randEff(disp-64,disp);
	let disp1 = 0;
	let dispA = 0;
	let alpha1 = 0;
	let alphaA = 0;
	let scalemax = randEff(0.6,1.4);
	let scale2 = scalemax*2;
	let angle2 = randEff(-14,14);

	while(disp1<0.999) {
		angle2+=dangle;

		if(alpha1<1){ alphaA+=10; }
		alpha1 = 1*sin(alphaA);

		dispA+=ddisp;
		disp1 = 1*sin(dispA);

		if(Obj_IsDeleted(objEnemy)) { Obj_Delete(objEffect); return; }
		ObjRender_SetPosition(objEffect,ObjRender_GetX(objEnemy)+(dispmax-disp1*dispmax)*cos(angle+angle2),ObjRender_GetY(objEnemy)+(dispmax-disp1*dispmax)*sin(angle+angle2),0);
		ObjRender_SetScaleXYZ(objEffect,disp1*scalemax,disp1*scalemax,0);
		ObjRender_SetColor(objEffect,alpha1*color[0],alpha1*color[1],alpha1*color[2]);
		ObjSpriteList2D_AddVertex(objEffect);
		yield;
	}
	alpha1 = 0;
	alphaA = 0;
	while(alpha1<1) {
		angle2+=dangle;

		alphaA+=2.5;
		alpha1 = 1*sin(alphaA);

		if(scalemax<scale2) { scalemax+=(scale2/2)/30; }

		ObjRender_SetPosition(objEffect,ObjRender_GetX(objEnemy)+(dispmax-disp1*dispmax)*cos(angle+angle2),ObjRender_GetY(objEnemy)+(dispmax-disp1*dispmax)*sin(angle+angle2),0);
		ObjRender_SetScaleXYZ(objEffect,disp1*scalemax,disp1*scalemax,0);
		ObjRender_SetColor(objEffect,color[0]-alpha1*color[0],color[1]-alpha1*color[1],color[2]-alpha1*color[2]);
		ObjSpriteList2D_AddVertex(objEffect);
		yield;
	}
	//Obj_Delete(objEffect);
}
task DarknessParticle(objEnemy,speed,color) {
	let color2 = [];
	ascent(i in 0..length(color)) {
		color2 = color2 ~ [color[i]/2];
	}
	let objEffect = ObjPrim_Create(OBJ_SPRITE_2D);

	ObjRender_SetBlendType(objEffect,BLEND_SUBTRACT);
	Obj_SetRenderPriorityI(objEffect,41);
	ObjPrim_SetTexture(objEffect, MD ~ "System/IMG/Effect/Light.png");
	ObjSprite2D_SetSourceRect(objEffect,0,0,64,64);
	ObjSprite2D_SetDestCenter(objEffect);

	let disp1 = 0;
	let dispA = 0;
	let alpha1 = 0;
	let alphaA = 0;
	let scalemax = 3.4;
	let scale2 = scalemax*2;

	while(disp1<0.999) {

		if(alpha1<1){ alphaA+=10; }
		alpha1 = 1;

		dispA+=speed;
		disp1 = 1*sin(dispA);

		ObjRender_SetPosition(objEffect,ObjRender_GetX(objEnemy),ObjRender_GetY(objEnemy),0);
		ObjRender_SetScaleXYZ(objEffect,disp1*scalemax,disp1*scalemax,0);
		ObjRender_SetColor(objEffect,alpha1*color[0],alpha1*color[1],alpha1*color[2]);
		yield;
	}
	alpha1 = 0;
	alphaA = 0;
	while(alpha1<1) {

		alphaA+=2.5;
		alpha1 = 1*sin(alphaA);

		if(scalemax<scale2) { scalemax+=(scale2/2)/30; }

		ObjRender_SetPosition(objEffect,ObjRender_GetX(objEnemy),ObjRender_GetY(objEnemy),0);
		ObjRender_SetScaleXYZ(objEffect,disp1*scalemax,disp1*scalemax,0);
		ObjRender_SetColor(objEffect,color[0]-alpha1*color[0],color[1]-alpha1*color[1],color[2]-alpha1*color[2]);
		yield;
	}
	wait(150);
	Obj_Delete(objEffect);
}
task ConcObject01(type,x,y,speed,dir,rot,r,color,opacity) {
	if(!GetAreaCommonData("Options","Particle",true)) { return; }
	let objStar = ObjPrim_Create(OBJ_SPRITE_2D);

	let alpha = 0;
	let spin = randEff(0,180);
	// let RED = randEff(100,255);
	// let GREEN = randEff(100,255);
	// let BLUE = randEff(100,255);
	let RED = color[0];
	let GREEN = color[1];
	let BLUE = color[2];
	let scale = 0.75*(r/200);

	if(r > 200) { scale = 0.75; }

	ObjRender_SetBlendType(objStar, BLEND_ADD_RGB);
	Obj_SetRenderPriorityI(objStar,41);
	ObjPrim_SetTexture(objStar, MD ~ "System/IMG/Effect/" ~ type ~ ".png");
	if(type=="Glass") { ObjPrim_SetTexture(objStar, MD ~ "System/IMG/Effect/Shatter.png"); }
	ObjSprite2D_SetSourceRect(objStar, 0, 0, 256, 256);
	ObjSprite2D_SetDestCenter(objStar);

	while(!Obj_IsDeleted(objStar)) {
		ObjRender_SetPosition(objStar, x+r*cos(dir), y+r*sin(dir), 0);
		ObjRender_SetScaleXYZ(objStar, scale, scale, scale);
		ObjRender_SetAngleXYZ(objStar, 0, 0, spin);
		ObjRender_SetAlpha(objStar, alpha);
		ObjRender_SetColor(objStar, RED*(alpha/255), GREEN*(alpha/255), BLUE*(alpha/255));
		if(alpha<opacity && r>=10) { alpha+=opacity/90*speed; }
		if(r<200) { scale-=0.75/200*speed; }
		if(r<10) { alpha-=opacity/10*speed; }
		if(alpha<=0) { Obj_Delete(objStar); }
		spin+=randEff(3,4)*rot;
		r-=speed;
		yield;
	}
}
task ConcObject02(type,x,y,speed,dir,rot,r,color,opacity) {
	if(!GetAreaCommonData("Options","Particle",true)) { return; }
	let objStar = ObjPrim_Create(OBJ_SPRITE_2D);

	let alpha = 0;
	let spin = randEff(0,180);
	// let RED = randEff(100,255);
	// let GREEN = randEff(100,255);
	// let BLUE = randEff(100,255);
	let RED = color[0];
	let GREEN = color[1];
	let BLUE = color[2];
	let initspeed = speed;
	let scale = 0.75*(r/200);

	if(r > 200) { scale = 0.75; }

	ObjRender_SetBlendType(objStar, BLEND_ADD_RGB);
	Obj_SetRenderPriorityI(objStar,41);
	ObjPrim_SetTexture(objStar, MD ~ "System/IMG/Effect/" ~ type ~ ".png");
	if(type=="Glass") { ObjPrim_SetTexture(objStar, MD ~ "System/IMG/Effect/Shatter.png"); }
	ObjSprite2D_SetSourceRect(objStar, 0, 0, 256, 256);
	ObjSprite2D_SetDestCenter(objStar);

	while(!Obj_IsDeleted(objStar)) {
		ObjRender_SetPosition(objStar, x+r*cos(dir), y+r*sin(dir), 0);
		ObjRender_SetScaleXYZ(objStar, scale, scale, scale);
		ObjRender_SetAngleXYZ(objStar, 0, 0, spin);
		ObjRender_SetAlpha(objStar, alpha);
		ObjRender_SetColor(objStar, RED*(alpha/255), GREEN*(alpha/255), BLUE*(alpha/255));
		if(alpha<opacity && r>=30) { alpha+=opacity/90*speed; }
		if(r<200 && r>90) { scale-=0.9/200*speed; }
		if(r<30) { speed-=initspeed/30*speed; }
		if(r<30) { alpha-=opacity/20; }
		if(alpha<=0) { Obj_Delete(objStar); }
		spin+=randEff(3,4)*rot*(speed/7);
		r-=speed;
		yield;
	}
}
task ConcObject03(type,x,y,speed,dir,rot,r,color,opacity) { //Was a prototype SUBTRACT blend concentrate effect meant for one of the dark concentrations. Not currently in use.
	if(!GetAreaCommonData("Options","Particle",true)) { return; }
	let objStar = ObjPrim_Create(OBJ_SPRITE_2D);

	let alpha = 0;
	let spin = randEff(0,180);
	// let RED = randEff(100,255);
	// let GREEN = randEff(100,255);
	// let BLUE = randEff(100,255);
	let RED = color[0];
	let GREEN = color[1];
	let BLUE = color[2];
	let scale = 0.75*(r/200);

	if(r > 200) { scale = 0.75; }

	ObjRender_SetBlendType(objStar, BLEND_SUBTRACT);
	Obj_SetRenderPriorityI(objStar,41);
	ObjPrim_SetTexture(objStar, MD ~ "System/IMG/Effect/" ~ type ~ ".png");
	if(type=="Glass") { ObjPrim_SetTexture(objStar, MD ~ "System/IMG/Effect/Shatter.png"); }
	ObjSprite2D_SetSourceRect(objStar, 0, 0, 256, 256);
	ObjSprite2D_SetDestCenter(objStar);

	while(!Obj_IsDeleted(objStar)) {
		ObjRender_SetPosition(objStar, x+r*cos(dir), y+r*sin(dir), 0);
		ObjRender_SetScaleXYZ(objStar, scale, scale, scale);
		ObjRender_SetAngleXYZ(objStar, 0, 0, spin);
		ObjRender_SetAlpha(objStar, alpha);
		ObjRender_SetColor(objStar, RED*(alpha/255), GREEN*(alpha/255), BLUE*(alpha/255));
		if(alpha<opacity && r>=10) { alpha+=opacity/90*speed; }
		if(r<200) { scale-=0.75/200*speed; }
		if(r<10) { alpha-=opacity/10*speed; }
		if(alpha<=0) { Obj_Delete(objStar); }
		spin+=randEff(3,4)*rot;
		r-=speed;
		yield;
	}
}
task ConcObject04(x,y,speed,dir,rot,r,color,opacity) {
	if(!GetAreaCommonData("Options","Particle",true)) { return; }
	let objStar = ObjPrim_Create(OBJ_SPRITE_2D);

	let alpha = 0;
	let spin = randEff(0,180);
	// let RED = randEff(100,255);
	// let GREEN = randEff(100,255);
	// let BLUE = randEff(100,255);
	let RED = color[0];
	let GREEN = color[1];
	let BLUE = color[2];
	let scale = 3.5*(r/200);

	if(r > 200) { scale = 3.5; }

	ObjRender_SetBlendType(objStar, BLEND_ADD_RGB);
	Obj_SetRenderPriorityI(objStar,41);
	ObjPrim_SetTexture(objStar, MD ~ "System/IMG/Effect/Light.png");
	ObjSprite2D_SetSourceRect(objStar, 0, 0, 64, 64);
	ObjSprite2D_SetDestCenter(objStar);

	while(!Obj_IsDeleted(objStar)) {
		ObjRender_SetPosition(objStar, x+r*cos(dir), y+r*sin(dir), 0);
		ObjRender_SetScaleXYZ(objStar, scale, scale*1.50, scale);
		ObjRender_SetAngleXYZ(objStar, 0, 0, dir+90);
		ObjRender_SetAlpha(objStar, alpha);
		ObjRender_SetColor(objStar, RED*(alpha/255), GREEN*(alpha/255), BLUE*(alpha/255));
		if(alpha<opacity && r>=10) { alpha+=opacity/90*speed; }
		if(r<200) { scale-=3.5/200*speed; }
		if(r<10) { alpha-=opacity/10*speed; }
		if(alpha<=0) { Obj_Delete(objStar); }
		spin+=randEff(3,4)*rot;
		r-=speed;
		yield;
	}
}
task ConcBinary01(x,y,speed,dir,rot,r,color,opacity) {
	let objStar = ObjPrim_Create(OBJ_SPRITE_2D);

	let alpha = 0;
	let spin = rand(0,180);
	// let RED = rand(100,255);
	// let GREEN = rand(100,255);
	// let BLUE = rand(100,255);
	let RED = color[0];
	let GREEN = color[1];
	let BLUE = color[2];
	let scale = 0.75*(r/200);

	if(r > 200) { scale = 0.75; }

	ObjRender_SetBlendType(objStar, BLEND_ADD_RGB);
	Obj_SetRenderPriorityI(objStar,41);
	ObjPrim_SetTexture(objStar, GetModuleDirectory ~ "system/img/effect/Zero.png");
	ObjSprite2D_SetSourceRect(objStar, 0, 0, 256, 256);
	ObjSprite2D_SetDestCenter(objStar);

	while(!Obj_IsDeleted(objStar)) {
		ObjRender_SetPosition(objStar, x+r*cos(dir), y+r*sin(dir), 0);
		ObjRender_SetScaleXYZ(objStar, scale, scale, scale);
		ObjRender_SetAngleXYZ(objStar, 0, 0, spin);
		ObjRender_SetAlpha(objStar, alpha);
		ObjRender_SetColor(objStar, RED*(alpha/255), GREEN*(alpha/255), BLUE*(alpha/255));
		if(alpha<opacity && r>=10) { alpha+=opacity/90*speed; }
		if(r<200) { scale-=0.75/200*speed; }
		if(r<10) { alpha-=opacity/10*speed; }
		if(alpha<=0) { Obj_Delete(objStar); }
		spin+=randEff(3,4)*rot;
		r-=speed;
		yield;
	}
}
task ConcBinary02(x,y,speed,dir,rot,r,color,opacity) {
	let objStar = ObjPrim_Create(OBJ_SPRITE_2D);

	let alpha = 0;
	let spin = rand(0,180);
	// let RED = rand(100,255);
	// let GREEN = rand(100,255);
	// let BLUE = rand(100,255);
	let RED = color[0];
	let GREEN = color[1];
	let BLUE = color[2];
	let scale = 0.75*(r/200);

	if(r > 200) { scale = 0.75; }

	ObjRender_SetBlendType(objStar, BLEND_ADD_RGB);
	Obj_SetRenderPriorityI(objStar,41);
	ObjPrim_SetTexture(objStar, GetModuleDirectory ~ "system/img/effect/One.png");
	ObjSprite2D_SetSourceRect(objStar, 0, 0, 256, 256);
	ObjSprite2D_SetDestCenter(objStar);

	while(!Obj_IsDeleted(objStar)) {
		ObjRender_SetPosition(objStar, x+r*cos(dir), y+r*sin(dir), 0);
		ObjRender_SetScaleXYZ(objStar, scale, scale, scale);
		ObjRender_SetAngleXYZ(objStar, 0, 0, spin);
		ObjRender_SetAlpha(objStar, alpha);
		ObjRender_SetColor(objStar, RED*(alpha/255), GREEN*(alpha/255), BLUE*(alpha/255));
		if(alpha<opacity && r>=10) { alpha+=opacity/90*speed; }
		if(r<200) { scale-=0.75/200*speed; }
		if(r<10) { alpha-=opacity/10*speed; }
		if(alpha<=0) { Obj_Delete(objStar); }
		spin+=randEff(3,4)*rot;
		r-=speed;
		yield;
	}
}
task ExplodeCircle01(objEnemy,color) { //Meant to be used with ZUN's explode circles. Not currently in use.
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);

	ObjRender_SetBlendType(obj, BLEND_ALPHA);
	Obj_SetRenderPriorityI(obj,41);
	ObjPrim_SetTexture(obj, MD ~ "System/IMG/Effect/Effect.png");
	if(color == "Orange") { ObjSprite2D_SetSourceRect(obj, 0, 0, 64, 64); }
	if(color == "Blue") { ObjSprite2D_SetSourceRect(obj, 64, 0, 128, 64); }
	if(color == "Yellow") { ObjSprite2D_SetSourceRect(obj, 128, 0, 192, 64); }
	if(color == "Green") { ObjSprite2D_SetSourceRect(obj, 192, 0, 256, 64); }
	ObjSprite2D_SetDestCenter(obj);

	let alpha = 220;
	let scale = 0;
	let dscale = 0.4;

	ObjRender_SetPosition(obj, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), 0);
	loop(40){
		scale += dscale;
		alpha -= 5;
		if(dscale>0){ dscale = dscale^1.13; }
		ObjRender_SetAlpha(obj, alpha);
		ObjRender_SetScaleXYZ(obj, scale, scale, 1);
		yield;
	}
	Obj_Delete(obj);
}
task ExplodeCircle02(objEnemy,maxscale,color,x,y,z) { //Meant to be used with ZUN's explode circles. Not currently in use.
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);

	ObjRender_SetBlendType(obj, BLEND_ALPHA);
	Obj_SetRenderPriorityI(obj,41);
	ObjPrim_SetTexture(obj, MD ~ "System/IMG/Effect/Effect.png");
	if(color == "Orange") { ObjSprite2D_SetSourceRect(obj, 0, 0, 64, 64); }
	if(color == "Blue") { ObjSprite2D_SetSourceRect(obj, 64, 0, 128, 64); }
	if(color == "Yellow") { ObjSprite2D_SetSourceRect(obj, 128, 0, 192, 64); }
	if(color == "Green") { ObjSprite2D_SetSourceRect(obj, 192, 0, 256, 64); }
	ObjSprite2D_SetDestCenter(obj);

	let alpha = 200;
	let scale = 0;
	let dscale = 0.4;

	ObjRender_SetPosition(obj, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), 0);
	ObjRender_SetAngleXYZ(obj,x,y,z);
	ascent(i in 0..30) {
		scale = maxscale*sin(90*i/20);
		alpha -= 255/30;
		//if(dscale>0){ dscale = dscale^1.15; }
		ObjRender_SetAlpha(obj, alpha);
		ObjRender_SetScaleXYZ(obj, scale, scale, scale);
		yield;
	}
	Obj_Delete(obj);
}
task DefaultCircleA1(objEnemy,maxscale,color,x,y,z) { //Uses Danmakufu's default explode circle
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);

	let RGB = color;

	ObjRender_SetBlendType(obj, BLEND_ADD_RGB);
	Obj_SetRenderPriorityI(obj,41);
	ObjPrim_SetTexture(obj, MD ~ "System/IMG/Effect/Default_Effect.png");
	ObjSprite2D_SetSourceRect(obj, 0, 0, 64, 64);
	ObjSprite2D_SetDestCenter(obj);

	let alpha = 200;
	let scale = 0;
	let dscale = 0.4;

	ObjRender_SetPosition(obj, ObjRender_GetX(objEnemy), ObjRender_GetY(objEnemy), 0);
	ObjRender_SetAngleXYZ(obj,x,y,z);
	ascent(i in 0..20) {
		scale = maxscale*sin(90*i/20);
		alpha -= 200/20;
		//if(dscale>0){ dscale = dscale^1.15; }
		ObjRender_SetColor(obj,(alpha/255)*RGB[0],(alpha/255)*RGB[1],(alpha/255)*RGB[2]);
		ObjRender_SetScaleXYZ(obj, scale, scale, scale);
		yield;
	}
	Obj_Delete(obj);
}
task DefaultCircleB1(objTarget,initscale,frames,color,rate) {
	let objEffect = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(objEffect, 41);
	ObjRender_SetBlendType(objEffect,BLEND_ADD_ARGB);
	ObjPrim_SetTexture(objEffect, MD ~ "System/IMG/Effect/Default_Effect.png");
	ObjSprite2D_SetSourceRect(objEffect, 0, 0, 64, 64);
	ObjSprite2D_SetDestCenter(objEffect);

	let alpha = 1.3;
	let scale = initscale;
	if(rate>0) { scale = 0; }
	let dir = randEff(0,360);

	loop(frames) {
		if(Obj_IsDeleted(objTarget)) { break; }
		dir+=2*rate;
		alpha-=1.3/frames;
		scale+=initscale/frames*rate;
		ObjRender_SetPosition(objEffect,ObjRender_GetX(objTarget),ObjRender_GetY(objTarget),0);
		ObjRender_SetScaleXYZ(objEffect,scale,scale,scale);
		ObjRender_SetColor(objEffect,alpha*color[0],alpha*color[1],alpha*color[2]);
		ObjRender_SetAngleZ(objEffect,dir);
		yield;
	}
	Obj_Delete(objEffect);
}
task DefaultCircleB2(x,y,initscale,frames,color,rate) {
	let objEffect = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(objEffect, 41);
	ObjRender_SetBlendType(objEffect,BLEND_ADD_ARGB);
	ObjPrim_SetTexture(objEffect, MD ~ "System/IMG/Effect/Default_Effect.png");
	ObjSprite2D_SetSourceRect(objEffect, 0, 0, 64, 64);
	ObjSprite2D_SetDestCenter(objEffect);

	let alpha = 1.3;
	let scale = initscale;
	if(rate>0) { scale = 0; }
	let dir = randEff(0,360);

	loop(frames) {
		dir+=2*rate;
		alpha-=1.3/frames;
		scale+=initscale/frames*rate;
		ObjRender_SetPosition(objEffect,x,y,0);
		ObjRender_SetScaleXYZ(objEffect,scale,scale,scale);
		ObjRender_SetColor(objEffect,alpha*color[0],alpha*color[1],alpha*color[2]);
		ObjRender_SetAngleZ(objEffect,dir);
		yield;
	}
	Obj_Delete(objEffect);
}
task ConcCircle01(x,y,speed,r,color) {
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);

	let RGB = color;

	let alpha = 0;
	let scale = 2.5*(r/200);

	ObjRender_SetBlendType(obj, BLEND_ADD_RGB);
	Obj_SetRenderPriorityI(obj,41);
	ObjPrim_SetTexture(obj, MD ~ "System/IMG/Effect/ConcentrationCircle.png");
	ObjSprite2D_SetSourceRect(obj, 0, 0, 256, 256);
	ObjSprite2D_SetDestCenter(obj);

	while(!Obj_IsDeleted(obj)) {
		ObjRender_SetPosition(obj, x, y, 0);
		ObjRender_SetScaleXYZ(obj, scale, scale, scale);
		ObjRender_SetColor(obj, RGB[0]*(alpha/255), RGB[1]*(alpha/255), RGB[2]*(alpha/255));
		if(alpha<255) { alpha+=255/(max(r-90,1))*speed; }
		scale-=speed/100;
		if(scale<=0) { Obj_Delete(obj); }
		yield;
	}
}
task ConcCircle02(x,y,speed,r,color) {
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);

	let RGB = color;

	let alpha = 0;
	let scale = 2.5*(r/200);

	ObjRender_SetBlendType(obj, BLEND_ADD_RGB);
	Obj_SetRenderPriorityI(obj,41);
	ObjPrim_SetTexture(obj, MD ~ "System/IMG/Effect/ConcentrationCircle.png");
	ObjSprite2D_SetSourceRect(obj, 0, 0, 256, 256);
	ObjSprite2D_SetDestCenter(obj);

	while(!Obj_IsDeleted(obj)) {
		ObjRender_SetPosition(obj, x, y, 0);
		ObjRender_SetScaleXYZ(obj, scale, scale, scale);
		ObjRender_SetColor(obj, RGB[0]*(alpha/255), RGB[1]*(alpha/255), RGB[2]*(alpha/255));
		if(alpha<255) { alpha+=255/(max(r-90,1))*speed; }
		scale-=speed/100;
		if(scale<=0) { Obj_Delete(obj); }
		yield;
	}
}
task SummonEffectA1(objTarget,scale,frames,color) {
	DefaultCircleB1(objTarget,scale,frames,color,-1);
	DefaultCircleB1(objTarget,scale,frames,color,1);
}
task SummonEffectA2(x,y,scale,frames,color) {
	DefaultCircleB2(x,y,scale,frames,color,-1);
	DefaultCircleB2(x,y,scale,frames,color,1);
}
task Shield(objEnemy) {
	let obj2 = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjRender_SetBlendType(obj2, BLEND_ADD_ARGB);
	Obj_SetRenderPriorityI(obj2,41);
	ObjPrim_SetTexture(obj2, MD ~ "System/IMG/Effect/Shield_Ring_Gray.png");
	ObjSprite2D_SetSourceRect(obj2, 0, 0, 256, 256);
	ObjSprite2D_SetDestCenter(obj2);

	let obj1 = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjRender_SetBlendType(obj1, BLEND_ADD_ARGB);
	Obj_SetRenderPriorityI(obj1,41);
	ObjPrim_SetTexture(obj1, MD ~ "System/IMG/Effect/Shield_Aura_Gray.png");
	ObjSprite2D_SetSourceRect(obj1, 0, 0, 256, 256);
	ObjSprite2D_SetDestCenter(obj1);

	let scale = 0.9;
	let scale_1 = 0.6;
	let scale_2 = 0.9;
	let scale_3 = 1.5;
	let scalemod = 1;
	let dir = 0;
	let alpha = 0;
	let maxalpha = 255;
	let RGB = [255,255,255];

	ascent(i in 0..10) {
		RGB = Obj_GetValueD(objEnemy,"Shield Color",[255,255,255]);
		maxalpha = Obj_GetValueD(objEnemy,"Shield Alpha",255);
		scalemod = Obj_GetValueD(objEnemy,"Shield Scale",1);
		scale = scale_1 + (scale_2-scale_1)*sin(90*i/10);
		alpha += maxalpha/10;

		ObjRender_SetColor(obj1,(alpha/255)*RGB[0],(alpha/255)*RGB[1],(alpha/255)*RGB[2]);
		ObjRender_SetColor(obj2,(alpha/255)*RGB[0],(alpha/255)*RGB[1],(alpha/255)*RGB[2]);
		ObjRender_SetPosition(obj1, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);
		ObjRender_SetPosition(obj2, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);
		ObjRender_SetScaleXYZ(obj1, scale*scalemod, scale*scalemod, scale*scalemod);
		ObjRender_SetScaleXYZ(obj2, scale*scalemod, scale*scalemod, scale*scalemod);
		ObjRender_SetAngleZ(obj2,dir);
		dir+=12;
		yield;
	}
	loop {
		if(Obj_IsDeleted(objEnemy) || Obj_GetValueD(objEnemy,"Shield End",false)) { break; }
		RGB = Obj_GetValueD(objEnemy,"Shield Color",[255,255,255]);
		maxalpha = Obj_GetValueD(objEnemy,"Shield Alpha",255);
		scalemod = Obj_GetValueD(objEnemy,"Shield Scale",1);
		alpha = maxalpha;
		ObjRender_SetColor(obj1,(alpha/255)*RGB[0],(alpha/255)*RGB[1],(alpha/255)*RGB[2]);
		ObjRender_SetColor(obj2,(alpha/255)*RGB[0],(alpha/255)*RGB[1],(alpha/255)*RGB[2]);
		ObjRender_SetPosition(obj1, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);
		ObjRender_SetPosition(obj2, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);
		ObjRender_SetScaleXYZ(obj1, scale*scalemod, scale*scalemod, scale*scalemod);
		ObjRender_SetScaleXYZ(obj2, scale*scalemod, scale*scalemod, scale*scalemod);
		ObjRender_SetAngleZ(obj2,dir);
		dir+=12;
		yield;
	}
	maxalpha = alpha;
	ascent(i in 0..15) {
		scale = scale_2 + (scale_3-scale_2)*sin(90*i/15);
		alpha -= maxalpha/15;
		ObjRender_SetColor(obj1,(alpha/255)*RGB[0],(alpha/255)*RGB[1],(alpha/255)*RGB[2]);
		ObjRender_SetColor(obj2,(alpha/255)*RGB[0],(alpha/255)*RGB[1],(alpha/255)*RGB[2]);
		if(!Obj_IsDeleted(objEnemy)) {
			ObjRender_SetPosition(obj1, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);
			ObjRender_SetPosition(obj2, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);
		}
		ObjRender_SetScaleXYZ(obj1, scale*scalemod, scale*scalemod, scale*scalemod);
		ObjRender_SetScaleXYZ(obj2, scale*scalemod, scale*scalemod, scale*scalemod);
		ObjRender_SetAngleZ(obj2,dir);
		dir+=12;
		yield;
	}
	Obj_Delete(obj1);
	Obj_Delete(obj2);
}
task Shield_DS(objEnemy) {
	let obj2 = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjRender_SetBlendType(obj2, BLEND_ADD_ARGB);
	Obj_SetRenderPriorityI(obj2,41);
	ObjPrim_SetTexture(obj2, MD ~ "System/IMG/Effect/Shield_Ring_Gray.png");
	ObjSprite2D_SetSourceRect(obj2, 0, 0, 256, 256);
	ObjSprite2D_SetDestCenter(obj2);

	let obj1 = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjRender_SetBlendType(obj1, BLEND_ADD_ARGB);
	Obj_SetRenderPriorityI(obj1,41);
	ObjPrim_SetTexture(obj1, MD ~ "System/IMG/Effect/Shield_Aura_DS.png");
	ObjSprite2D_SetSourceRect(obj1, 0, 0, 256, 256);
	ObjSprite2D_SetDestCenter(obj1);

	let scale = 0.9;
	let scale_1 = 0.6;
	let scale_2 = 0.9;
	let scale_3 = 1.5;
	let scalemod = 1;
	let dir = 0;
	let alpha = 0;
	let maxalpha = 255;
	let RGB = [255,255,255];

	ascent(i in 0..10) {
		RGB = Obj_GetValueD(objEnemy,"Shield Color",[255,255,255]);
		maxalpha = Obj_GetValueD(objEnemy,"Shield Alpha",255);
		scalemod = Obj_GetValueD(objEnemy,"Shield Scale",1);
		scale = scale_1 + (scale_2-scale_1)*sin(90*i/10);
		alpha += maxalpha/10;

		ObjRender_SetColor(obj1,(alpha/255)*RGB[0],(alpha/255)*RGB[1],(alpha/255)*RGB[2]);
		ObjRender_SetColor(obj2,(alpha/255)*RGB[0],(alpha/255)*RGB[1],(alpha/255)*RGB[2]);
		ObjRender_SetPosition(obj1, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);
		ObjRender_SetPosition(obj2, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);
		ObjRender_SetScaleXYZ(obj1, scale*scalemod, scale*scalemod, scale*scalemod);
		ObjRender_SetScaleXYZ(obj2, scale*scalemod, scale*scalemod, scale*scalemod);
		ObjRender_SetAngleZ(obj2,dir);
		dir+=12;
		yield;
	}
	loop {
		if(Obj_IsDeleted(objEnemy) || Obj_GetValueD(objEnemy,"Shield End",false)) { break; }
		RGB = Obj_GetValueD(objEnemy,"Shield Color",[255,255,255]);
		maxalpha = Obj_GetValueD(objEnemy,"Shield Alpha",255);
		scalemod = Obj_GetValueD(objEnemy,"Shield Scale",1);
		alpha = maxalpha;
		ObjRender_SetColor(obj1,(alpha/255)*RGB[0],(alpha/255)*RGB[1],(alpha/255)*RGB[2]);
		ObjRender_SetColor(obj2,(alpha/255)*RGB[0],(alpha/255)*RGB[1],(alpha/255)*RGB[2]);
		ObjRender_SetPosition(obj1, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);
		ObjRender_SetPosition(obj2, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);
		ObjRender_SetScaleXYZ(obj1, scale*scalemod, scale*scalemod, scale*scalemod);
		ObjRender_SetScaleXYZ(obj2, scale*scalemod, scale*scalemod, scale*scalemod);
		ObjRender_SetAngleZ(obj2,dir);
		dir+=12;
		yield;
	}
	maxalpha = alpha;
	ascent(i in 0..15) {
		scale = scale_2 + (scale_3-scale_2)*sin(90*i/15);
		alpha -= maxalpha/15;
		ObjRender_SetColor(obj1,(alpha/255)*RGB[0],(alpha/255)*RGB[1],(alpha/255)*RGB[2]);
		ObjRender_SetColor(obj2,(alpha/255)*RGB[0],(alpha/255)*RGB[1],(alpha/255)*RGB[2]);
		if(!Obj_IsDeleted(objEnemy)) {
			ObjRender_SetPosition(obj1, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);
			ObjRender_SetPosition(obj2, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);
		}
		ObjRender_SetScaleXYZ(obj1, scale*scalemod, scale*scalemod, scale*scalemod);
		ObjRender_SetScaleXYZ(obj2, scale*scalemod, scale*scalemod, scale*scalemod);
		ObjRender_SetAngleZ(obj2,dir);
		dir+=12;
		yield;
	}
	Obj_Delete(obj1);
	Obj_Delete(obj2);
}
task ShieldShatter(objEnemy,duration,shardscale,speed) {
	if(!GetAreaCommonData("Options","Particle",true)) { return; }
	let shatter = false;
	let xpos = 0;
	let ypos = 0;
	loop(duration/2) {
		if(!Obj_IsDeleted(objEnemy)) {
			xpos = ObjMove_GetX(objEnemy);
			ypos = ObjMove_GetY(objEnemy);
		}
		ShieldLayer;
		wait(2);
	}
	shatter = true;
	//if(Obj_IsDeleted(objEnemy)) { return; }
	if(xpos == 0 && ypos == 0) { return; }
	let r = 40*Obj_GetValueD(objEnemy,"Shield Scale",1);
	let dir = randEff(0,360);
	let num = 60*shardscale;
	loop(num) {
		Shatter(xpos+r*cos(dir),ypos+r*sin(dir),speed+randEff(1.0,3.5),dir);
		dir+=360/num;
	}
	task ShieldLayer {
		let obj2 = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjRender_SetBlendType(obj2, BLEND_ADD_ARGB);
		Obj_SetRenderPriorityI(obj2,41);
		ObjPrim_SetTexture(obj2, MD ~ "System/IMG/Effect/Shield_Ring_Gray.png");
		ObjSprite2D_SetSourceRect(obj2, 0, 0, 256, 256);
		ObjSprite2D_SetDestCenter(obj2);

		let obj1 = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjRender_SetBlendType(obj1, BLEND_ADD_ARGB);
		Obj_SetRenderPriorityI(obj1,41);
		ObjPrim_SetTexture(obj1, MD ~ "System/IMG/Effect/Shield_Aura_Gray.png");
		ObjSprite2D_SetSourceRect(obj1, 0, 0, 256, 256);
		ObjSprite2D_SetDestCenter(obj1);

		let alpha = 200;
		let maxalpha = alpha;
		let scale = 0.9;
		let scale_1 = 0.6;
		let scale_2 = 0.9;
		let scale_3 = 1.5;
		let scalemod = 1;
		let dir = 0;
		let RGB = [255,255,255];

		while(!shatter) {
			if(Obj_IsDeleted(objEnemy)) { break; }
			RGB = Obj_GetValueD(objEnemy,"Shield Color",[255,255,255]);
			scalemod = Obj_GetValueD(objEnemy,"Shield Scale",1);
			ObjRender_SetColor(obj1,(alpha/255)*RGB[0],(alpha/255)*RGB[1],(alpha/255)*RGB[2]);
			ObjRender_SetColor(obj2,(alpha/255)*RGB[0],(alpha/255)*RGB[1],(alpha/255)*RGB[2]);
			ObjRender_SetPosition(obj1, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);
			ObjRender_SetPosition(obj2, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);
			ObjRender_SetScaleXYZ(obj1, scale*scalemod, scale*scalemod, scale*scalemod);
			ObjRender_SetScaleXYZ(obj2, scale*scalemod, scale*scalemod, scale*scalemod);
			ObjRender_SetAngleZ(obj2,dir);
			dir+=12;
			yield;
		}
		//Obj_SetValue(objEnemy,"Shield End",true);
		maxalpha = alpha;
		ascent(i in 0..15) {
			scale = scale_2 + (scale_3-scale_2)*sin(90*i/15);
			alpha -= maxalpha/15;
			ObjRender_SetColor(obj1,(alpha/255)*RGB[0],(alpha/255)*RGB[1],(alpha/255)*RGB[2]);
			ObjRender_SetColor(obj2,(alpha/255)*RGB[0],(alpha/255)*RGB[1],(alpha/255)*RGB[2]);
			ObjRender_SetPosition(obj1, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);
			ObjRender_SetPosition(obj2, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);
			ObjRender_SetScaleXYZ(obj1, scale*scalemod, scale*scalemod, scale*scalemod);
			ObjRender_SetScaleXYZ(obj2, scale*scalemod, scale*scalemod, scale*scalemod);
			ObjRender_SetAngleZ(obj2,dir);
			dir+=12;
			yield;
		}
		Obj_Delete(obj1);
		Obj_Delete(obj2);
	}
	task Shatter(x,y,speed,dir) {
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
		Obj_SetRenderPriorityI(obj,41);
		ObjPrim_SetTexture(obj, MD ~ "System/IMG/Effect/Shatter2.png");
		ObjSprite2D_SetSourceRect(obj, 0, 0, 256, 256);
		ObjSprite2D_SetDestCenter(obj);

		let alpha = 200;
		let spinA = randEff(0,180);
		let spinB = randEff(0,180);
		let scale = 0;
		let RGB = [255,255,255];

		while(!Obj_IsDeleted(obj)) {
			ObjRender_SetPosition(obj, x, y, 0);
			ObjRender_SetScaleXYZ(obj, scale*shardscale, scale*shardscale, scale*shardscale);
			ObjRender_SetAngleXYZ(obj, spinA, spinB, spinA);
			ObjRender_SetAlpha(obj, alpha);
			ObjRender_SetColor(obj, RGB[0]*(alpha/255), RGB[1]*(alpha/255), RGB[2]*(alpha/255));
			if(scale<0.21 && speed>0) { scale+=0.03; }
			if(speed>1.4) { speed-=0.11; }
			if(speed<=1.4 && alpha>0) { alpha-=16; scale-=0.008; }
			if(alpha<=0) { Obj_Delete(obj); }
			spinA+=randEff(1.5,3);
			spinB+=randEff(-1.5,-3);
			x+=speed*cos(dir);
			y+=speed*sin(dir);
			yield;
		}
	}
}
task Sephirot(objEnemy,objTarget,color){ //Tethering effect for shared boss/enemy shields
	let tiferet = 0;
	let tarx = ObjRender_GetX(objTarget);
	let tary = ObjRender_GetY(objTarget);
	let dist = GetDistance(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), tarx, tary);
	let ang = AngleBetweenPoints(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), tarx, tary);
	let initx = ObjMove_GetX(objEnemy);
	let inity = ObjMove_GetY(objEnemy);

	let alpha = Obj_GetValueD(objEnemy,"Sephirot Alpha",255);
	let graphic = 409;
	alternative(ConvertColorString(color))
	case("White") { graphic = 409; }
	case("Red") { graphic = 410; }
	case("Orange") { graphic = 416; }
	case("Yellow") { graphic = 415; }
	case("Green") { graphic = 414; }
	case("Aqua") { graphic = 413; }
	case("Blue") { graphic = 412; }
	case("Magenta") { graphic = 411; }
	let objtether = CreateStraightLaserA1(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), ang, dist, 38, 9999, graphic, 00);
	ObjStLaser_SetSource(objtether, false);
	Obj_SetValue(objtether,"Laser Base",false);
	ObjRender_SetColor(objtether,alpha,alpha,alpha);
	ObjShot_SetIntersectionEnable(objtether,false);
	//ObjRender_SetColor(objtether, color[0], color[1], color[2]);

	while(!Obj_IsDeleted(objEnemy) && !Obj_IsDeleted(objTarget)){
		dist = GetDistance(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), tarx, tary);
		ObjMove_SetPosition(objtether,ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy));
		ObjStLaser_SetAngle(objtether,ang);
		ObjLaser_SetLength(objtether,dist);
		if(tiferet%15==0){
			Yesod;
			task Yesod {
				let distx = tarx-initx;
				let disty = tarx-inity;
				let t = 0;

				let yesod = ObjPrim_Create(OBJ_SPRITE_2D);

				ObjPrim_SetTexture(yesod, MD ~ "System/IMG/Effect/tether_particle.png");
				ObjSprite2D_SetSourceRect(yesod,0,0,16,16);
				ObjSprite2D_SetDestCenter(yesod);
				ObjRender_SetBlendType(yesod, BLEND_ADD_ARGB);
				ObjRender_SetScaleX(yesod, 1.4);
				ObjRender_SetScaleY(yesod, 2.2);
				ObjRender_SetColor(yesod, color[0], color[1], color[2]);
				//ObjShot_SetIntersectionEnable(yesod, false);
				//ObjRender_SetAlpha(yesod, 200);
				//Obj_SetRenderPriorityI(yesod, Obj_GetRenderPriorityI(yesod)-1);
				//ObjShot_SetDeleteFrame(yesod, 40);
				while(!Obj_IsDeleted(yesod)){
					t++;
					if(Obj_IsDeleted(objEnemy) || Obj_IsDeleted(objTarget) || t>=45){ Obj_Delete(yesod); }
					ang = AngleBetweenPoints(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), tarx, tary);
					tarx = ObjRender_GetX(objTarget);
					tary = ObjRender_GetY(objTarget);
					initx = ObjMove_GetX(objEnemy);
					inity = ObjMove_GetY(objEnemy);
					distx = tarx-initx;
					disty = tary-inity;
					ObjRender_SetColor(yesod,alpha,alpha,alpha);
					ObjRender_SetPosition(yesod,initx+distx*(t/45),inity+disty*(t/45),0);
					ObjRender_SetAngleZ(yesod,ang-90);
					yield;
				}
			}
		}
		tiferet++;
		yield;
	}
	Obj_Delete(objtether);
}
task MSDEffect(objID,duration,color) { //Adapted from Magical Singular Day
	let scale = 22;
	let RGB = color;

	Concentration;
	loop(duration/5) {
		if(!Obj_IsDeleted(objID)) {
			loop(2) {
				Beam(ObjRender_GetX(objID),ObjRender_GetY(objID));
			}
		}
		loop(5) { yield; }
	}
	task Concentration {
		loop(duration/15) {
			if(!Obj_IsDeleted(objID)) {
				Concentrate(ObjRender_GetX(objID),ObjRender_GetY(objID));
			}
			loop(15) { yield; }
		}
	}
	task Concentrate(ex,ey) {
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		let path = MD ~ "System/IMG/Effect/MSDEffect.png";

		let scale = 1.6;
		let scaleX = randEff(2,3);
		let scaleY = randEff(2,3);
		let scaleZ = randEff(2,3);
		let alpha = 0;
		let x = randEff(-90,90);
		let y = randEff(-90,90);
		let z = randEff(-90,90);
		let dx = randEff(-1,1);
		let dy = randEff(-1,1);
		let dz = randEff(-1,1);

		ObjPrim_SetTexture(obj,path);
		ObjRender_SetBlendType(obj,BLEND_ADD_RGB);
		Obj_SetRenderPriorityI(obj, 40);
		ObjSprite2D_SetSourceRect(obj,128,0,256,128);
		ObjSprite2D_SetDestCenter(obj);

		ObjRender_SetPosition(obj, ex, ey, 0);

		loop(10) {
			ObjRender_SetPosition(obj, ex, ey, 0);
			ObjRender_SetScaleXYZ(obj,scaleX*scale,scaleY*scale,scaleZ*scale);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			ObjRender_SetColor(obj,RGB[0]*(alpha/255),RGB[1]*(alpha/255),RGB[2]*(alpha/255));
			alpha+=255/10;
			scale-=1.6/60;
			x+=dx; y+=dy; z+=dz;
			yield;
		}
		loop(50) {
			ObjRender_SetPosition(obj, ex, ey, 0);
			ObjRender_SetScaleXYZ(obj,scaleX*scale,scaleY*scale,scaleZ*scale);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			scale-=1.6/60;
			x+=dx; y+=dy; z+=dz;
			yield;
		}
		Obj_Delete(obj);
	}
	task Beam(ex,ey) {
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		let path = MD ~ "System/IMG/Effect/MSDEffect.png";

		let maxscale = randEff(1.5,2.5);
		let scale = 0;
		let alpha = 0;
		let x = randEff(0,360);
		let y = randEff(0,360);
		let z = randEff(0,360);
		let dx = randEff(-1,1);
		let dy = randEff(-1,1);
		let dz = randEff(-1,1);

		ObjPrim_SetTexture(obj,path);
		ObjRender_SetBlendType(obj,BLEND_ADD_RGB);
		Obj_SetRenderPriorityI(obj, 40);
		ObjSprite2D_SetSourceRect(obj,0,0,128,64);
		ObjSprite2D_SetDestRect(obj,0,-32,128,32);

		ObjRender_SetPosition(obj, ex, ey, 0);

		loop(20) {
			ObjRender_SetPosition(obj, ex, ey, 0);
			ObjRender_SetScaleXYZ(obj,scale,scale,scale);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			ObjRender_SetColor(obj,RGB[0]*(alpha/255),RGB[1]*(alpha/255),RGB[2]*(alpha/255));
			alpha+=255/20;
			x+=dx; y+=dy; z+=dz;
			scale+=maxscale/20;
			yield;
		}
		loop(30) {
			ObjRender_SetPosition(obj, ex, ey, 0);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			x+=dx; y+=dy; z+=dz;
			yield;
		}
		loop(30) {
			ObjRender_SetPosition(obj, ex, ey, 0);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			ObjRender_SetColor(obj,RGB[0]*(alpha/255),RGB[1]*(alpha/255),RGB[2]*(alpha/255));
			alpha-=255/30;
			x+=dx; y+=dy; z+=dz;
			yield;
		}
		Obj_Delete(obj);
	}
}
task MSDEffectExplode(objID,ex,ey,color) {
	let scale = 22;
	let RGB = color;

	Concentration;
	loop(150/5) {
		loop(2) {
			Beam;
		}
		loop(5) { yield; }
	}
	loop(75) {
		loop(3) {
			if(scale>8) { Beam; }
		}
		loop(2) {
			Star(scale);
		}
		scale-=22/75;
		loop(2) { yield; }
	}
	task Concentration {
		loop(180/10) {
			Concentrate;
			loop(10) { yield; }
		}
	}
	task Star(maxscale) {
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		let path = MD ~ "System/IMG/Effect/MSDEffect.png";

		let scale = 0;
		let alpha = 255;
		let x = randEff(-30,30);
		let y = randEff(-30,30);
		let z = randEff(-30,30);
		let dx = randEff(-2,2);
		let dy = randEff(-2,2);
		let dz = randEff(-2,2);

		ObjPrim_SetTexture(obj,path);
		ObjRender_SetBlendType(obj,BLEND_ADD_RGB);
		Obj_SetRenderPriorityI(obj,40);
		ObjSprite2D_SetSourceRect(obj,0,64,64,128);
		ObjSprite2D_SetDestCenter(obj);

		ObjRender_SetPosition(obj, ex, ey, 0);

		loop(60) {
			ObjRender_SetScaleXYZ(obj,scale,scale,scale);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			ObjRender_SetColor(obj,RGB[0]*(alpha/255),RGB[1]*(alpha/255),RGB[2]*(alpha/255));
			alpha-=255/60;
			scale+=maxscale/60;
			//x+=dx; y+=dy; z+=dz;
			yield;
		}
		Obj_Delete(obj);
	}
	task Concentrate {
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		let path = MD ~ "System/IMG/Effect/MSDEffect.png";

		let scale = 1.6;
		let scaleX = randEff(2,3);
		let scaleY = randEff(2,3);
		let scaleZ = randEff(2,3);
		let alpha = 0;
		let x = randEff(-90,90);
		let y = randEff(-90,90);
		let z = randEff(-90,90);
		let dx = randEff(-1,1);
		let dy = randEff(-1,1);
		let dz = randEff(-1,1);

		ObjPrim_SetTexture(obj,path);
		ObjRender_SetBlendType(obj,BLEND_ADD_RGB);
		Obj_SetRenderPriorityI(obj,40);
		ObjSprite2D_SetSourceRect(obj,128,0,256,128);
		ObjSprite2D_SetDestCenter(obj);

		ObjRender_SetPosition(obj, ex, ey, 0);

		loop(10) {
			ObjRender_SetScaleXYZ(obj,scaleX*scale,scaleY*scale,scaleZ*scale);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			ObjRender_SetColor(obj,RGB[0]*(alpha/255),RGB[1]*(alpha/255),RGB[2]*(alpha/255));
			alpha+=255/10;
			scale-=1.6/60;
			x+=dx; y+=dy; z+=dz;
			yield;
		}
		loop(50) {
			ObjRender_SetScaleXYZ(obj,scaleX*scale,scaleY*scale,scaleZ*scale);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			scale-=1.6/60;
			x+=dx; y+=dy; z+=dz;
			yield;
		}
		Obj_Delete(obj);
	}
	task Explode {
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		let path = MD ~ "System/IMG/Effect/MSDEffect.png";

		let scale = 0;
		let scaleX = randEff(2,3);
		let scaleY = randEff(2,3);
		let scaleZ = randEff(2,3);
		let alpha = 0;
		let x = randEff(0,360);
		let y = randEff(0,360);
		let z = randEff(0,360);
		let dx = randEff(-1,1);
		let dy = randEff(-1,1);
		let dz = randEff(-1,1);

		ObjPrim_SetTexture(obj,path);
		ObjRender_SetBlendType(obj,BLEND_ADD_RGB);
		Obj_SetRenderPriorityI(obj,40);
		ObjSprite2D_SetSourceRect(obj,128,0,256,128);
		ObjSprite2D_SetDestCenter(obj);

		ObjRender_SetPosition(obj, ex, ey, 0);

		loop(10) {
			ObjRender_SetScaleXYZ(obj,scaleX*scale,scaleY*scale,scaleZ*scale);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			scale+=2.4/20;
			x+=dx; y+=dy; z+=dz;
			yield;
		}
		loop(10) {
			ObjRender_SetScaleXYZ(obj,scaleX*scale,scaleY*scale,scaleZ*scale);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			ObjRender_SetColor(obj,RGB[0]*(alpha/255),RGB[1]*(alpha/255),RGB[2]*(alpha/255));
			alpha-=255/10;
			scale+=1.6/20;
			x+=dx; y+=dy; z+=dz;
			yield;
		}
		Obj_Delete(obj);
	}
	task Beam {
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		let path = MD ~ "System/IMG/Effect/MSDEffect.png";

		let maxscale = randEff(1.5,2.5);
		let scale = 0;
		let alpha = 0;
		let x = randEff(0,360);
		let y = randEff(0,360);
		let z = randEff(0,360);
		let dx = randEff(-1,1);
		let dy = randEff(-1,1);
		let dz = randEff(-1,1);

		ObjPrim_SetTexture(obj,path);
		ObjRender_SetBlendType(obj,BLEND_ADD_RGB);
		Obj_SetRenderPriorityI(obj,40);
		ObjSprite2D_SetSourceRect(obj,0,0,128,64);
		ObjSprite2D_SetDestRect(obj,0,-32,128,32);

		ObjRender_SetPosition(obj, ex, ey, 0);

		loop(20) {
			ObjRender_SetScaleXYZ(obj,scale,scale,scale);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			ObjRender_SetColor(obj,RGB[0]*(alpha/255),RGB[1]*(alpha/255),RGB[2]*(alpha/255));
			alpha+=255/20;
			x+=dx; y+=dy; z+=dz;
			scale+=maxscale/20;
			yield;
		}
		loop(30) {
			ObjRender_SetAngleXYZ(obj,x,y,z);
			x+=dx; y+=dy; z+=dz;
			yield;
		}
		loop(30) {
			ObjRender_SetAngleXYZ(obj,x,y,z);
			ObjRender_SetColor(obj,RGB[0]*(alpha/255),RGB[1]*(alpha/255),RGB[2]*(alpha/255));
			alpha-=255/30;
			x+=dx; y+=dy; z+=dz;
			yield;
		}
		Obj_Delete(obj);
	}
}
task MSDEffectRainbow(duration,objID) {
	let scale = 18;
	let RGB = [[255,64,64],[255,128,64],[255,255,64],[64,255,64],[64,64,255],[64,64,255]];
	let ex = ObjRender_GetX(objID);
	let ey = ObjRender_GetY(objID);

	loop(duration/30) {
		ascent(i in 0..6) {
			ex = ObjRender_GetX(objID);
			ey = ObjRender_GetY(objID);
			if(!Obj_IsDeleted(objID)) {
				Concentrate(RGB[i][0],RGB[i][1],RGB[i][2]);
				loop(2) {
					Beam(RGB[i][0],RGB[i][1],RGB[i][2]);
				}
				loop(5) { yield; }
			}
		}
	}
	task Star(maxscale,R,G,B) {
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		let path = MD ~ "System/IMG/Effect/MSDEffect.png";

		let scale = 0;
		let alpha = 255;
		let x = randEff(-30,30);
		let y = randEff(-30,30);
		let z = randEff(-30,30);
		let dx = randEff(-2,2);
		let dy = randEff(-2,2);
		let dz = randEff(-2,2);

		ObjPrim_SetTexture(obj,path);
		ObjRender_SetBlendType(obj,BLEND_ADD_RGB);
		Obj_SetRenderPriorityI(obj, 40);
		ObjSprite2D_SetSourceRect(obj,0,64,64,128);
		ObjSprite2D_SetDestCenter(obj);

		ObjRender_SetPosition(obj, ex, ey, 0);

		loop(60) {
			ObjRender_SetScaleXYZ(obj,scale,scale,scale);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			ObjRender_SetColor(obj,R*(alpha/255),G*(alpha/255),B*(alpha/255));
			alpha-=255/60;
			scale+=maxscale/60;
			//x+=dx; y+=dy; z+=dz;
			yield;
		}
		Obj_Delete(obj);
	}
	task Concentrate(R,G,B) {
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		let path = MD ~ "System/IMG/Effect/MSDEffect.png";

		let scale = 1.6;
		let scaleX = randEff(2,3);
		let scaleY = randEff(2,3);
		let scaleZ = randEff(2,3);
		let alpha = 0;
		let x = randEff(-90,90);
		let y = randEff(-90,90);
		let z = randEff(-90,90);
		let dx = randEff(-1,1);
		let dy = randEff(-1,1);
		let dz = randEff(-1,1);

		ObjPrim_SetTexture(obj,path);
		ObjRender_SetBlendType(obj,BLEND_ADD_RGB);
		Obj_SetRenderPriorityI(obj, 40);
		ObjSprite2D_SetSourceRect(obj,128,0,256,128);
		ObjSprite2D_SetDestCenter(obj);

		ObjRender_SetPosition(obj, ex, ey, 0);

		loop(10) {
			ObjRender_SetScaleXYZ(obj,scaleX*scale,scaleY*scale,scaleZ*scale);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			ObjRender_SetColor(obj,R*(alpha/255),G*(alpha/255),B*(alpha/255));
			alpha+=255/10;
			scale-=1.6/40;
			x+=dx; y+=dy; z+=dz;
			yield;
		}
		loop(30) {
			ObjRender_SetScaleXYZ(obj,scaleX*scale,scaleY*scale,scaleZ*scale);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			scale-=1.6/40;
			x+=dx; y+=dy; z+=dz;
			yield;
		}
		Obj_Delete(obj);
	}
	task Explode(R,G,B) {
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		let path = MD ~ "System/IMG/Effect/MSDEffect.png";

		let scale = 0;
		let scaleX = randEff(2,3);
		let scaleY = randEff(2,3);
		let scaleZ = randEff(2,3);
		let alpha = 255;
		let x = randEff(-90,90);
		let y = randEff(-90,90);
		let z = randEff(-90,90);
		let dx = randEff(-1,1);
		let dy = randEff(-1,1);
		let dz = randEff(-1,1);

		ObjPrim_SetTexture(obj,path);
		ObjRender_SetBlendType(obj,BLEND_ADD_RGB);
		Obj_SetRenderPriorityI(obj, 40);
		ObjSprite2D_SetSourceRect(obj,128,0,256,128);
		ObjSprite2D_SetDestCenter(obj);

		ObjRender_SetPosition(obj, ex, ey, 0);

		loop(30) {
			ObjRender_SetScaleXYZ(obj,scaleX*scale,scaleY*scale,scaleZ*scale);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			ObjRender_SetColor(obj,R*(alpha/255),G*(alpha/255),B*(alpha/255));
			scale+=3.0/40;
			x+=dx; y+=dy; z+=dz;
			yield;
		}
		loop(10) {
			ObjRender_SetScaleXYZ(obj,scaleX*scale,scaleY*scale,scaleZ*scale);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			ObjRender_SetColor(obj,R*(alpha/255),G*(alpha/255),B*(alpha/255));
			alpha-=255/10;
			scale+=3.0/40;
			x+=dx; y+=dy; z+=dz;
			yield;
		}
		Obj_Delete(obj);
	}
	task Beam(R,G,B) {
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		let path = MD ~ "System/IMG/Effect/MSDEffect.png";

		let maxscale = randEff(1.5,2.5);
		let scale = 0;
		let alpha = 0;
		let x = randEff(0,360);
		let y = randEff(0,360);
		let z = randEff(0,360);
		let dx = randEff(-1,1);
		let dy = randEff(-1,1);
		let dz = randEff(-1,1);

		ObjPrim_SetTexture(obj,path);
		ObjRender_SetBlendType(obj,BLEND_ADD_RGB);
		Obj_SetRenderPriorityI(obj, 40);
		ObjSprite2D_SetSourceRect(obj,0,0,128,64);
		ObjSprite2D_SetDestRect(obj,0,-32,128,32);

		ObjRender_SetPosition(obj, ex, ey, 0);

		loop(20) {
			ObjRender_SetScaleXYZ(obj,scale,scale,scale);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			ObjRender_SetColor(obj,R*(alpha/255),G*(alpha/255),B*(alpha/255));
			alpha+=255/20;
			x+=dx; y+=dy; z+=dz;
			scale+=maxscale/20;
			yield;
		}
		loop(30) {
			ObjRender_SetAngleXYZ(obj,x,y,z);
			x+=dx; y+=dy; z+=dz;
			yield;
		}
		loop(30) {
			ObjRender_SetAngleXYZ(obj,x,y,z);
			ObjRender_SetColor(obj,R*(alpha/255),G*(alpha/255),B*(alpha/255));
			alpha-=255/30;
			x+=dx; y+=dy; z+=dz;
			yield;
		}
		Obj_Delete(obj);
	}
}
task MSDEffectRainbowExplode(objID,duration,ex,ey) {
	let scale = 18;
	let RGB = [[255,64,64],[255,128,64],[255,255,64],[128,255,128],[128,128,255],[128,64,255]];

	loop(duration/48) {
		ascent(i in 0..6) {
			Concentrate(RGB[i][0],RGB[i][1],RGB[i][2]);
			loop(2) {
				Beam(RGB[i][0],RGB[i][1],RGB[i][2]);
			}
			loop(8) { yield; }
		}
	}
	loop(12) {
		ascent(i in 0..6) {
			Explode(RGB[i][0],RGB[i][1],RGB[i][2]);
			loop(3) {
				if(scale>8) { Beam(RGB[i][0],RGB[i][1],RGB[i][2]); }
			}
			loop(2) {
				Star(scale,RGB[i][0],RGB[i][1],RGB[i][2]);
			}
			scale-=18/75;
			loop(2) { yield; }
		}
	}
	task Star(maxscale,R,G,B) {
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		let path = MD ~ "System/IMG/Effect/MSDEffect.png";

		let scale = 0;
		let alpha = 255;
		let x = randEff(-30,30);
		let y = randEff(-30,30);
		let z = randEff(-30,30);
		let dx = randEff(-2,2);
		let dy = randEff(-2,2);
		let dz = randEff(-2,2);

		ObjPrim_SetTexture(obj,path);
		ObjRender_SetBlendType(obj,BLEND_ADD_RGB);
		Obj_SetRenderPriorityI(obj,40);
		ObjSprite2D_SetSourceRect(obj,0,64,64,128);
		ObjSprite2D_SetDestCenter(obj);

		ObjRender_SetPosition(obj, ex, ey, 0);

		loop(60) {
			ObjRender_SetScaleXYZ(obj,scale,scale,scale);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			ObjRender_SetColor(obj,R*(alpha/255),G*(alpha/255),B*(alpha/255));
			alpha-=255/60;
			scale+=maxscale/60;
			//x+=dx; y+=dy; z+=dz;
			yield;
		}
		Obj_Delete(obj);
	}
	task Concentrate(R,G,B) {
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		let path = MD ~ "System/IMG/Effect/MSDEffect.png";

		let scale = 1.6;
		let scaleX = randEff(2,3);
		let scaleY = randEff(2,3);
		let scaleZ = randEff(2,3);
		let alpha = 0;
		let x = randEff(-90,90);
		let y = randEff(-90,90);
		let z = randEff(-90,90);
		let dx = randEff(-1,1);
		let dy = randEff(-1,1);
		let dz = randEff(-1,1);

		ObjPrim_SetTexture(obj,path);
		ObjRender_SetBlendType(obj,BLEND_ADD_RGB);
		Obj_SetRenderPriorityI(obj,40);
		ObjSprite2D_SetSourceRect(obj,128,0,256,128);
		ObjSprite2D_SetDestCenter(obj);

		ObjRender_SetPosition(obj, ex, ey, 0);

		loop(10) {
			ObjRender_SetScaleXYZ(obj,scaleX*scale,scaleY*scale,scaleZ*scale);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			ObjRender_SetColor(obj,R*(alpha/255),G*(alpha/255),B*(alpha/255));
			alpha+=255/10;
			scale-=1.6/50;
			x+=dx; y+=dy; z+=dz;
			yield;
		}
		loop(40) {
			ObjRender_SetScaleXYZ(obj,scaleX*scale,scaleY*scale,scaleZ*scale);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			scale-=1.6/50;
			x+=dx; y+=dy; z+=dz;
			yield;
		}
		Obj_Delete(obj);
	}
	task Explode(R,G,B) {
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		let path = MD ~ "System/IMG/Effect/MSDEffect.png";

		let scale = 0;
		let scaleX = randEff(2,3);
		let scaleY = randEff(2,3);
		let scaleZ = randEff(2,3);
		let alpha = 255;
		let x = randEff(-90,90);
		let y = randEff(-90,90);
		let z = randEff(-90,90);
		let dx = randEff(-1,1);
		let dy = randEff(-1,1);
		let dz = randEff(-1,1);

		ObjPrim_SetTexture(obj,path);
		ObjRender_SetBlendType(obj,BLEND_ADD_RGB);
		Obj_SetRenderPriorityI(obj,40);
		ObjSprite2D_SetSourceRect(obj,128,0,256,128);
		ObjSprite2D_SetDestCenter(obj);

		ObjRender_SetPosition(obj, ex, ey, 0);

		loop(40) {
			ObjRender_SetScaleXYZ(obj,scaleX*scale,scaleY*scale,scaleZ*scale);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			ObjRender_SetColor(obj,R*(alpha/255),G*(alpha/255),B*(alpha/255));
			scale+=3.0/50;
			x+=dx; y+=dy; z+=dz;
			yield;
		}
		loop(10) {
			ObjRender_SetScaleXYZ(obj,scaleX*scale,scaleY*scale,scaleZ*scale);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			ObjRender_SetColor(obj,R*(alpha/255),G*(alpha/255),B*(alpha/255));
			alpha-=255/10;
			scale+=3.0/50;
			x+=dx; y+=dy; z+=dz;
			yield;
		}
		Obj_Delete(obj);
	}
	task Beam(R,G,B) {
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		let path = MD ~ "System/IMG/Effect/MSDEffect.png";

		let maxscale = randEff(1.5,2.5);
		let scale = 0;
		let alpha = 0;
		let x = randEff(0,360);
		let y = randEff(0,360);
		let z = randEff(0,360);
		let dx = randEff(-1,1);
		let dy = randEff(-1,1);
		let dz = randEff(-1,1);

		ObjPrim_SetTexture(obj,path);
		ObjRender_SetBlendType(obj,BLEND_ADD_RGB);
		Obj_SetRenderPriorityI(obj,40);
		ObjSprite2D_SetSourceRect(obj,0,0,128,64);
		ObjSprite2D_SetDestRect(obj,0,-32,128,32);

		ObjRender_SetPosition(obj, ex, ey, 0);

		loop(20) {
			ObjRender_SetScaleXYZ(obj,scale,scale,scale);
			ObjRender_SetAngleXYZ(obj,x,y,z);
			ObjRender_SetColor(obj,R*(alpha/255),G*(alpha/255),B*(alpha/255));
			alpha+=255/20;
			x+=dx; y+=dy; z+=dz;
			scale+=maxscale/20;
			yield;
		}
		loop(30) {
			ObjRender_SetAngleXYZ(obj,x,y,z);
			x+=dx; y+=dy; z+=dz;
			yield;
		}
		loop(30) {
			ObjRender_SetAngleXYZ(obj,x,y,z);
			ObjRender_SetColor(obj,R*(alpha/255),G*(alpha/255),B*(alpha/255));
			alpha-=255/30;
			x+=dx; y+=dy; z+=dz;
			yield;
		}
		Obj_Delete(obj);
	}
}
task Wings(CallID,type) { // Adapted from Riverbed Soul Saver
	let obj			= [
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
	];
	let gpos		= [ ObjMove_GetX(CallID), ObjMove_GetY(CallID) ];
	let csd			= GetCurrentScriptDirectory;
	let path		= MD ~ "IMG/Enemy/Stage 6/wing.png";
	let move1		= 0;
	let moveA		= 0;
	let i			= 0;
	let frame		= 0;

	if( type == 0 ){
	}
	else if( type == 1 ){
		moveA = 90;
	}

	ascent( i in 0..( length(obj) ) ){
		ObjPrim_SetTexture(obj[i], path );
		ObjRender_SetBlendType(obj[i], BLEND_ADD_ARGB );
		Obj_SetRenderPriorityI(obj[i], 39 );

		ObjSprite2D_SetSourceRect(obj[i],0,0,512,512);
		ObjSprite2D_SetDestRect(obj[i], -256-216, -256+5, 256-216, 256+5);
	}

	while( !Obj_IsDeleted(CallID) && !Obj_GetValueD(CallID,"WingsEnd",false)){
		gpos = [ ObjMove_GetX(CallID), ObjMove_GetY(CallID) ];

		move1 = 1 * sin( moveA );

		if(type!=2) { ObjEnemy_SetIntersectionCircleToShot(CallID, gpos[0], gpos[1], move1*36 ); }

		let RenderAngle = [
			(90-move1*90) + 0 + 32*sin( frame*4 ),
			(90-move1*90) + 180 + 32*sin( frame*4 ),
			3-4*sin( frame*4 ),
		];

		ObjRender_SetPosition(obj[0], gpos[0], gpos[1], 0 );
		ObjRender_SetPosition(obj[1], gpos[0], gpos[1], 0 );
		ObjRender_SetAngleXYZ(obj[0], 0, RenderAngle[0], RenderAngle[2] );
		ObjRender_SetAngleXYZ(obj[1], 0, RenderAngle[1], RenderAngle[2] );

		let alpha = [
			192-64*sin(frame*4),
			( 192-64*sin(frame*4) ) / 1.2,
		];

		ascent( i in 0..( length(obj) ) ){
			ObjRender_SetAlpha(obj[i],alpha[frame%2]);
			//ObjRender_SetColor(obj[i],255,0,64);
			ObjRender_SetScaleXYZ(obj[i], 0.55*2 - move1*0.55 + 0.01*cos(frame*2), move1*0.55 + 0.01*sin(frame*2), 0 );
		}

		let fr = 8;
		if( ObjMove_GetSpeed(CallID) != 0 ){ fr = 2; }

		if( frame%fr == 0 ){
			if( move1 >= 1 ){
				SetEffectVision( CallID, 128, RenderAngle, BLEND_ADD_ARGB );
			}
			else{
				SetEffectVision( CallID, 255, RenderAngle, BLEND_ADD_ARGB );
			}
		}

		frame++;
		if( move1 < 1 ){ moveA += 2; }

		yield;
	}
	ascent( i in 0..( length(obj) ) ){
		Obj_Delete( obj[i] );
	}
}
task SetEffectVision( CallID, alpha, RenderAngle, Blend ){ // Adapted from Riverbed Soul Saver
	let obj			= [
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
	];
	let gpos		= [ ObjMove_GetX(CallID), ObjMove_GetY(CallID) ];
	let csd			= GetCurrentScriptDirectory;
	let path		= MD ~ "IMG/Enemy/Stage 6/wing.png";
	let move1		= 0;
	let moveA		= 0;
	let i			= 0;
	let frame		= 0;

	ascent( i in 0..( length(obj) ) ){
		ObjPrim_SetTexture(obj[i], path );
		ObjRender_SetBlendType(obj[i], Blend );
		Obj_SetRenderPriorityI(obj[i], 38 );
		ObjRender_SetScaleXYZ(obj[i],0.60,0.60,0.60);

		ObjSprite2D_SetSourceRect(obj[i],0,0,512,512);
		ObjSprite2D_SetDestRect(obj[i], -256-232, -256+5, 256-232, 256+5);
	}

	while( !Obj_IsDeleted(CallID) && move1 < 1 ){

		move1 = 1 * sin( moveA );

		ObjRender_SetPosition(obj[0], gpos[0], gpos[1], 0 );
		ObjRender_SetPosition(obj[1], gpos[0], gpos[1], 0 );
		ObjRender_SetAngleXYZ(obj[0], 0, RenderAngle[0], RenderAngle[2] );
		ObjRender_SetAngleXYZ(obj[1], 0, RenderAngle[1], RenderAngle[2] );

		ascent( i in 0..( length(obj) ) ){
			ObjRender_SetColor(obj[i], 255, 255, 255 );
			ObjRender_SetAlpha(obj[i], move1*alpha );
		}

		frame++;
		moveA += 10;

		yield;
	}
	move1 = 0;
	moveA = 0;
	while( move1 < 1 ){

		move1 = 1 * sin( moveA );

		ObjRender_SetPosition(obj[0], gpos[0]-move1*32, gpos[1]+move1*32, 0 );
		ObjRender_SetPosition(obj[1], gpos[0]+move1*32, gpos[1]+move1*32, 0 );
		ObjRender_SetAngleXYZ(obj[0], 0, RenderAngle[0], RenderAngle[2] );
		ObjRender_SetAngleXYZ(obj[1], 0, RenderAngle[1], RenderAngle[2] );

		ascent( i in 0..( length(obj) ) ){
			ObjRender_SetColor(obj[i], 255, 255-move1*255, 255-move1*128 );
			//ObjRender_SetColor(obj[i], 255-move1*128, 255, 255-move1*255 );
			ObjRender_SetAlpha(obj[i], alpha - move1*alpha );
		}

		frame++;
		moveA += 5;

		yield;
	}
	ascent( i in 0..( length(obj) ) ){
		Obj_Delete( obj[i] );
	}
}
task ScreenShake(duration,range) {
	let shake = range;
	loop(duration) {
		Set2DCameraFocusX(Get2DCameraX + randEff(-shake, shake));
		Set2DCameraFocusY(Get2DCameraY + randEff(-shake, shake));
		shake-=range/duration;
		yield;
		Reset2DCamera;
	}
}
task MotionBlur(n, delay, frames, max_intensity){ // by Drake
	// n: number of image frames
	// delay: delay in frames between images
	// frames: duration of effect in frames
	// max_intensity: intensity of effect; typically ranges between [0, 1] but can be set higher
	let num = min(n, 10);
	let intensity = max_intensity;

	let textures = [];
	let tex_objs = [];
	ascent(i in 0..num){
		textures = textures ~ ["EffectBuffer"~itoa(i)];
		CreateRenderTarget(textures[i]);
		tex_objs = tex_objs ~ [ makeTextureObject(textures[i]) ];
	}

	function makeTextureObject(texture){
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjRender_SetPosition(obj, 0, 0, 0);
		ObjPrim_SetTexture(obj, texture);
		ObjSprite2D_SetSourceRect(obj, 32, 16, 32+384, 16+448);
		ObjSprite2D_SetDestRect(obj, 0, 0, 0+384, 0+448);
		Obj_SetRenderPriorityI(obj, 79);
		return obj;
	}

	let c = 0;
	let duration = floor(frames/delay);
	ascent(t in 0..duration){
		// render frame to current target
		RenderToTextureA1(textures[c], 1, 69, true);

		ascent(i in 0..num){
			Obj_SetRenderPriorityI( tex_objs[(c + i + 1) % num], 79 - i );
			ObjRender_SetAlpha( tex_objs[(c + i + 1) % num], intensity * 255 / ((num-i) + 1) );
			// With layers n, n-1, ..., 3, 2, 1, setting their respective opacities
			//  to 1/n, 1/(n-1), ..., 1/3, 1/2, 1, makes them all equally visible
		}

		// effect end transition
		if(duration - t < num){
			intensity = max_intensity * (duration - t) / num;
		}

		c = (c + 1) % num; // switch to next target
		loop(delay){yield;}
	}

	ascent(i in 0..length(tex_objs)){ Obj_Delete(tex_objs[i]); }
}
function SetHueSaturation(obj,hue,sat) {
	ObjShader_SetTechnique(sh_hueShift, "TecShift");
	ObjShader_SetFloat(sh_hueShift, "paramHue", hue);
	ObjShader_SetFloat(sh_hueShift, "paramSat", sat);
	ObjShader_SetShaderO(obj,sh_hueShift);
}
